{"ast":null,"code":"import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\"use strict\";\nconst _GlContextSystem = class _GlContextSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    /**\n     * Features supported by current renderer.\n     * @type {object}\n     * @readonly\n     */\n    this.supports = {\n      /** Support for 32-bit indices buffer. */\n      uint32Indices: true,\n      /** Support for UniformBufferObjects */\n      uniformBufferObject: true,\n      /** Support for VertexArrayObjects */\n      vertexArrayObject: true,\n      /** Support for SRGB texture format */\n      srgbTextures: true,\n      /** Support for wrapping modes if a texture is non-power of two */\n      nonPowOf2wrapping: true,\n      /** Support for MSAA (antialiasing of dynamic textures) */\n      msaa: true,\n      /** Support for mipmaps if a texture is non-power of two */\n      nonPowOf2mipmaps: true\n    };\n    this._renderer = renderer;\n    this.extensions = /* @__PURE__ */Object.create(null);\n    this.handleContextLost = this.handleContextLost.bind(this);\n    this.handleContextRestored = this.handleContextRestored.bind(this);\n  }\n  /**\n   * `true` if the context is lost\n   * @readonly\n   */\n  get isLost() {\n    return !this.gl || this.gl.isContextLost();\n  }\n  /**\n   * Handles the context change event.\n   * @param {WebGLRenderingContext} gl - New WebGL context.\n   */\n  contextChange(gl) {\n    this.gl = gl;\n    this._renderer.gl = gl;\n  }\n  init(options) {\n    options = {\n      ..._GlContextSystem.defaultOptions,\n      ...options\n    };\n    let multiView = this.multiView = options.multiView;\n    if (options.context && multiView) {\n      warn(\"Renderer created with both a context and multiview enabled. Disabling multiView as both cannot work together.\");\n      multiView = false;\n    }\n    if (multiView) {\n      this.canvas = DOMAdapter.get().createCanvas(this._renderer.canvas.width, this._renderer.canvas.height);\n    } else {\n      this.canvas = this._renderer.view.canvas;\n    }\n    if (options.context) {\n      this.initFromContext(options.context);\n    } else {\n      const alpha = this._renderer.background.alpha < 1;\n      const premultipliedAlpha = options.premultipliedAlpha ?? true;\n      const antialias = options.antialias && !this._renderer.backBuffer.useBackBuffer;\n      this.createContext(options.preferWebGLVersion, {\n        alpha,\n        premultipliedAlpha,\n        antialias,\n        stencil: true,\n        preserveDrawingBuffer: options.preserveDrawingBuffer,\n        powerPreference: options.powerPreference ?? \"default\"\n      });\n    }\n  }\n  ensureCanvasSize(targetCanvas) {\n    if (!this.multiView) {\n      if (targetCanvas !== this.canvas) {\n        warn(\"multiView is disabled, but targetCanvas is not the main canvas\");\n      }\n      return;\n    }\n    const {\n      canvas\n    } = this;\n    if (canvas.width < targetCanvas.width || canvas.height < targetCanvas.height) {\n      canvas.width = Math.max(targetCanvas.width, targetCanvas.width);\n      canvas.height = Math.max(targetCanvas.height, targetCanvas.height);\n    }\n  }\n  /**\n   * Initializes the context.\n   * @protected\n   * @param {WebGLRenderingContext} gl - WebGL context\n   */\n  initFromContext(gl) {\n    this.gl = gl;\n    this.webGLVersion = gl instanceof DOMAdapter.get().getWebGLRenderingContext() ? 1 : 2;\n    this.getExtensions();\n    this.validateContext(gl);\n    this._renderer.runners.contextChange.emit(gl);\n    const element = this._renderer.view.canvas;\n    element.addEventListener(\"webglcontextlost\", this.handleContextLost, false);\n    element.addEventListener(\"webglcontextrestored\", this.handleContextRestored, false);\n  }\n  /**\n   * Initialize from context options\n   * @protected\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n   * @param preferWebGLVersion\n   * @param {object} options - context attributes\n   */\n  createContext(preferWebGLVersion, options) {\n    let gl;\n    const canvas = this.canvas;\n    if (preferWebGLVersion === 2) {\n      gl = canvas.getContext(\"webgl2\", options);\n    }\n    if (!gl) {\n      gl = canvas.getContext(\"webgl\", options);\n      if (!gl) {\n        throw new Error(\"This browser does not support WebGL. Try using the canvas renderer\");\n      }\n    }\n    this.gl = gl;\n    this.initFromContext(this.gl);\n  }\n  /** Auto-populate the {@link GlContextSystem.extensions extensions}. */\n  getExtensions() {\n    const {\n      gl\n    } = this;\n    const common = {\n      anisotropicFiltering: gl.getExtension(\"EXT_texture_filter_anisotropic\"),\n      floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n      s3tc: gl.getExtension(\"WEBGL_compressed_texture_s3tc\"),\n      s3tc_sRGB: gl.getExtension(\"WEBGL_compressed_texture_s3tc_srgb\"),\n      // eslint-disable-line camelcase\n      etc: gl.getExtension(\"WEBGL_compressed_texture_etc\"),\n      etc1: gl.getExtension(\"WEBGL_compressed_texture_etc1\"),\n      pvrtc: gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") || gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\"),\n      atc: gl.getExtension(\"WEBGL_compressed_texture_atc\"),\n      astc: gl.getExtension(\"WEBGL_compressed_texture_astc\"),\n      bptc: gl.getExtension(\"EXT_texture_compression_bptc\"),\n      rgtc: gl.getExtension(\"EXT_texture_compression_rgtc\"),\n      loseContext: gl.getExtension(\"WEBGL_lose_context\")\n    };\n    if (this.webGLVersion === 1) {\n      this.extensions = {\n        ...common,\n        drawBuffers: gl.getExtension(\"WEBGL_draw_buffers\"),\n        depthTexture: gl.getExtension(\"WEBGL_depth_texture\"),\n        vertexArrayObject: gl.getExtension(\"OES_vertex_array_object\") || gl.getExtension(\"MOZ_OES_vertex_array_object\") || gl.getExtension(\"WEBKIT_OES_vertex_array_object\"),\n        uint32ElementIndex: gl.getExtension(\"OES_element_index_uint\"),\n        // Floats and half-floats\n        floatTexture: gl.getExtension(\"OES_texture_float\"),\n        floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n        textureHalfFloat: gl.getExtension(\"OES_texture_half_float\"),\n        textureHalfFloatLinear: gl.getExtension(\"OES_texture_half_float_linear\"),\n        vertexAttribDivisorANGLE: gl.getExtension(\"ANGLE_instanced_arrays\"),\n        srgb: gl.getExtension(\"EXT_sRGB\")\n      };\n    } else {\n      this.extensions = {\n        ...common,\n        colorBufferFloat: gl.getExtension(\"EXT_color_buffer_float\")\n      };\n      const provokeExt = gl.getExtension(\"WEBGL_provoking_vertex\");\n      if (provokeExt) {\n        provokeExt.provokingVertexWEBGL(provokeExt.FIRST_VERTEX_CONVENTION_WEBGL);\n      }\n    }\n  }\n  /**\n   * Handles a lost webgl context\n   * @param {WebGLContextEvent} event - The context lost event.\n   */\n  handleContextLost(event) {\n    event.preventDefault();\n    if (this._contextLossForced) {\n      this._contextLossForced = false;\n      setTimeout(() => {\n        if (this.gl.isContextLost()) {\n          this.extensions.loseContext?.restoreContext();\n        }\n      }, 0);\n    }\n  }\n  /** Handles a restored webgl context. */\n  handleContextRestored() {\n    this._renderer.runners.contextChange.emit(this.gl);\n  }\n  destroy() {\n    const element = this._renderer.view.canvas;\n    this._renderer = null;\n    element.removeEventListener(\"webglcontextlost\", this.handleContextLost);\n    element.removeEventListener(\"webglcontextrestored\", this.handleContextRestored);\n    this.gl.useProgram(null);\n    this.extensions.loseContext?.loseContext();\n  }\n  /**\n   * this function can be called to force a webGL context loss\n   * this will release all resources on the GPU.\n   * Useful if you need to put Pixi to sleep, and save some GPU memory\n   *\n   * As soon as render is called - all resources will be created again.\n   */\n  forceContextLoss() {\n    this.extensions.loseContext?.loseContext();\n    this._contextLossForced = true;\n  }\n  /**\n   * Validate context.\n   * @param {WebGLRenderingContext} gl - Render context.\n   */\n  validateContext(gl) {\n    const attributes = gl.getContextAttributes();\n    if (attributes && !attributes.stencil) {\n      warn(\"Provided WebGL context does not have a stencil buffer, masks may not render correctly\");\n    }\n    const supports = this.supports;\n    const isWebGl2 = this.webGLVersion === 2;\n    const extensions = this.extensions;\n    supports.uint32Indices = isWebGl2 || !!extensions.uint32ElementIndex;\n    supports.uniformBufferObject = isWebGl2;\n    supports.vertexArrayObject = isWebGl2 || !!extensions.vertexArrayObject;\n    supports.srgbTextures = isWebGl2 || !!extensions.srgb;\n    supports.nonPowOf2wrapping = isWebGl2;\n    supports.nonPowOf2mipmaps = isWebGl2;\n    supports.msaa = isWebGl2;\n    if (!supports.uint32Indices) {\n      warn(\"Provided WebGL context does not support 32 index buffer, large scenes may not render correctly\");\n    }\n  }\n};\n/** @ignore */\n_GlContextSystem.extension = {\n  type: [ExtensionType.WebGLSystem],\n  name: \"context\"\n};\n/** The default options for the system. */\n_GlContextSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.context}\n   * @default null\n   */\n  context: null,\n  /**\n   * {@link WebGLOptions.premultipliedAlpha}\n   * @default true\n   */\n  premultipliedAlpha: true,\n  /**\n   * {@link WebGLOptions.preserveDrawingBuffer}\n   * @default false\n   */\n  preserveDrawingBuffer: false,\n  /**\n   * {@link WebGLOptions.powerPreference}\n   * @default default\n   */\n  powerPreference: void 0,\n  /**\n   * {@link WebGLOptions.webGLVersion}\n   * @default 2\n   */\n  preferWebGLVersion: 2,\n  /**\n   * {@link WebGLOptions.multiView}\n   * @default false\n   */\n  multiView: false\n};\nlet GlContextSystem = _GlContextSystem;\nexport { GlContextSystem };","map":{"version":3,"names":["_GlContextSystem","constructor","renderer","supports","uint32Indices","uniformBufferObject","vertexArrayObject","srgbTextures","nonPowOf2wrapping","msaa","nonPowOf2mipmaps","_renderer","extensions","Object","create","handleContextLost","bind","handleContextRestored","isLost","gl","isContextLost","contextChange","init","options","defaultOptions","multiView","context","warn","canvas","DOMAdapter","get","createCanvas","width","height","view","initFromContext","alpha","background","premultipliedAlpha","antialias","backBuffer","useBackBuffer","createContext","preferWebGLVersion","stencil","preserveDrawingBuffer","powerPreference","ensureCanvasSize","targetCanvas","Math","max","webGLVersion","getWebGLRenderingContext","getExtensions","validateContext","runners","emit","element","addEventListener","getContext","Error","common","anisotropicFiltering","getExtension","floatTextureLinear","s3tc","s3tc_sRGB","etc","etc1","pvrtc","atc","astc","bptc","rgtc","loseContext","drawBuffers","depthTexture","uint32ElementIndex","floatTexture","textureHalfFloat","textureHalfFloatLinear","vertexAttribDivisorANGLE","srgb","colorBufferFloat","provokeExt","provokingVertexWEBGL","FIRST_VERTEX_CONVENTION_WEBGL","event","preventDefault","_contextLossForced","setTimeout","restoreContext","destroy","removeEventListener","useProgram","forceContextLoss","attributes","getContextAttributes","isWebGl2","extension","type","ExtensionType","WebGLSystem","name","GlContextSystem"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/rendering/renderers/gl/context/GlContextSystem.ts"],"sourcesContent":["import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { warn } from '../../../../utils/logging/warn';\nimport { type GpuPowerPreference } from '../../types';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { WebGLExtensions } from './WebGLExtensions';\n\n/**\n * Options for the context system.\n * @memberof rendering\n * @property {WebGL2RenderingContext | null} [context=null] - User-provided WebGL rendering context object.\n * @property {GpuPowerPreference} [powerPreference='default'] - An optional hint indicating what configuration\n * of GPU is suitable for the WebGL context, can be `'high-performance'` or `'low-power'`. Setting to `'high-performance'`\n * will prioritize rendering performance over power consumption, while setting to `'low-power'` will prioritize power saving\n * over rendering performance.\n * @property {boolean} [premultipliedAlpha=true] - Whether the compositor will assume the drawing buffer contains\n * colors with premultiplied alpha.\n * @property {boolean} [preserveDrawingBuffer=false] - Whether to enable drawing buffer preservation.\n * If enabled, the drawing buffer will preserve\n * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n * @property {boolean} [antialias] - Whether to enable antialiasing.\n * @property {1 | 2} [preferWebGLVersion=2] - The preferred WebGL version to use.\n */\nexport interface ContextSystemOptions\n{\n    /**\n     * User-provided WebGL rendering context object.\n     * @default null\n     * @memberof rendering.SharedRendererOptions\n     */\n    context: WebGL2RenderingContext | null;\n    /**\n     * An optional hint indicating what configuration of GPU is suitable for the WebGL context,\n     * can be `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @memberof rendering.SharedRendererOptions\n     * @default undefined\n     */\n    powerPreference?: GpuPowerPreference;\n\n    /**\n     * Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    premultipliedAlpha: boolean;\n    /**\n     * Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @default false\n     * @memberof rendering.SharedRendererOptions\n     */\n    preserveDrawingBuffer: boolean;\n\n    antialias?: boolean;\n\n    /**\n     * The preferred WebGL version to use.\n     * @default 2\n     * @memberof rendering.SharedRendererOptions\n     */\n    preferWebGLVersion?: 1 | 2;\n\n    /**\n     * Whether to enable multi-view rendering. Set to true when rendering to multiple\n     * canvases on the dom.\n     * @default false\n     * @memberof rendering.SharedRendererOptions\n     */\n    multiView: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context\n * @memberof rendering\n */\nexport class GlContextSystem implements System<ContextSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'context',\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: ContextSystemOptions = {\n        /**\n         * {@link WebGLOptions.context}\n         * @default null\n         */\n        context: null,\n        /**\n         * {@link WebGLOptions.premultipliedAlpha}\n         * @default true\n         */\n        premultipliedAlpha: true,\n        /**\n         * {@link WebGLOptions.preserveDrawingBuffer}\n         * @default false\n         */\n        preserveDrawingBuffer: false,\n        /**\n         * {@link WebGLOptions.powerPreference}\n         * @default default\n         */\n        powerPreference: undefined,\n        /**\n         * {@link WebGLOptions.webGLVersion}\n         * @default 2\n         */\n        preferWebGLVersion: 2,\n        /**\n         * {@link WebGLOptions.multiView}\n         * @default false\n         */\n        multiView: false\n    };\n\n    protected CONTEXT_UID: number;\n    protected gl: WebGL2RenderingContext;\n\n    /**\n     * Features supported by current renderer.\n     * @type {object}\n     * @readonly\n     */\n    public supports = {\n        /** Support for 32-bit indices buffer. */\n        uint32Indices: true,\n        /** Support for UniformBufferObjects */\n        uniformBufferObject: true,\n        /** Support for VertexArrayObjects */\n        vertexArrayObject: true,\n        /** Support for SRGB texture format */\n        srgbTextures: true,\n        /** Support for wrapping modes if a texture is non-power of two */\n        nonPowOf2wrapping: true,\n        /** Support for MSAA (antialiasing of dynamic textures) */\n        msaa: true,\n        /** Support for mipmaps if a texture is non-power of two */\n        nonPowOf2mipmaps: true,\n    };\n\n    /**\n     * Extensions available.\n     * @type {object}\n     * @readonly\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n     */\n    public extensions: WebGLExtensions;\n\n    public webGLVersion: 1 | 2;\n\n    /**\n     * Whether to enable multi-view rendering. Set to true when rendering to multiple\n     * canvases on the dom.\n     * @default false\n     */\n    public multiView: boolean;\n\n    /**\n     * The canvas that the WebGL Context is rendering to.\n     * This will be the view canvas. But if multiView is enabled, this canvas will not be attached to the DOM.\n     * It will be rendered to and then copied to the target canvas.\n     * @readonly\n     */\n    public canvas: ICanvas;\n\n    private _renderer: WebGLRenderer;\n    private _contextLossForced: boolean;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this.extensions = Object.create(null);\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @readonly\n     */\n    get isLost(): boolean\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handles the context change event.\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */\n    protected contextChange(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n        this._renderer.gl = gl;\n    }\n\n    public init(options: ContextSystemOptions): void\n    {\n        options = { ...GlContextSystem.defaultOptions, ...options };\n\n        // TODO add to options\n        let multiView = this.multiView = options.multiView;\n\n        if (options.context && multiView)\n        {\n            // eslint-disable-next-line max-len\n            warn('Renderer created with both a context and multiview enabled. Disabling multiView as both cannot work together.');\n\n            multiView = false;\n        }\n\n        if (multiView)\n        {\n            this.canvas = DOMAdapter.get()\n                .createCanvas(this._renderer.canvas.width, this._renderer.canvas.height);\n        }\n        else\n        {\n            this.canvas = this._renderer.view.canvas;\n        }\n        /*\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.initFromContext(options.context);\n        }\n        else\n        {\n            const alpha = this._renderer.background.alpha < 1;\n            const premultipliedAlpha = options.premultipliedAlpha ?? true;\n            const antialias = options.antialias && !this._renderer.backBuffer.useBackBuffer;\n\n            this.createContext(options.preferWebGLVersion, {\n                alpha,\n                premultipliedAlpha,\n                antialias,\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: options.powerPreference ?? 'default',\n            });\n        }\n    }\n\n    public ensureCanvasSize(targetCanvas: ICanvas): void\n    {\n        if (!this.multiView)\n        {\n            if (targetCanvas !== this.canvas)\n            {\n                warn('multiView is disabled, but targetCanvas is not the main canvas');\n            }\n\n            return;\n        }\n\n        const { canvas } = this;\n\n        if (canvas.width < targetCanvas.width || canvas.height < targetCanvas.height)\n        {\n            canvas.width = Math.max(targetCanvas.width, targetCanvas.width);\n            canvas.height = Math.max(targetCanvas.height, targetCanvas.height);\n        }\n    }\n\n    /**\n     * Initializes the context.\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    protected initFromContext(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n\n        this.webGLVersion = gl instanceof DOMAdapter.get().getWebGLRenderingContext() ? 1 : 2;\n\n        this.getExtensions();\n\n        this.validateContext(gl);\n\n        this._renderer.runners.contextChange.emit(gl);\n\n        const element = this._renderer.view.canvas;\n\n        (element as any).addEventListener('webglcontextlost', this.handleContextLost, false);\n        element.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    }\n\n    /**\n     * Initialize from context options\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param preferWebGLVersion\n     * @param {object} options - context attributes\n     */\n    protected createContext(preferWebGLVersion: 1 | 2, options: WebGLContextAttributes): void\n    {\n        let gl: WebGL2RenderingContext | WebGLRenderingContext;\n\n        const canvas = this.canvas;\n\n        if (preferWebGLVersion === 2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (!gl)\n        {\n            gl = canvas.getContext('webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl as WebGL2RenderingContext;\n\n        this.initFromContext(this.gl);\n    }\n\n    /** Auto-populate the {@link GlContextSystem.extensions extensions}. */\n    protected getExtensions(): void\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        const common = {\n            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), // eslint-disable-line camelcase\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc'),\n            bptc: gl.getExtension('EXT_texture_compression_bptc'),\n            rgtc: gl.getExtension('EXT_texture_compression_rgtc'),\n            loseContext: gl.getExtension('WEBGL_lose_context'),\n        };\n\n        if (this.webGLVersion === 1)\n        {\n            this.extensions = {\n                ...common,\n\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBGL_depth_texture'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n                vertexAttribDivisorANGLE: gl.getExtension('ANGLE_instanced_arrays'),\n                srgb: gl.getExtension('EXT_sRGB'),\n            };\n        }\n        else\n        {\n            this.extensions = {\n                ...common,\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float'),\n            };\n\n            const provokeExt = gl.getExtension('WEBGL_provoking_vertex');\n\n            if (provokeExt)\n            {\n                provokeExt.provokingVertexWEBGL(provokeExt.FIRST_VERTEX_CONVENTION_WEBGL);\n            }\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    protected handleContextLost(event: WebGLContextEvent): void\n    {\n        event.preventDefault();\n\n        // only restore if we purposefully nuked it\n        if (this._contextLossForced)\n        {\n            this._contextLossForced = false;\n            // Restore the context after this event has exited\n            setTimeout(() =>\n            {\n                if (this.gl.isContextLost())\n                {\n                    this.extensions.loseContext?.restoreContext();\n                }\n            }, 0);\n        }\n    }\n\n    /** Handles a restored webgl context. */\n    protected handleContextRestored(): void\n    {\n        this._renderer.runners.contextChange.emit(this.gl);\n    }\n\n    public destroy(): void\n    {\n        const element = this._renderer.view.canvas;\n\n        this._renderer = null;\n\n        // remove listeners\n        (element as any).removeEventListener('webglcontextlost', this.handleContextLost);\n        element.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n        this.gl.useProgram(null);\n\n        this.extensions.loseContext?.loseContext();\n    }\n\n    /**\n     * this function can be called to force a webGL context loss\n     * this will release all resources on the GPU.\n     * Useful if you need to put Pixi to sleep, and save some GPU memory\n     *\n     * As soon as render is called - all resources will be created again.\n     */\n    public forceContextLoss(): void\n    {\n        this.extensions.loseContext?.loseContext();\n        this._contextLossForced = true;\n    }\n    /**\n     * Validate context.\n     * @param {WebGLRenderingContext} gl - Render context.\n     */\n    protected validateContext(gl: WebGL2RenderingContext): void\n    {\n        const attributes = gl.getContextAttributes();\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (attributes && !attributes.stencil)\n        {\n            // #if _DEBUG\n            /* eslint-disable max-len, no-console */\n            warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable max-len, no-console */\n            // #endif\n        }\n\n        // support\n        const supports = this.supports;\n\n        const isWebGl2 = this.webGLVersion === 2;\n        const extensions = this.extensions;\n\n        supports.uint32Indices = isWebGl2 || !!extensions.uint32ElementIndex;\n        supports.uniformBufferObject = isWebGl2;\n        supports.vertexArrayObject = isWebGl2 || !!extensions.vertexArrayObject;\n        supports.srgbTextures = isWebGl2 || !!extensions.srgb;\n        supports.nonPowOf2wrapping = isWebGl2;\n        supports.nonPowOf2mipmaps = isWebGl2;\n        supports.msaa = isWebGl2;\n\n        if (!supports.uint32Indices)\n        {\n            // #if _DEBUG\n            /* eslint-disable max-len, no-console */\n            warn('Provided WebGL context does not support 32 index buffer, large scenes may not render correctly');\n            /* eslint-enable max-len, no-console */\n            // #endif\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}