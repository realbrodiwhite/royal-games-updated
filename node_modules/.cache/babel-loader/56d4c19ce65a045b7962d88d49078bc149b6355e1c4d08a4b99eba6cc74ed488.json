{"ast":null,"code":"import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite._batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableMesh = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableMesh.geometry);\n    BigPool.return(batchableMesh);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = BigPool.get(BatchableMesh);\n    batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    sprite._didSpriteUpdate = true;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [ExtensionType.WebGLPipes, ExtensionType.WebGPUPipes, ExtensionType.CanvasPipes],\n  name: \"nineSliceSprite\"\n};\nexport { NineSliceSpritePipe };","map":{"version":3,"names":["NineSliceSpritePipe","constructor","renderer","_gpuSpriteHash","Object","create","_destroyRenderableBound","destroyRenderable","bind","_renderer","addRenderable","sprite","instructionSet","gpuSprite","_getGpuSprite","_didSpriteUpdate","_updateBatchableSprite","renderPipes","batch","addToBatch","updateRenderable","uid","_batcher","updateElement","validateRenderable","texture","_texture","_source","checkAndUpdateTexture","batchableMesh","BigPool","return","geometry","off","batchableSprite","update","_initGPUSprite","get","BatchableMesh","NineSliceGeometry","renderable","transform","groupTransform","roundPixels","_roundPixels","on","destroy","i","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private readonly _gpuSpriteHash: Record<number, BatchableMesh> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(sprite: NineSliceSprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const texture = sprite._texture;\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (gpuSprite.texture._source !== texture._source)\n        {\n            return !gpuSprite._batcher.checkAndUpdateTexture(gpuSprite, texture);\n        }\n\n        return false;\n    }\n\n    public destroyRenderable(sprite: NineSliceSprite)\n    {\n        const batchableMesh = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableMesh.geometry as PoolItem);\n        BigPool.return(batchableMesh as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        sprite._didSpriteUpdate = false;\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        const batchableMesh = BigPool.get(BatchableMesh);\n\n        batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n        batchableMesh.renderable = sprite;\n        batchableMesh.transform = sprite.groupTransform;\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        sprite._didSpriteUpdate = true;\n\n        this._gpuSpriteHash[sprite.uid] = batchableMesh;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            const batchableMesh = this._gpuSpriteHash[i];\n\n            batchableMesh.geometry.destroy();\n        }\n\n        (this._gpuSpriteHash as null) = null;\n        (this._renderer as null) = null;\n    }\n}\n"],"mappings":";;;;;AAYO,MAAMA,mBACb;EAeIC,YAAYC,QACZ;IAJiB,KAAAC,cAAA,kBAAuDC,MAAA,CAAAC,MAAA,CAAO,IAAI;IACnF,KAAiBC,uBAA0B,QAAKC,iBAAkB,CAAAC,IAAA,CAAK,IAAI;IAIvE,KAAKC,SAAY,GAAAP,QAAA;EAAA;EAGdQ,cAAcC,MAAA,EAAyBC,cAC9C;IACU,MAAAC,SAAA,GAAY,IAAK,CAAAC,aAAA,CAAcH,MAAM;IAE3C,IAAIA,MAAO,CAAAI,gBAAA,EAAuB,KAAAC,sBAAA,CAAuBL,MAAA,EAAQE,SAAS;IAE1E,KAAKJ,SAAU,CAAAQ,WAAA,CAAYC,KAAM,CAAAC,UAAA,CAAWN,SAAA,EAAWD,cAAc;EAAA;EAGlEQ,iBAAiBT,MACxB;IACI,MAAME,SAAY,QAAKV,cAAe,CAAAQ,MAAA,CAAOU,GAAG;IAEhD,IAAIV,MAAO,CAAAI,gBAAA,EAAuB,KAAAC,sBAAA,CAAuBL,MAAA,EAAQE,SAAS;IAEhEA,SAAA,CAAAS,QAAA,CAASC,aAAA,CAAcV,SAAS;EAAA;EAGvCW,mBAAmBb,MAC1B;IACI,MAAMc,OAAA,GAAUd,MAAO,CAAAe,QAAA;IACjB,MAAAb,SAAA,GAAY,IAAK,CAAAC,aAAA,CAAcH,MAAM;IAE3C,IAAIE,SAAU,CAAAY,OAAA,CAAQE,OAAY,KAAAF,OAAA,CAAQE,OAC1C;MACI,OAAO,CAACd,SAAA,CAAUS,QAAS,CAAAM,qBAAA,CAAsBf,SAAA,EAAWY,OAAO;IAAA;IAGhE;EAAA;EAGJlB,kBAAkBI,MACzB;IACI,MAAMkB,aAAgB,QAAK1B,cAAe,CAAAQ,MAAA,CAAOU,GAAG;IAG5CS,OAAA,CAAAC,MAAA,CAAOF,aAAA,CAAcG,QAAoB;IACjDF,OAAA,CAAQC,MAAA,CAAOF,aAAyB;IAEnC,KAAA1B,cAAA,CAAeQ,MAAO,CAAAU,GAAG,CAAI;IAE3BV,MAAA,CAAAsB,GAAA,CAAI,WAAa,OAAK3B,uBAAuB;EAAA;EAGhDU,uBAAuBL,MAAA,EAAyBuB,eACxD;IACIvB,MAAA,CAAOI,gBAAmB;IACzBmB,eAAA,CAAgBF,QACZ,CAAAG,MAAA,CAAOxB,MAAM;IAGlBuB,eAAA,CAAgBT,OAAA,GAAUd,MAAO,CAAAe,QAAA;EAAA;EAG7BZ,cAAcH,MACtB;IACI,OAAO,KAAKR,cAAe,CAAAQ,MAAA,CAAOU,GAAG,CAAK,SAAKe,cAAA,CAAezB,MAAM;EAAA;EAGhEyB,eAAezB,MACvB;IACU,MAAAkB,aAAA,GAAgBC,OAAQ,CAAAO,GAAA,CAAIC,aAAa;IAEjCT,aAAA,CAAAG,QAAA,GAAWF,OAAQ,CAAAO,GAAA,CAAIE,iBAAiB;IACtDV,aAAA,CAAcW,UAAa,GAAA7B,MAAA;IAC3BkB,aAAA,CAAcY,SAAA,GAAY9B,MAAO,CAAA+B,cAAA;IACjCb,aAAA,CAAcJ,OAAA,GAAUd,MAAO,CAAAe,QAAA;IAC/BG,aAAA,CAAcc,WAAe,QAAKlC,SAAU,CAAAmC,YAAA,GAAejC,MAAO,CAAAiC,YAAA;IAElEjC,MAAA,CAAOI,gBAAmB;IAErB,KAAAZ,cAAA,CAAeQ,MAAO,CAAAU,GAAG,CAAI,GAAAQ,aAAA;IAG3BlB,MAAA,CAAAkC,EAAA,CAAG,WAAa,OAAKvC,uBAAuB;IAE5C,OAAAuB,aAAA;EAAA;EAGJiB,OACPA,CAAA;IACe,WAAAC,CAAA,IAAK,KAAK5C,cACrB;MACU,MAAA0B,aAAA,GAAgB,IAAK,CAAA1B,cAAA,CAAe4C,CAAC;MAE3ClB,aAAA,CAAcG,QAAA,CAASc,OAAQ;IAAA;IAGlC,KAAK3C,cAA0B;IAC/B,KAAKM,SAAqB;EAAA;AAEnC;AAAA;AAhHaT,mBAAA,CAGKgD,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,UAAA,EACdD,aAAc,CAAAE,WAAA,EACdF,aAAc,CAAAG,WAAA,CAClB;EACAC,IAAM;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}