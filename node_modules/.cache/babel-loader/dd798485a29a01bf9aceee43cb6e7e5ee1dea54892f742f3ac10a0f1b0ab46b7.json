{"ast":null,"code":"\"use strict\";\n\nfunction computeAdjugate(out, matrix) {\n  const a00 = matrix[0];\n  const a01 = matrix[1];\n  const a02 = matrix[2];\n  const a10 = matrix[3];\n  const a11 = matrix[4];\n  const a12 = matrix[5];\n  const a20 = matrix[6];\n  const a21 = matrix[7];\n  const a22 = matrix[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\nfunction multiplyMatrix3x3(out, a, b) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b10 = b[3];\n  const b11 = b[4];\n  const b12 = b[5];\n  const b20 = b[6];\n  const b21 = b[7];\n  const b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\nfunction multiplyMatrixAndVector(out, m, v) {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  out[0] = m[0] * x + m[1] * y + m[2] * z;\n  out[1] = m[3] * x + m[4] * y + m[5] * z;\n  out[2] = m[6] * x + m[7] * y + m[8] * z;\n  return out;\n}\nconst tempMatrix = [0, 0, 0, 0, 0, 0, 0, 0, 0];\nconst tempVec = [0, 0, 0];\nconst tempVec2 = [0, 0, 0];\nfunction generateBasisToPointsMatrix(out, x1, y1, x2, y2, x3, y3, x4, y4) {\n  const m = tempMatrix;\n  m[0] = x1;\n  m[1] = x2;\n  m[2] = x3;\n  m[3] = y1;\n  m[4] = y2;\n  m[5] = y3;\n  m[6] = 1;\n  m[7] = 1;\n  m[8] = 1;\n  const adjugateM = computeAdjugate(out,\n  // reusing out as adjugateM is only used once\n  m);\n  tempVec2[0] = x4;\n  tempVec2[1] = y4;\n  tempVec2[2] = 1;\n  const v = multiplyMatrixAndVector(tempVec, adjugateM, tempVec2);\n  const diagonalMatrix = out;\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = v[2];\n  return multiplyMatrix3x3(out, diagonalMatrix, m);\n}\nconst tempSourceMatrix = [0, 0, 0, 0, 0, 0, 0, 0, 0];\nconst tempDestinationMatrix = [0, 0, 0, 0, 0, 0, 0, 0, 0];\nfunction compute2DProjection(out, x1s, y1s, x1d, y1d, x2s, y2s, x2d, y2d, x3s, y3s, x3d, y3d, x4s, y4s, x4d, y4d) {\n  const sourceMatrix = generateBasisToPointsMatrix(tempSourceMatrix, x1s, y1s, x2s, y2s, x3s, y3s, x4s, y4s);\n  const destinationMatrix = generateBasisToPointsMatrix(tempDestinationMatrix, x1d, y1d, x2d, y2d, x3d, y3d, x4d, y4d);\n  return multiplyMatrix3x3(out, computeAdjugate(sourceMatrix, sourceMatrix), destinationMatrix);\n}\nexport { compute2DProjection };","map":{"version":3,"names":["computeAdjugate","out","matrix","a00","a01","a02","a10","a11","a12","a20","a21","a22","multiplyMatrix3x3","a","b","b00","b01","b02","b10","b11","b12","b20","b21","b22","multiplyMatrixAndVector","m","v","x","y","z","tempMatrix","tempVec","tempVec2","generateBasisToPointsMatrix","x1","y1","x2","y2","x3","y3","x4","y4","adjugateM","diagonalMatrix","tempSourceMatrix","tempDestinationMatrix","compute2DProjection","x1s","y1s","x1d","y1d","x2s","y2s","x2d","y2d","x3s","y3s","x3d","y3d","x4s","y4s","x4d","y4d","sourceMatrix","destinationMatrix"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/mesh-perspective/utils/compute2DProjections.ts"],"sourcesContent":["import type { ArrayFixed } from '../../../utils/types';\n\ntype Matrix3x3 = ArrayFixed<number, 9>;\ntype Vector3 = ArrayFixed<number, 3>;\n\nfunction computeAdjugate(out: Matrix3x3, matrix: Matrix3x3): Matrix3x3\n{\n    const a00 = matrix[0];\n    const a01 = matrix[1];\n    const a02 = matrix[2];\n    const a10 = matrix[3];\n    const a11 = matrix[4];\n    const a12 = matrix[5];\n    const a20 = matrix[6];\n    const a21 = matrix[7];\n    const a22 = matrix[8];\n\n    out[0] = (a11 * a22) - (a12 * a21);\n    out[1] = (a02 * a21) - (a01 * a22);\n    out[2] = (a01 * a12) - (a02 * a11);\n    out[3] = (a12 * a20) - (a10 * a22);\n    out[4] = (a00 * a22) - (a02 * a20);\n    out[5] = (a02 * a10) - (a00 * a12);\n    out[6] = (a10 * a21) - (a11 * a20);\n    out[7] = (a01 * a20) - (a00 * a21);\n    out[8] = (a00 * a11) - (a01 * a10);\n\n    return out;\n}\n\nfunction multiplyMatrix3x3(out: Matrix3x3, a: Matrix3x3, b: Matrix3x3)\n{\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n\n    const b00 = b[0];\n    const b01 = b[1];\n    const b02 = b[2];\n    const b10 = b[3];\n    const b11 = b[4];\n    const b12 = b[5];\n    const b20 = b[6];\n    const b21 = b[7];\n    const b22 = b[8];\n\n    out[0] = (b00 * a00) + (b01 * a10) + (b02 * a20);\n    out[1] = (b00 * a01) + (b01 * a11) + (b02 * a21);\n    out[2] = (b00 * a02) + (b01 * a12) + (b02 * a22);\n\n    out[3] = (b10 * a00) + (b11 * a10) + (b12 * a20);\n    out[4] = (b10 * a01) + (b11 * a11) + (b12 * a21);\n    out[5] = (b10 * a02) + (b11 * a12) + (b12 * a22);\n\n    out[6] = (b20 * a00) + (b21 * a10) + (b22 * a20);\n    out[7] = (b20 * a01) + (b21 * a11) + (b22 * a21);\n    out[8] = (b20 * a02) + (b21 * a12) + (b22 * a22);\n\n    return out;\n}\n\nfunction multiplyMatrixAndVector(out: Vector3, m: Matrix3x3, v: Vector3): Vector3\n{\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n\n    out[0] = (m[0] * x) + (m[1] * y) + (m[2] * z);\n    out[1] = (m[3] * x) + (m[4] * y) + (m[5] * z);\n    out[2] = (m[6] * x) + (m[7] * y) + (m[8] * z);\n\n    return out;\n}\n\n//\nconst tempMatrix: Matrix3x3 = [0, 0, 0, 0, 0, 0, 0, 0, 0];\nconst tempVec: Vector3 = [0, 0, 0];\nconst tempVec2: Vector3 = [0, 0, 0];\n\nfunction generateBasisToPointsMatrix(\n    out: Matrix3x3,\n    x1: number, y1: number,\n    x2: number, y2: number,\n    x3: number, y3: number,\n    x4: number, y4: number\n): Matrix3x3\n{\n    const m: Matrix3x3 = tempMatrix;\n\n    m[0] = x1;\n    m[1] = x2;\n    m[2] = x3;\n    m[3] = y1;\n    m[4] = y2;\n    m[5] = y3;\n    m[6] = 1;\n    m[7] = 1;\n    m[8] = 1;\n\n    const adjugateM: Matrix3x3 = computeAdjugate(\n        out, // reusing out as adjugateM is only used once\n        m\n    );\n\n    tempVec2[0] = x4;\n    tempVec2[1] = y4;\n    tempVec2[2] = 1;\n\n    const v: Vector3 = multiplyMatrixAndVector(\n        tempVec,\n        adjugateM,\n        tempVec2,\n    );\n\n    const diagonalMatrix = out; // we can reuse the out matrix as the diagonal matrix is only used once\n\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = v[2];\n\n    return multiplyMatrix3x3(out, diagonalMatrix, m);\n}\n\nconst tempSourceMatrix: Matrix3x3 = [0, 0, 0, 0, 0, 0, 0, 0, 0];\nconst tempDestinationMatrix: Matrix3x3 = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n/**\n * Compute a 2D projection matrix\n * @param out - The matrix to store the result in\n * @param x1s - The x coordinate of the first source point\n * @param y1s - The y coordinate of the first source point\n * @param x1d - The x coordinate of the first destination point\n * @param y1d - The y coordinate of the first destination point\n * @param x2s - The x coordinate of the second source point\n * @param y2s - The y coordinate of the second source point\n * @param x2d - The x coordinate of the second destination point\n * @param y2d - The y coordinate of the second destination point\n * @param x3s - The x coordinate of the third source point\n * @param y3s - The y coordinate of the third source point\n * @param x3d - The x coordinate of the third destination point\n * @param y3d - The y coordinate of the third destination point\n * @param x4s - The x coordinate of the fourth source point\n * @param y4s - The y coordinate of the fourth source point\n * @param x4d - The x coordinate of the fourth destination point\n * @param y4d - The y coordinate of the fourth destination point\n * @returns - The computed 2D projection matrix\n * @private\n */\n// eslint-disable-next-line max-params\nexport function compute2DProjection(\n    out: Matrix3x3,\n    x1s: number, y1s: number, x1d: number, y1d: number,\n    x2s: number, y2s: number, x2d: number, y2d: number,\n    x3s: number, y3s: number, x3d: number, y3d: number,\n    x4s: number, y4s: number, x4d: number, y4d: number\n): Matrix3x3\n{\n    const sourceMatrix = generateBasisToPointsMatrix(\n        tempSourceMatrix,\n        x1s, y1s, x2s, y2s, x3s, y3s, x4s, y4s\n    );\n\n    const destinationMatrix = generateBasisToPointsMatrix(\n        tempDestinationMatrix,\n        x1d, y1d, x2d, y2d, x3d, y3d, x4d, y4d\n    );\n\n    return multiplyMatrix3x3(\n        out,\n        computeAdjugate(sourceMatrix, sourceMatrix),\n        destinationMatrix\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}