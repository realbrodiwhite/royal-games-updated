{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { getTextureBatchBindGroup } from './getTextureBatchBindGroup.mjs';\n\"use strict\";\nconst tempState = State.for2d();\nclass GpuBatchAdaptor {\n  start(batchPipe, geometry, shader) {\n    const renderer = batchPipe.renderer;\n    const encoder = renderer.encoder;\n    const program = shader.gpuProgram;\n    this._shader = shader;\n    this._geometry = geometry;\n    encoder.setGeometry(geometry, program);\n    tempState.blendMode = \"normal\";\n    renderer.pipeline.getPipeline(geometry, program, tempState);\n    const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n    encoder.resetBindGroup(1);\n    encoder.setBindGroup(0, globalUniformsBindGroup, program);\n  }\n  execute(batchPipe, batch) {\n    const program = this._shader.gpuProgram;\n    const renderer = batchPipe.renderer;\n    const encoder = renderer.encoder;\n    if (!batch.bindGroup) {\n      const textureBatch = batch.textures;\n      batch.bindGroup = getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n    }\n    tempState.blendMode = batch.blendMode;\n    const gpuBindGroup = renderer.bindGroup.getBindGroup(batch.bindGroup, program, 1);\n    const pipeline = renderer.pipeline.getPipeline(this._geometry, program, tempState);\n    batch.bindGroup._touch(renderer.textureGC.count);\n    encoder.setPipeline(pipeline);\n    encoder.renderPassEncoder.setBindGroup(1, gpuBindGroup);\n    encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n  }\n}\n/** @ignore */\nGpuBatchAdaptor.extension = {\n  type: [ExtensionType.WebGPUPipesAdaptor],\n  name: \"batch\"\n};\nexport { GpuBatchAdaptor };","map":{"version":3,"names":["tempState","State","for2d","GpuBatchAdaptor","start","batchPipe","geometry","shader","renderer","encoder","program","gpuProgram","_shader","_geometry","setGeometry","blendMode","pipeline","getPipeline","globalUniformsBindGroup","globalUniforms","bindGroup","resetBindGroup","setBindGroup","execute","batch","textureBatch","textures","getTextureBatchBindGroup","count","gpuBindGroup","getBindGroup","_touch","textureGC","setPipeline","renderPassEncoder","drawIndexed","size","extension","type","ExtensionType","WebGPUPipesAdaptor","name"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/rendering/batcher/gpu/GpuBatchAdaptor.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { getTextureBatchBindGroup } from './getTextureBatchBindGroup';\n\nimport type { GpuEncoderSystem } from '../../renderers/gpu/GpuEncoderSystem';\nimport type { WebGPURenderer } from '../../renderers/gpu/WebGPURenderer';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\nconst tempState = State.for2d();\n\n/**\n * A BatcherAdaptor that uses the GPU to render batches.\n * @memberof rendering\n * @ignore\n */\nexport class GpuBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    private _shader: Shader;\n    private _geometry: Geometry;\n\n    public start(batchPipe: BatcherPipe, geometry: Geometry, shader: Shader): void\n    {\n        const renderer = batchPipe.renderer as WebGPURenderer;\n        const encoder = renderer.encoder as GpuEncoderSystem;\n        const program = shader.gpuProgram;\n\n        this._shader = shader;\n        this._geometry = geometry;\n\n        encoder.setGeometry(geometry, program);\n\n        tempState.blendMode = 'normal';\n\n        // this just initiates the pipeline, so we can then set bind groups on it\n        renderer.pipeline.getPipeline(\n            geometry,\n            program,\n            tempState\n        );\n\n        const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n\n        // low level - we need to reset the bind group at location 1 to null\n        // this is because we directly manipulate the bound buffer in the execute function for\n        // performance reasons.\n        // setting it to null ensures that the next bind group we set at location 1 will\n        // be the one we want.\n        encoder.resetBindGroup(1);\n\n        encoder.setBindGroup(0, globalUniformsBindGroup, program);\n    }\n\n    public execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const program = this._shader.gpuProgram;\n        const renderer = batchPipe.renderer as WebGPURenderer;\n        const encoder = renderer.encoder as GpuEncoderSystem;\n\n        if (!batch.bindGroup)\n        {\n            const textureBatch = batch.textures;\n\n            batch.bindGroup = getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n        }\n\n        tempState.blendMode = batch.blendMode;\n\n        const gpuBindGroup = renderer.bindGroup.getBindGroup(\n            batch.bindGroup, program, 1\n        );\n\n        const pipeline = renderer.pipeline.getPipeline(\n            this._geometry,\n            program,\n            tempState\n        );\n\n        batch.bindGroup._touch(renderer.textureGC.count);\n\n        encoder.setPipeline(pipeline);\n\n        encoder.renderPassEncoder.setBindGroup(1, gpuBindGroup);\n        encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n    }\n}\n"],"mappings":";;;;AAWA,MAAMA,SAAA,GAAYC,KAAA,CAAMC,KAAM;AAOvB,MAAMC,eACb;EAYWC,MAAMC,SAAwB,EAAAC,QAAA,EAAoBC,MACzD;IACI,MAAMC,QAAA,GAAWH,SAAU,CAAAG,QAAA;IAC3B,MAAMC,OAAA,GAAUD,QAAS,CAAAC,OAAA;IACzB,MAAMC,OAAA,GAAUH,MAAO,CAAAI,UAAA;IAEvB,KAAKC,OAAU,GAAAL,MAAA;IACf,KAAKM,SAAY,GAAAP,QAAA;IAETG,OAAA,CAAAK,WAAA,CAAYR,QAAA,EAAUI,OAAO;IAErCV,SAAA,CAAUe,SAAY;IAGtBP,QAAA,CAASQ,QAAS,CAAAC,WAAA,CACdX,QAAA,EACAI,OAAA,EACAV,SAAA,CACJ;IAEM,MAAAkB,uBAAA,GAA0BV,QAAA,CAASW,cAAe,CAAAC,SAAA;IAOxDX,OAAA,CAAQY,cAAA,CAAe,CAAC;IAEhBZ,OAAA,CAAAa,YAAA,CAAa,CAAG,EAAAJ,uBAAA,EAAyBR,OAAO;EAAA;EAGrDa,QAAQlB,SAAA,EAAwBmB,KACvC;IACU,MAAAd,OAAA,GAAU,KAAKE,OAAQ,CAAAD,UAAA;IAC7B,MAAMH,QAAA,GAAWH,SAAU,CAAAG,QAAA;IAC3B,MAAMC,OAAA,GAAUD,QAAS,CAAAC,OAAA;IAErB,KAACe,KAAA,CAAMJ,SACX;MACI,MAAMK,YAAA,GAAeD,KAAM,CAAAE,QAAA;MAE3BF,KAAA,CAAMJ,SAAY,GAAAO,wBAAA,CAAyBF,YAAa,CAAAC,QAAA,EAAUD,YAAA,CAAaG,KAAK;IAAA;IAGxF5B,SAAA,CAAUe,SAAA,GAAYS,KAAM,CAAAT,SAAA;IAEtB,MAAAc,YAAA,GAAerB,QAAA,CAASY,SAAU,CAAAU,YAAA,CACpCN,KAAM,CAAAJ,SAAA,EAAWV,OAAA,EAAS,EAC9B;IAEM,MAAAM,QAAA,GAAWR,QAAA,CAASQ,QAAS,CAAAC,WAAA,CAC/B,IAAK,CAAAJ,SAAA,EACLH,OAAA,EACAV,SAAA,CACJ;IAEAwB,KAAA,CAAMJ,SAAU,CAAAW,MAAA,CAAOvB,QAAS,CAAAwB,SAAA,CAAUJ,KAAK;IAE/CnB,OAAA,CAAQwB,WAAA,CAAYjB,QAAQ;IAEpBP,OAAA,CAAAyB,iBAAA,CAAkBZ,YAAa,IAAGO,YAAY;IACtDpB,OAAA,CAAQyB,iBAAA,CAAkBC,WAAY,CAAAX,KAAA,CAAMY,IAAM,KAAGZ,KAAA,CAAMpB,KAAK;EAAA;AAExE;AAAA;AA7EaD,eAAA,CAGKkC,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,kBAAA,CAClB;EACAC,IAAM;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}