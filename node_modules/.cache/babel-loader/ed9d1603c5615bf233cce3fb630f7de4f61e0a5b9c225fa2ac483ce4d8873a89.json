{"ast":null,"code":"import { Color } from '../../../../color/Color.mjs';\nimport { loadEnvironmentExtensions } from '../../../../environment/autoDetectEnvironment.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport '../../../../utils/utils.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { SystemRunner } from './SystemRunner.mjs';\nimport EventEmitter from 'eventemitter3';\n\"use strict\";\nconst defaultRunners = [\"init\", \"destroy\", \"contextChange\", \"resolutionChange\", \"reset\", \"renderEnd\", \"renderStart\", \"render\", \"update\", \"postrender\", \"prerender\"];\nconst _AbstractRenderer = class _AbstractRenderer extends EventEmitter {\n  /**\n   * Set up a system with a collection of SystemClasses and runners.\n   * Systems are attached dynamically to this class when added.\n   * @param config - the config for the system manager\n   */\n  constructor(config) {\n    super();\n    this.runners = /* @__PURE__ */Object.create(null);\n    this.renderPipes = /* @__PURE__ */Object.create(null);\n    this._initOptions = {};\n    this._systemsHash = /* @__PURE__ */Object.create(null);\n    this.type = config.type;\n    this.name = config.name;\n    this.config = config;\n    const combinedRunners = [...defaultRunners, ...(this.config.runners ?? [])];\n    this._addRunners(...combinedRunners);\n    this._unsafeEvalCheck();\n  }\n  /**\n   * Initialize the renderer.\n   * @param options - The options to use to create the renderer.\n   */\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const skip = options.skipExtensionImports === true ? true : options.manageImports === false;\n    await loadEnvironmentExtensions(skip);\n    this._addSystems(this.config.systems);\n    this._addPipes(this.config.renderPipes, this.config.renderPipeAdaptors);\n    for (const systemName in this._systemsHash) {\n      const system = this._systemsHash[systemName];\n      const defaultSystemOptions = system.constructor.defaultOptions;\n      options = {\n        ...defaultSystemOptions,\n        ...options\n      };\n    }\n    options = {\n      ..._AbstractRenderer.defaultOptions,\n      ...options\n    };\n    this._roundPixels = options.roundPixels ? 1 : 0;\n    for (let i = 0; i < this.runners.init.items.length; i++) {\n      await this.runners.init.items[i].init(options);\n    }\n    this._initOptions = options;\n  }\n  render(args, deprecated) {\n    let options = args;\n    if (options instanceof Container) {\n      options = {\n        container: options\n      };\n      if (deprecated) {\n        deprecation(v8_0_0, \"passing a second argument is deprecated, please use render options instead\");\n        options.target = deprecated.renderTexture;\n      }\n    }\n    options.target || (options.target = this.view.renderTarget);\n    if (options.target === this.view.renderTarget) {\n      this._lastObjectRendered = options.container;\n      options.clearColor = this.background.colorRgba;\n    }\n    if (options.clearColor) {\n      const isRGBAArray = Array.isArray(options.clearColor) && options.clearColor.length === 4;\n      options.clearColor = isRGBAArray ? options.clearColor : Color.shared.setValue(options.clearColor).toArray();\n    }\n    if (!options.transform) {\n      options.container.updateLocalTransform();\n      options.transform = options.container.localTransform;\n    }\n    this.runners.prerender.emit(options);\n    this.runners.renderStart.emit(options);\n    this.runners.render.emit(options);\n    this.runners.renderEnd.emit(options);\n    this.runners.postrender.emit(options);\n  }\n  /**\n   * Resizes the WebGL view to the specified width and height.\n   * @param desiredScreenWidth - The desired width of the screen.\n   * @param desiredScreenHeight - The desired height of the screen.\n   * @param resolution - The resolution / device pixel ratio of the renderer.\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    const previousResolution = this.view.resolution;\n    this.view.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.emit(\"resize\", this.view.screen.width, this.view.screen.height, this.view.resolution);\n    if (resolution !== void 0 && resolution !== previousResolution) {\n      this.runners.resolutionChange.emit(resolution);\n    }\n  }\n  clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const renderer = this;\n    options.target || (options.target = renderer.renderTarget.renderTarget);\n    options.clearColor || (options.clearColor = this.background.colorRgba);\n    options.clear ?? (options.clear = CLEAR.ALL);\n    const {\n      clear,\n      clearColor,\n      target\n    } = options;\n    Color.shared.setValue(clearColor ?? this.background.colorRgba);\n    renderer.renderTarget.clear(target, clear, Color.shared.toArray());\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.view.resolution;\n  }\n  set resolution(value) {\n    this.view.resolution = value;\n    this.runners.resolutionChange.emit(value);\n  }\n  /**\n   * Same as view.width, actual number of pixels in the canvas by horizontal.\n   * @member {number}\n   * @readonly\n   * @default 800\n   */\n  get width() {\n    return this.view.texture.frame.width;\n  }\n  /**\n   * Same as view.height, actual number of pixels in the canvas by vertical.\n   * @default 600\n   */\n  get height() {\n    return this.view.texture.frame.height;\n  }\n  // NOTE: this was `view` in v7\n  /**\n   * The canvas element that everything is drawn to.\n   * @type {environment.ICanvas}\n   */\n  get canvas() {\n    return this.view.canvas;\n  }\n  /**\n   * the last object rendered by the renderer. Useful for other plugins like interaction managers\n   * @readonly\n   */\n  get lastObjectRendered() {\n    return this._lastObjectRendered;\n  }\n  /**\n   * Flag if we are rendering to the screen vs renderTexture\n   * @readonly\n   * @default true\n   */\n  get renderingToScreen() {\n    const renderer = this;\n    return renderer.renderTarget.renderingToScreen;\n  }\n  /**\n   * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n   *\n   * Its safe to use as filterArea or hitArea for the whole stage.\n   */\n  get screen() {\n    return this.view.screen;\n  }\n  /**\n   * Create a bunch of runners based of a collection of ids\n   * @param runnerIds - the runner ids to add\n   */\n  _addRunners() {\n    for (var _len = arguments.length, runnerIds = new Array(_len), _key = 0; _key < _len; _key++) {\n      runnerIds[_key] = arguments[_key];\n    }\n    runnerIds.forEach(runnerId => {\n      this.runners[runnerId] = new SystemRunner(runnerId);\n    });\n  }\n  _addSystems(systems) {\n    let i;\n    for (i in systems) {\n      const val = systems[i];\n      this._addSystem(val.value, val.name);\n    }\n  }\n  /**\n   * Add a new system to the renderer.\n   * @param ClassRef - Class reference\n   * @param name - Property name for system, if not specified\n   *        will use a static `name` property on the class itself. This\n   *        name will be assigned as s property on the Renderer so make\n   *        sure it doesn't collide with properties on Renderer.\n   * @returns Return instance of renderer\n   */\n  _addSystem(ClassRef, name) {\n    const system = new ClassRef(this);\n    if (this[name]) {\n      throw new Error(`Whoops! The name \"${name}\" is already in use`);\n    }\n    this[name] = system;\n    this._systemsHash[name] = system;\n    for (const i in this.runners) {\n      this.runners[i].add(system);\n    }\n    return this;\n  }\n  _addPipes(pipes, pipeAdaptors) {\n    const adaptors = pipeAdaptors.reduce((acc, adaptor) => {\n      acc[adaptor.name] = adaptor.value;\n      return acc;\n    }, {});\n    pipes.forEach(pipe => {\n      const PipeClass = pipe.value;\n      const name = pipe.name;\n      const Adaptor = adaptors[name];\n      this.renderPipes[name] = new PipeClass(this, Adaptor ? new Adaptor() : null);\n    });\n  }\n  destroy() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.runners.destroy.items.reverse();\n    this.runners.destroy.emit(options);\n    Object.values(this.runners).forEach(runner => {\n      runner.destroy();\n    });\n    this._systemsHash = null;\n    this.renderPipes = null;\n  }\n  /**\n   * Generate a texture from a container.\n   * @param options - options or container target to use when generating the texture\n   * @returns a texture\n   */\n  generateTexture(options) {\n    return this.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Whether the renderer will round coordinates to whole pixels when rendering.\n   * Can be overridden on a per scene item basis.\n   */\n  get roundPixels() {\n    return !!this._roundPixels;\n  }\n  /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   * @ignore\n   */\n  _unsafeEvalCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n};\n/** The default options for the renderer. */\n_AbstractRenderer.defaultOptions = {\n  /**\n   * Default resolution / device pixel ratio of the renderer.\n   * @default 1\n   */\n  resolution: 1,\n  /**\n   * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported`\n   * function. If set to true, a WebGL renderer can fail to be created if the browser thinks there could be\n   * performance issues when using WebGL.\n   *\n   * In PixiJS v6 this has changed from true to false by default, to allow WebGL to work in as many\n   * scenarios as possible. However, some users may have a poor experience, for example, if a user has a gpu or\n   * driver version blacklisted by the\n   * browser.\n   *\n   * If your application requires high performance rendering, you may wish to set this to false.\n   * We recommend one of two options if you decide to set this flag to false:\n   *\n   * 1: Use the Canvas renderer as a fallback in case high performance WebGL is\n   *    not supported.\n   *\n   * 2: Call `isWebGLSupported` (which if found in the utils package) in your code before attempting to create a\n   *    PixiJS renderer, and show an error message to the user if the function returns false, explaining that their\n   *    device & browser combination does not support high performance WebGL.\n   *    This is a much better strategy than trying to create a PixiJS renderer and finding it then fails.\n   * @default false\n   */\n  failIfMajorPerformanceCaveat: false,\n  /**\n   * Should round pixels be forced when rendering?\n   * @default false\n   */\n  roundPixels: false\n};\nlet AbstractRenderer = _AbstractRenderer;\nexport { AbstractRenderer };","map":{"version":3,"names":["defaultRunners","_AbstractRenderer","EventEmitter","constructor","config","runners","Object","create","renderPipes","_initOptions","_systemsHash","type","name","combinedRunners","_addRunners","_unsafeEvalCheck","init","options","arguments","length","undefined","skip","skipExtensionImports","manageImports","loadEnvironmentExtensions","_addSystems","systems","_addPipes","renderPipeAdaptors","systemName","system","defaultSystemOptions","defaultOptions","_roundPixels","roundPixels","i","items","render","args","deprecated","Container","container","deprecation","v8_0_0","target","renderTexture","view","renderTarget","_lastObjectRendered","clearColor","background","colorRgba","isRGBAArray","Array","isArray","Color","shared","setValue","toArray","transform","updateLocalTransform","localTransform","prerender","emit","renderStart","renderEnd","postrender","resize","desiredScreenWidth","desiredScreenHeight","resolution","previousResolution","screen","width","height","resolutionChange","clear","renderer","CLEAR","ALL","value","texture","frame","canvas","lastObjectRendered","renderingToScreen","_len","runnerIds","_key","forEach","runnerId","SystemRunner","val","_addSystem","ClassRef","Error","add","pipes","pipeAdaptors","adaptors","reduce","acc","adaptor","pipe","PipeClass","Adaptor","destroy","reverse","values","runner","generateTexture","textureGenerator","unsafeEvalSupported","failIfMajorPerformanceCaveat","AbstractRenderer"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/rendering/renderers/shared/system/AbstractRenderer.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { loadEnvironmentExtensions } from '../../../../environment/autoDetectEnvironment';\nimport { Container } from '../../../../scene/container/Container';\nimport { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation';\nimport { EventEmitter } from '../../../../utils/utils';\nimport { CLEAR } from '../../gl/const';\nimport { SystemRunner } from './SystemRunner';\n\nimport type { ColorSource, RgbaArray } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { Matrix } from '../../../../maths/matrix/Matrix';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { TypeOrBool } from '../../../../scene/container/destroyTypes';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { Renderer } from '../../types';\nimport type { BackgroundSystem } from '../background/BackgroundSystem';\nimport type { GenerateTextureOptions, GenerateTextureSystem } from '../extract/GenerateTextureSystem';\nimport type { PipeConstructor } from '../instructions/RenderPipe';\nimport type { RenderSurface } from '../renderTarget/RenderTargetSystem';\nimport type { Texture } from '../texture/Texture';\nimport type { ViewSystem, ViewSystemDestroyOptions } from '../view/ViewSystem';\nimport type { SharedRendererOptions } from './SharedSystems';\nimport type { System, SystemConstructor } from './System';\n\nexport interface RendererConfig\n{\n    type: number;\n    name: string;\n    runners?: string[];\n    systems: {name: string, value: SystemConstructor}[];\n    renderPipes: {name: string, value: PipeConstructor}[];\n    renderPipeAdaptors: {name: string, value: any}[];\n}\n\n/**\n * The options for rendering a view.\n * @memberof rendering\n */\nexport interface RenderOptions extends ClearOptions\n{\n    /** The container to render. */\n    container: Container;\n    /** the transform to apply to the container. */\n    transform?: Matrix;\n}\n\n/**\n * The options for clearing the render target.\n * @memberof rendering\n */\nexport interface ClearOptions\n{\n    /**\n     * The render target to render. if this target is a canvas and  you are using the WebGL renderer,\n     * please ensure you have set `multiView` to `true` on renderer.\n     */\n    target?: RenderSurface;\n    /** The color to clear with. */\n    clearColor?: ColorSource;\n    /** The clear mode to use. */\n    clear?: CLEAR_OR_BOOL\n}\n\nexport type RendererDestroyOptions = TypeOrBool<ViewSystemDestroyOptions>;\n\nconst defaultRunners = [\n    'init',\n    'destroy',\n    'contextChange',\n    'resolutionChange',\n    'reset',\n    'renderEnd',\n    'renderStart',\n    'render',\n    'update',\n    'postrender',\n    'prerender'\n] as const;\n\ntype DefaultRunners = typeof defaultRunners[number];\ntype Runners = {[key in DefaultRunners]: SystemRunner} & {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    [K: ({} & string) | ({} & symbol)]: SystemRunner;\n};\n\n/* eslint-disable max-len */\n/**\n * The base class for a PixiJS Renderer. It contains the shared logic for all renderers.\n *\n * You should not use this class directly, but instead use {@linkrendering.WebGLRenderer}\n * or {@link rendering.WebGPURenderer}.\n * Alternatively, you can also use {@link rendering.autoDetectRenderer} if you want us to\n * determine the best renderer for you.\n *\n * The renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a renderer:\n *\n *\n * | Generic Systems                      | Systems that manage functionality that all renderer types share               |\n * | ------------------------------------ | ----------------------------------------------------------------------------- |\n * | {@link rendering.ViewSystem}              | This manages the main view of the renderer usually a Canvas              |\n * | {@link rendering.BackgroundSystem}        | This manages the main views background color and alpha                   |\n * | {@link events.EventSystem}           | This manages UI events.                                                       |\n * | {@link accessibility.AccessibilitySystem} | This manages accessibility features. Requires `import 'pixi.js/accessibility'`|\n *\n * | Core Systems                   | Provide an optimised, easy to use API to work with WebGL/WebGPU               |\n * | ------------------------------------ | ----------------------------------------------------------------------------- |\n * | {@link rendering.RenderGroupSystem} | This manages the what what we are rendering to (eg - canvas or texture)   |\n * | {@link rendering.GlobalUniformSystem} | This manages shaders, programs that run on the GPU to calculate 'em pixels.   |\n * | {@link rendering.TextureGCSystem}     | This will automatically remove textures from the GPU if they are not used.    |\n *\n * | PixiJS High-Level Systems            | Set of specific systems designed to work with PixiJS objects                  |\n * | ------------------------------------ | ----------------------------------------------------------------------------- |\n * | {@link rendering.HelloSystem}               | Says hello, buy printing out the pixi version into the console log (along with the renderer type)       |\n * | {@link rendering.GenerateTextureSystem} | This adds the ability to generate textures from any Container       |\n * | {@link rendering.FilterSystem}          | This manages the filtering pipeline for post-processing effects.             |\n * | {@link rendering.PrepareSystem}               | This manages uploading assets to the GPU. Requires `import 'pixi.js/prepare'`|\n * | {@link rendering.ExtractSystem}               | This extracts image data from display objects.                               |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @abstract\n * @memberof rendering\n * @property {rendering.HelloSystem} hello - HelloSystem instance.\n * @property {rendering.RenderGroupSystem} renderGroup - RenderGroupSystem instance.\n * @property {rendering.TextureGCSystem} textureGC - TextureGCSystem instance.\n * @property {rendering.FilterSystem} filter - FilterSystem instance.\n * @property {rendering.GlobalUniformSystem} globalUniforms - GlobalUniformSystem instance.\n * @property {rendering.TextureSystem} texture - TextureSystem instance.\n * @property {rendering.EventSystem} events - EventSystem instance.\n * @property {rendering.ExtractSystem} extract - ExtractSystem instance. Requires `import 'pixi.js/extract'`.\n * @property {rendering.PrepareSystem} prepare - PrepareSystem instance. Requires `import 'pixi.js/prepare'`.\n * @property {rendering.AccessibilitySystem} accessibility - AccessibilitySystem instance. Requires `import 'pixi.js/accessibility'`.\n */\n/* eslint-enable max-len */\nexport class AbstractRenderer<\n    PIPES, OPTIONS extends SharedRendererOptions, CANVAS extends ICanvas = HTMLCanvasElement\n> extends EventEmitter<{resize: [screenWidth: number, screenHeight: number, resolution: number]}>\n{\n    /** The default options for the renderer. */\n    public static defaultOptions = {\n        /**\n         * Default resolution / device pixel ratio of the renderer.\n         * @default 1\n         */\n        resolution: 1,\n        /**\n         * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported`\n         * function. If set to true, a WebGL renderer can fail to be created if the browser thinks there could be\n         * performance issues when using WebGL.\n         *\n         * In PixiJS v6 this has changed from true to false by default, to allow WebGL to work in as many\n         * scenarios as possible. However, some users may have a poor experience, for example, if a user has a gpu or\n         * driver version blacklisted by the\n         * browser.\n         *\n         * If your application requires high performance rendering, you may wish to set this to false.\n         * We recommend one of two options if you decide to set this flag to false:\n         *\n         * 1: Use the Canvas renderer as a fallback in case high performance WebGL is\n         *    not supported.\n         *\n         * 2: Call `isWebGLSupported` (which if found in the utils package) in your code before attempting to create a\n         *    PixiJS renderer, and show an error message to the user if the function returns false, explaining that their\n         *    device & browser combination does not support high performance WebGL.\n         *    This is a much better strategy than trying to create a PixiJS renderer and finding it then fails.\n         * @default false\n         */\n        failIfMajorPerformanceCaveat: false,\n        /**\n         * Should round pixels be forced when rendering?\n         * @default false\n         */\n        roundPixels: false\n    };\n\n    public readonly type: number;\n    /** The name of the renderer. */\n    public readonly name: string;\n\n    public _roundPixels: 0 | 1;\n\n    public readonly runners: Runners = Object.create(null) as Runners;\n    public readonly renderPipes = Object.create(null) as PIPES;\n    /** The view system manages the main canvas that is attached to the DOM */\n    public view!: ViewSystem;\n    /** The background system manages the background color and alpha of the main view. */\n    public background: BackgroundSystem;\n    /** System that manages the generation of textures from the renderer */\n    public textureGenerator: GenerateTextureSystem;\n\n    protected _initOptions: OPTIONS = {} as OPTIONS;\n    protected config: RendererConfig;\n\n    private _systemsHash: Record<string, System> = Object.create(null);\n    private _lastObjectRendered: Container;\n\n    /**\n     * Set up a system with a collection of SystemClasses and runners.\n     * Systems are attached dynamically to this class when added.\n     * @param config - the config for the system manager\n     */\n    constructor(config: RendererConfig)\n    {\n        super();\n        this.type = config.type;\n        this.name = config.name;\n        this.config = config;\n\n        const combinedRunners = [...defaultRunners, ...(this.config.runners ?? [])];\n\n        this._addRunners(...combinedRunners);\n        // Validation check that this environment support `new Function`\n        this._unsafeEvalCheck();\n    }\n\n    /**\n     * Initialize the renderer.\n     * @param options - The options to use to create the renderer.\n     */\n    public async init(options: Partial<OPTIONS> = {})\n    {\n        const skip = options.skipExtensionImports === true ? true : options.manageImports === false;\n\n        await loadEnvironmentExtensions(skip);\n\n        this._addSystems(this.config.systems);\n        this._addPipes(this.config.renderPipes, this.config.renderPipeAdaptors);\n\n        // loop through all systems...\n        for (const systemName in this._systemsHash)\n        {\n            const system = this._systemsHash[systemName];\n\n            const defaultSystemOptions = (system.constructor as any).defaultOptions;\n\n            options = { ...defaultSystemOptions, ...options };\n        }\n\n        options = { ...AbstractRenderer.defaultOptions, ...options };\n        this._roundPixels = options.roundPixels ? 1 : 0;\n\n        // await emits..\n        for (let i = 0; i < this.runners.init.items.length; i++)\n        {\n            await this.runners.init.items[i].init(options);\n        }\n\n        // store options\n        this._initOptions = options as OPTIONS;\n    }\n\n    /**\n     * Renders the object to its view.\n     * @param options - The options to render with.\n     * @param options.container - The container to render.\n     * @param [options.target] - The target to render to.\n     */\n    public render(options: RenderOptions | Container): void;\n    /** @deprecated since 8.0.0 */\n    public render(container: Container, options: {renderTexture: any}): void;\n    public render(args: RenderOptions | Container, deprecated?: {renderTexture: any}): void\n    {\n        let options = args;\n\n        if (options instanceof Container)\n        {\n            options = { container: options };\n\n            if (deprecated)\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                deprecation(v8_0_0, 'passing a second argument is deprecated, please use render options instead');\n                // #endif\n\n                options.target = deprecated.renderTexture;\n            }\n        }\n\n        options.target ||= this.view.renderTarget;\n\n        // TODO: we should eventually fix events so that it can handle multiple canvas elements\n        if (options.target === this.view.renderTarget)\n        {\n            // TODO get rid of this\n            this._lastObjectRendered = options.container;\n            options.clearColor = this.background.colorRgba;\n        }\n\n        if (options.clearColor)\n        {\n            const isRGBAArray = Array.isArray(options.clearColor) && options.clearColor.length === 4;\n\n            options.clearColor = isRGBAArray ? options.clearColor : Color.shared.setValue(options.clearColor).toArray();\n        }\n\n        if (!options.transform)\n        {\n            options.container.updateLocalTransform();\n            options.transform = options.container.localTransform;\n        }\n\n        this.runners.prerender.emit(options);\n        this.runners.renderStart.emit(options);\n        this.runners.render.emit(options);\n        this.runners.renderEnd.emit(options);\n        this.runners.postrender.emit(options);\n    }\n\n    /**\n     * Resizes the WebGL view to the specified width and height.\n     * @param desiredScreenWidth - The desired width of the screen.\n     * @param desiredScreenHeight - The desired height of the screen.\n     * @param resolution - The resolution / device pixel ratio of the renderer.\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number, resolution?: number): void\n    {\n        const previousResolution = this.view.resolution;\n\n        this.view.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n        this.emit('resize', this.view.screen.width, this.view.screen.height, this.view.resolution);\n        if (resolution !== undefined && resolution !== previousResolution)\n        {\n            this.runners.resolutionChange.emit(resolution);\n        }\n    }\n\n    public clear(options: ClearOptions = {}): void\n    {\n        // override!\n        const renderer = this as unknown as Renderer;\n\n        options.target ||= renderer.renderTarget.renderTarget;\n        options.clearColor ||= this.background.colorRgba;\n        options.clear ??= CLEAR.ALL;\n\n        const { clear, clearColor, target } = options;\n\n        Color.shared.setValue(clearColor ?? this.background.colorRgba);\n\n        renderer.renderTarget.clear(target, clear, Color.shared.toArray() as RgbaArray);\n    }\n\n    /** The resolution / device pixel ratio of the renderer. */\n    get resolution(): number\n    {\n        return this.view.resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this.view.resolution = value;\n        this.runners.resolutionChange.emit(value);\n    }\n\n    /**\n     * Same as view.width, actual number of pixels in the canvas by horizontal.\n     * @member {number}\n     * @readonly\n     * @default 800\n     */\n    get width(): number\n    {\n        return this.view.texture.frame.width;\n    }\n\n    /**\n     * Same as view.height, actual number of pixels in the canvas by vertical.\n     * @default 600\n     */\n    get height(): number\n    {\n        return this.view.texture.frame.height;\n    }\n\n    // NOTE: this was `view` in v7\n    /**\n     * The canvas element that everything is drawn to.\n     * @type {environment.ICanvas}\n     */\n    get canvas(): CANVAS\n    {\n        return this.view.canvas as CANVAS;\n    }\n\n    /**\n     * the last object rendered by the renderer. Useful for other plugins like interaction managers\n     * @readonly\n     */\n    get lastObjectRendered(): Container\n    {\n        return this._lastObjectRendered;\n    }\n\n    /**\n     * Flag if we are rendering to the screen vs renderTexture\n     * @readonly\n     * @default true\n     */\n    get renderingToScreen(): boolean\n    {\n        const renderer = this as unknown as Renderer;\n\n        return renderer.renderTarget.renderingToScreen;\n    }\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     *\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     */\n    get screen(): Rectangle\n    {\n        return this.view.screen;\n    }\n\n    /**\n     * Create a bunch of runners based of a collection of ids\n     * @param runnerIds - the runner ids to add\n     */\n    private _addRunners(...runnerIds: string[]): void\n    {\n        runnerIds.forEach((runnerId) =>\n        {\n            this.runners[runnerId] = new SystemRunner(runnerId);\n        });\n    }\n\n    private _addSystems(systems: RendererConfig['systems']): void\n    {\n        let i: keyof typeof systems;\n\n        for (i in systems)\n        {\n            const val = systems[i];\n\n            this._addSystem(val.value, val.name);\n        }\n    }\n\n    /**\n     * Add a new system to the renderer.\n     * @param ClassRef - Class reference\n     * @param name - Property name for system, if not specified\n     *        will use a static `name` property on the class itself. This\n     *        name will be assigned as s property on the Renderer so make\n     *        sure it doesn't collide with properties on Renderer.\n     * @returns Return instance of renderer\n     */\n    private _addSystem(ClassRef: SystemConstructor, name: string): this\n    {\n        const system = new ClassRef(this as unknown as Renderer);\n\n        if ((this as any)[name])\n        {\n            throw new Error(`Whoops! The name \"${name}\" is already in use`);\n        }\n\n        (this as any)[name] = system;\n\n        this._systemsHash[name] = system;\n\n        for (const i in this.runners)\n        {\n            this.runners[i].add(system);\n        }\n\n        return this;\n    }\n\n    private _addPipes(pipes: RendererConfig['renderPipes'], pipeAdaptors: RendererConfig['renderPipeAdaptors']): void\n    {\n        const adaptors = pipeAdaptors.reduce((acc, adaptor) =>\n        {\n            acc[adaptor.name] = adaptor.value;\n\n            return acc;\n        }, {} as Record<string, any>);\n\n        pipes.forEach((pipe) =>\n        {\n            const PipeClass = pipe.value;\n            const name = pipe.name;\n\n            const Adaptor = adaptors[name];\n\n            // sorry typescript..\n            (this.renderPipes as any)[name] = new PipeClass(\n                this as unknown as Renderer,\n                Adaptor ? new Adaptor() : null\n            );\n        });\n    }\n\n    public destroy(options: RendererDestroyOptions = false): void\n    {\n        this.runners.destroy.items.reverse();\n        this.runners.destroy.emit(options);\n\n        // destroy all runners\n        Object.values(this.runners).forEach((runner) =>\n        {\n            runner.destroy();\n        });\n\n        this._systemsHash = null;\n\n        // destroy all pipes\n        (this.renderPipes as null) = null;\n    }\n\n    /**\n     * Generate a texture from a container.\n     * @param options - options or container target to use when generating the texture\n     * @returns a texture\n     */\n    public generateTexture(options: GenerateTextureOptions | Container): Texture\n    {\n        return this.textureGenerator.generateTexture(options);\n    }\n\n    /**\n     * Whether the renderer will round coordinates to whole pixels when rendering.\n     * Can be overridden on a per scene item basis.\n     */\n    get roundPixels(): boolean\n    {\n        return !!this._roundPixels;\n    }\n\n    /**\n     * Overridable function by `pixi.js/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     * @ignore\n     */\n    public _unsafeEvalCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n               + 'please use pixi.js/unsafe-eval module to enable support.');\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}