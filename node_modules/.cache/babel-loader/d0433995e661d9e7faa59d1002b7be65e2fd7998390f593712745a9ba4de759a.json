{"ast":null,"code":"\"use strict\";\n\nfunction applyProjectiveTransformationToPlane(width, height, geometry, transformationMatrix) {\n  const buffer = geometry.buffers[0];\n  const vertices = buffer.data;\n  const {\n    verticesX,\n    verticesY\n  } = geometry;\n  const sizeX = width / (verticesX - 1);\n  const sizeY = height / (verticesY - 1);\n  let index = 0;\n  const a00 = transformationMatrix[0];\n  const a01 = transformationMatrix[1];\n  const a02 = transformationMatrix[2];\n  const a10 = transformationMatrix[3];\n  const a11 = transformationMatrix[4];\n  const a12 = transformationMatrix[5];\n  const a20 = transformationMatrix[6];\n  const a21 = transformationMatrix[7];\n  const a22 = transformationMatrix[8];\n  for (let i = 0; i < vertices.length; i += 2) {\n    const x = index % verticesX * sizeX;\n    const y = (index / verticesX | 0) * sizeY;\n    const newX = a00 * x + a01 * y + a02;\n    const newY = a10 * x + a11 * y + a12;\n    const w = a20 * x + a21 * y + a22;\n    vertices[i] = newX / w;\n    vertices[i + 1] = newY / w;\n    index++;\n  }\n  buffer.update();\n}\nexport { applyProjectiveTransformationToPlane };","map":{"version":3,"names":["applyProjectiveTransformationToPlane","width","height","geometry","transformationMatrix","buffer","buffers","vertices","data","verticesX","verticesY","sizeX","sizeY","index","a00","a01","a02","a10","a11","a12","a20","a21","a22","i","length","x","y","newX","newY","w","update"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/mesh-perspective/utils/applyProjectiveTransformationToPlane.ts"],"sourcesContent":["import type { ArrayFixed } from '../../../utils/types';\nimport type { PlaneGeometry } from '../../mesh-plane/PlaneGeometry';\n\n/**\n * Apply a projective transformation to a plane geometry\n * @param width - The width of the plane\n * @param height - The height of the plane\n * @param geometry - The plane geometry to apply the transformation to\n * @param transformationMatrix - The transformation matrix to apply\n */\nexport function applyProjectiveTransformationToPlane(\n    width: number,\n    height: number,\n    geometry: PlaneGeometry,\n    transformationMatrix: ArrayFixed<number, 9>\n)\n{\n    const buffer = geometry.buffers[0];\n\n    // Access the vertices of the mesh\n    const vertices = buffer.data;\n\n    const { verticesX, verticesY } = geometry;\n\n    const sizeX = (width) / (verticesX - 1);\n    const sizeY = (height) / (verticesY - 1);\n\n    let index = 0;\n\n    const a00 = transformationMatrix[0];\n    const a01 = transformationMatrix[1];\n    const a02 = transformationMatrix[2];\n    const a10 = transformationMatrix[3];\n    const a11 = transformationMatrix[4];\n    const a12 = transformationMatrix[5];\n    const a20 = transformationMatrix[6];\n    const a21 = transformationMatrix[7];\n    const a22 = transformationMatrix[8];\n\n    // Apply the transformation to each vertex\n    for (let i = 0; i < vertices.length; i += 2)\n    {\n        const x = (index % verticesX) * sizeX;\n        const y = ((index / verticesX) | 0) * sizeY;\n\n        const newX = (a00 * x) + (a01 * y) + a02;\n        const newY = (a10 * x) + (a11 * y) + a12;\n        const w = (a20 * x) + (a21 * y) + a22;\n\n        vertices[i] = newX / w;\n        vertices[i + 1] = newY / w;\n\n        index++;\n    }\n\n    // Update the mesh geometry to reflect the changes\n    buffer.update();\n}\n"],"mappings":";;AAUO,SAASA,oCACZA,CAAAC,KAAA,EACAC,MACA,EAAAC,QAAA,EACAC,oBAEJ;EACU,MAAAC,MAAA,GAASF,QAAS,CAAAG,OAAA,CAAQ,CAAC;EAGjC,MAAMC,QAAA,GAAWF,MAAO,CAAAG,IAAA;EAElB;IAAEC,SAAW;IAAAC;EAAA,CAAc,GAAAP,QAAA;EAE3B,MAAAQ,KAAA,GAASV,KAAA,IAAUQ,SAAY;EAC/B,MAAAG,KAAA,GAASV,MAAA,IAAWQ,SAAY;EAEtC,IAAIG,KAAQ;EAEN,MAAAC,GAAA,GAAMV,oBAAA,CAAqB,CAAC;EAC5B,MAAAW,GAAA,GAAMX,oBAAA,CAAqB,CAAC;EAC5B,MAAAY,GAAA,GAAMZ,oBAAA,CAAqB,CAAC;EAC5B,MAAAa,GAAA,GAAMb,oBAAA,CAAqB,CAAC;EAC5B,MAAAc,GAAA,GAAMd,oBAAA,CAAqB,CAAC;EAC5B,MAAAe,GAAA,GAAMf,oBAAA,CAAqB,CAAC;EAC5B,MAAAgB,GAAA,GAAMhB,oBAAA,CAAqB,CAAC;EAC5B,MAAAiB,GAAA,GAAMjB,oBAAA,CAAqB,CAAC;EAC5B,MAAAkB,GAAA,GAAMlB,oBAAA,CAAqB,CAAC;EAGlC,SAASmB,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAIhB,QAAS,CAAAiB,MAAA,EAAQD,CAAA,IAAK,CAC1C;IACU,MAAAE,CAAA,GAAKZ,KAAA,GAAQJ,SAAa,GAAAE,KAAA;IAC1B,MAAAe,CAAA,IAAMb,KAAQ,GAAAJ,SAAA,GAAa,CAAK,IAAAG,KAAA;IAEtC,MAAMe,IAAQ,GAAAb,GAAA,GAAMW,CAAM,GAAAV,GAAA,GAAMW,CAAK,GAAAV,GAAA;IACrC,MAAMY,IAAQ,GAAAX,GAAA,GAAMQ,CAAM,GAAAP,GAAA,GAAMQ,CAAK,GAAAP,GAAA;IACrC,MAAMU,CAAK,GAAAT,GAAA,GAAMK,CAAM,GAAAJ,GAAA,GAAMK,CAAK,GAAAJ,GAAA;IAEzBf,QAAA,CAAAgB,CAAC,IAAII,IAAO,GAAAE,CAAA;IACZtB,QAAA,CAAAgB,CAAA,GAAI,CAAC,IAAIK,IAAO,GAAAC,CAAA;IAEzBhB,KAAA;EAAA;EAIJR,MAAA,CAAOyB,MAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}