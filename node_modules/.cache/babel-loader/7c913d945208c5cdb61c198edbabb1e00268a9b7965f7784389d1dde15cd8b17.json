{"ast":null,"code":"\"use strict\";\n\nfunction checkChildrenDidChange(container, previousData) {\n  const children = container.children;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    const uid = child.uid;\n    const didChange = (child._didViewChangeTick & 65535) << 16 | child._didContainerChangeTick & 65535;\n    const index = previousData.index;\n    if (previousData.data[index] !== uid || previousData.data[index + 1] !== didChange) {\n      previousData.data[previousData.index] = uid;\n      previousData.data[previousData.index + 1] = didChange;\n      previousData.didChange = true;\n    }\n    previousData.index = index + 2;\n    if (child.children.length) {\n      checkChildrenDidChange(child, previousData);\n    }\n  }\n  return previousData.didChange;\n}\nexport { checkChildrenDidChange };","map":{"version":3,"names":["checkChildrenDidChange","container","previousData","children","i","length","child","uid","didChange","_didViewChangeTick","_didContainerChangeTick","index","data"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/container/utils/checkChildrenDidChange.ts"],"sourcesContent":["import type { Container } from '../Container';\n\n/**\n * This function will crawl through the container essentially check if the children have changed.\n *\n * This function checkChildrenDidChange recursively checks if any child in a Container\n * or its children has changed. It does this by comparing a generated changeId for each\n * child against a stored value in previousData.\n * The changeId is a combination of the child's uid and _didChangeId, bitwise manipulated for uniqueness.\n * If a change is detected, it updates previousData and sets didChange to true.\n * The function returns a boolean indicating if any change was detected in the entire hierarchy of children.\n * @param container - the container to check for changes\n * @param previousData - the previous data from the last check made\n * @param previousData.data - the data array\n * @param previousData.index - the index of the data array\n * @param previousData.didChange - did the data change\n */\nexport function checkChildrenDidChange(\n    container: Container,\n    previousData: {\n        data: number[];\n        index: number;\n        didChange: boolean;\n    })\n{\n    const children = container.children;\n\n    for (let i = 0; i < children.length; i++)\n    {\n        const child = children[i];\n\n        const uid = child.uid;\n        const didChange = ((child._didViewChangeTick & 0xffff) << 16) | (child._didContainerChangeTick & 0xffff);\n\n        const index = previousData.index;\n\n        if (previousData.data[index] !== uid || previousData.data[index + 1] !== didChange)\n        {\n            previousData.data[previousData.index] = uid;\n            previousData.data[previousData.index + 1] = didChange;\n\n            previousData.didChange = true;\n        }\n\n        previousData.index = index + 2;\n\n        if (child.children.length)\n        {\n            checkChildrenDidChange(child, previousData);\n        }\n    }\n\n    return previousData.didChange;\n}\n"],"mappings":";;AAiBgB,SAAAA,uBACZC,SAAA,EACAC,YAKJ;EACI,MAAMC,QAAA,GAAWF,SAAU,CAAAE,QAAA;EAE3B,SAASC,CAAI,MAAGA,CAAI,GAAAD,QAAA,CAASE,MAAA,EAAQD,CACrC;IACU,MAAAE,KAAA,GAAQH,QAAA,CAASC,CAAC;IAExB,MAAMG,GAAA,GAAMD,KAAM,CAAAC,GAAA;IAClB,MAAMC,SAAA,IAAcF,KAAM,CAAAG,kBAAA,GAAqB,KAAW,UAAOH,KAAA,CAAMI,uBAA0B;IAEjG,MAAMC,KAAA,GAAQT,YAAa,CAAAS,KAAA;IAEvB,IAAAT,YAAA,CAAaU,IAAK,CAAAD,KAAK,CAAM,KAAAJ,GAAA,IAAOL,YAAA,CAAaU,IAAK,CAAAD,KAAA,GAAQ,CAAC,MAAMH,SACzE;MACiBN,YAAA,CAAAU,IAAA,CAAKV,YAAa,CAAAS,KAAK,CAAI,GAAAJ,GAAA;MACxCL,YAAA,CAAaU,IAAK,CAAAV,YAAA,CAAaS,KAAQ,IAAC,CAAI,GAAAH,SAAA;MAE5CN,YAAA,CAAaM,SAAY;IAAA;IAG7BN,YAAA,CAAaS,KAAA,GAAQA,KAAQ;IAEzB,IAAAL,KAAA,CAAMH,QAAA,CAASE,MACnB;MACIL,sBAAA,CAAuBM,KAAA,EAAOJ,YAAY;IAAA;EAC9C;EAGJ,OAAOA,YAAa,CAAAM,SAAA;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}