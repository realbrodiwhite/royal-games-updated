{"ast":null,"code":"import { Color } from '../../../../color/Color.mjs';\nimport { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { ImageSource } from '../../../../rendering/renderers/shared/texture/sources/ImageSource.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\"use strict\";\nconst _FillGradient = class _FillGradient {\n  constructor(x0, y0, x1, y1) {\n    /** unique id for this fill gradient */\n    this.uid = uid(\"fillGradient\");\n    this.type = \"linear\";\n    this.gradientStops = [];\n    this._styleKey = null;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n  addColorStop(offset, color) {\n    this.gradientStops.push({\n      offset,\n      color: Color.shared.setValue(color).toHexa()\n    });\n    this._styleKey = null;\n    return this;\n  }\n  // TODO move to the system!\n  buildLinearGradient() {\n    const defaultSize = _FillGradient.defaultTextureSize;\n    const {\n      gradientStops\n    } = this;\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = defaultSize;\n    canvas.height = defaultSize;\n    const ctx = canvas.getContext(\"2d\");\n    const gradient = ctx.createLinearGradient(0, 0, _FillGradient.defaultTextureSize, 1);\n    for (let i = 0; i < gradientStops.length; i++) {\n      const stop = gradientStops[i];\n      gradient.addColorStop(stop.offset, stop.color);\n    }\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, defaultSize, defaultSize);\n    this.texture = new Texture({\n      source: new ImageSource({\n        resource: canvas,\n        addressModeU: \"clamp-to-edge\",\n        addressModeV: \"repeat\"\n      })\n    });\n    const {\n      x0,\n      y0,\n      x1,\n      y1\n    } = this;\n    const m = new Matrix();\n    const dx = x1 - x0;\n    const dy = y1 - y0;\n    const dist = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx);\n    m.translate(-x0, -y0);\n    m.scale(1 / defaultSize, 1 / defaultSize);\n    m.rotate(-angle);\n    m.scale(256 / dist, 1);\n    this.transform = m;\n    this._styleKey = null;\n  }\n  get styleKey() {\n    if (this._styleKey) {\n      return this._styleKey;\n    }\n    const stops = this.gradientStops.map(stop => `${stop.offset}-${stop.color}`).join(\"-\");\n    const texture = this.texture.uid;\n    const transform = this.transform.toArray().join(\"-\");\n    return `fill-gradient-${this.uid}-${stops}-${texture}-${transform}-${this.x0}-${this.y0}-${this.x1}-${this.y1}`;\n  }\n};\n_FillGradient.defaultTextureSize = 256;\nlet FillGradient = _FillGradient;\nexport { FillGradient };","map":{"version":3,"names":["_FillGradient","constructor","x0","y0","x1","y1","uid","type","gradientStops","_styleKey","addColorStop","offset","color","push","Color","shared","setValue","toHexa","buildLinearGradient","defaultSize","defaultTextureSize","canvas","DOMAdapter","get","createCanvas","width","height","ctx","getContext","gradient","createLinearGradient","i","length","stop","fillStyle","fillRect","texture","Texture","source","ImageSource","resource","addressModeU","addressModeV","m","Matrix","dx","dy","dist","Math","sqrt","angle","atan2","translate","scale","rotate","transform","styleKey","stops","map","join","toArray","FillGradient"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/graphics/shared/fill/FillGradient.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { DOMAdapter } from '../../../../environment/adapter';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { ImageSource } from '../../../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { ColorSource } from '../../../../color/Color';\n\nexport type GradientType = 'linear' | 'radial';\n\n// export type GradientSource =\n//     string // CSS gradient string: 'linear-gradient(...)'\n//     | IGradientOptions // Gradient options: { x0, y0, x1, y1, ...}\n//     | Gradient; // class Gradient itself\n\nexport interface LinearGradientFillStyle\n{\n    x0: number;\n    y0: number;\n    x1: number;\n    y1: number;\n    colors: number[];\n    stops: number[];\n}\n\nexport class FillGradient implements CanvasGradient\n{\n    public static defaultTextureSize = 256;\n\n    /** unique id for this fill gradient */\n    public readonly uid: number = uid('fillGradient');\n    public readonly type: GradientType = 'linear';\n\n    public x0: number;\n    public y0: number;\n    public x1: number;\n    public y1: number;\n\n    public texture: Texture;\n    public transform: Matrix;\n    public gradientStops: Array<{ offset: number, color: string }> = [];\n\n    private _styleKey: string | null = null;\n\n    constructor(x0: number, y0: number, x1: number, y1: number)\n    {\n        this.x0 = x0;\n        this.y0 = y0;\n\n        this.x1 = x1;\n        this.y1 = y1;\n    }\n\n    public addColorStop(offset: number, color: ColorSource): this\n    {\n        this.gradientStops.push({ offset, color: Color.shared.setValue(color).toHexa() });\n        this._styleKey = null;\n\n        return this;\n    }\n\n    // TODO move to the system!\n    public buildLinearGradient(): void\n    {\n        const defaultSize = FillGradient.defaultTextureSize;\n\n        const { gradientStops } = this;\n\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = defaultSize;\n        canvas.height = defaultSize;\n\n        const ctx = canvas.getContext('2d');\n\n        const gradient = ctx.createLinearGradient(0, 0, FillGradient.defaultTextureSize, 1);\n\n        for (let i = 0; i < gradientStops.length; i++)\n        {\n            const stop = gradientStops[i];\n\n            gradient.addColorStop(stop.offset, stop.color);\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, defaultSize, defaultSize);\n\n        this.texture = new Texture({\n            source: new ImageSource({\n                resource: canvas,\n                addressModeU: 'clamp-to-edge',\n                addressModeV: 'repeat',\n            }),\n        });\n\n        // generate some UVS based on the gradient direction sent\n\n        const { x0, y0, x1, y1 } = this;\n\n        const m = new Matrix();\n\n        // get angle\n        const dx = x1 - x0;\n        const dy = y1 - y0;\n\n        const dist = Math.sqrt((dx * dx) + (dy * dy));\n\n        const angle = Math.atan2(dy, dx);\n\n        m.translate(-x0, -y0);\n        m.scale(1 / defaultSize, 1 / defaultSize);\n        m.rotate(-angle);\n        m.scale(256 / dist, 1);\n\n        this.transform = m;\n        this._styleKey = null;\n    }\n\n    public get styleKey(): string\n    {\n        if (this._styleKey)\n        {\n            return this._styleKey;\n        }\n\n        const stops = this.gradientStops.map((stop) => `${stop.offset}-${stop.color}`).join('-');\n        const texture = this.texture.uid;\n        const transform = this.transform.toArray().join('-');\n\n        return `fill-gradient-${this.uid}-${stops}-${texture}-${transform}-${this.x0}-${this.y0}-${this.x1}-${this.y1}`;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}