{"ast":null,"code":"import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { multiplyHexColors } from '../../container/utils/multiplyHexColors.mjs';\n\"use strict\";\nconst identityMatrix = new Matrix();\nclass BatchableGraphics {\n  constructor() {\n    this.packAsQuad = false;\n    this.batcherName = \"default\";\n    this.applyTransform = true;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n  }\n  get uvs() {\n    return this.geometryData.uvs;\n  }\n  get positions() {\n    return this.geometryData.vertices;\n  }\n  get indices() {\n    return this.geometryData.indices;\n  }\n  get blendMode() {\n    if (this.applyTransform) {\n      return this.renderable.groupBlendMode;\n    }\n    return \"normal\";\n  }\n  get color() {\n    const rgb = this.baseColor;\n    const bgr = rgb >> 16 | rgb & 65280 | (rgb & 255) << 16;\n    const renderable = this.renderable;\n    if (renderable) {\n      return multiplyHexColors(bgr, renderable.groupColor) + (this.alpha * renderable.groupAlpha * 255 << 24);\n    }\n    return bgr + (this.alpha * 255 << 24);\n  }\n  get transform() {\n    return this.renderable?.groupTransform || identityMatrix;\n  }\n  copyTo(gpuBuffer) {\n    gpuBuffer.indexOffset = this.indexOffset;\n    gpuBuffer.indexSize = this.indexSize;\n    gpuBuffer.attributeOffset = this.attributeOffset;\n    gpuBuffer.attributeSize = this.attributeSize;\n    gpuBuffer.baseColor = this.baseColor;\n    gpuBuffer.alpha = this.alpha;\n    gpuBuffer.texture = this.texture;\n    gpuBuffer.geometryData = this.geometryData;\n  }\n  reset() {\n    this.applyTransform = true;\n    this.renderable = null;\n  }\n}\nexport { BatchableGraphics };","map":{"version":3,"names":["identityMatrix","Matrix","BatchableGraphics","constructor","packAsQuad","batcherName","applyTransform","roundPixels","_batcher","_batch","uvs","geometryData","positions","vertices","indices","blendMode","renderable","groupBlendMode","color","rgb","baseColor","bgr","multiplyHexColors","groupColor","alpha","groupAlpha","transform","groupTransform","copyTo","gpuBuffer","indexOffset","indexSize","attributeOffset","attributeSize","texture","reset"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/graphics/shared/BatchableGraphics.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { multiplyHexColors } from '../../container/utils/multiplyHexColors';\n\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Graphics } from './Graphics';\n\nconst identityMatrix = new Matrix();\n/**\n * A batchable graphics object.\n * @ignore\n */\n\nexport class BatchableGraphics implements DefaultBatchableMeshElement\n{\n    public readonly packAsQuad = false;\n    public batcherName = 'default';\n\n    public texture: Texture;\n\n    public renderable: Graphics;\n    public indexOffset: number;\n    public indexSize: number;\n    public attributeOffset: number;\n    public attributeSize: number;\n    public baseColor: number;\n    public alpha: number;\n    public applyTransform = true;\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    public geometryData: { vertices: number[]; uvs: number[]; indices: number[]; };\n\n    get uvs()\n    {\n        return this.geometryData.uvs;\n    }\n\n    get positions()\n    {\n        return this.geometryData.vertices;\n    }\n\n    get indices()\n    {\n        return this.geometryData.indices;\n    }\n\n    get blendMode()\n    {\n        if (this.applyTransform)\n        {\n            return this.renderable.groupBlendMode;\n        }\n\n        return 'normal';\n    }\n    get color()\n    {\n        const rgb = this.baseColor;\n        const bgr = (rgb >> 16) | (rgb & 0xff00) | ((rgb & 0xff) << 16);\n        const renderable = this.renderable;\n\n        if (renderable)\n        {\n            return multiplyHexColors(bgr, renderable.groupColor)\n            + ((this.alpha * renderable.groupAlpha * 255) << 24);\n        }\n\n        return bgr + ((this.alpha * 255) << 24);\n    }\n\n    get transform()\n    {\n        return this.renderable?.groupTransform || identityMatrix;\n    }\n\n    public copyTo(gpuBuffer: BatchableGraphics)\n    {\n        gpuBuffer.indexOffset = this.indexOffset;\n        gpuBuffer.indexSize = this.indexSize;\n\n        gpuBuffer.attributeOffset = this.attributeOffset;\n        gpuBuffer.attributeSize = this.attributeSize;\n\n        gpuBuffer.baseColor = this.baseColor;\n        gpuBuffer.alpha = this.alpha;\n\n        gpuBuffer.texture = this.texture;\n        gpuBuffer.geometryData = this.geometryData;\n    }\n\n    public reset()\n    {\n        this.applyTransform = true;\n        this.renderable = null;\n    }\n}\n"],"mappings":";;;AAQA,MAAMA,cAAA,GAAiB,IAAIC,MAAO;AAM3B,MAAMC,iBACb;EADOC,YAAA;IAEH,KAAgBC,UAAa;IAC7B,KAAOC,WAAc;IAWrB,KAAOC,cAAiB;IACxB,KAAOC,WAAqB;IAK5B,KAAOC,QAAoB;IAC3B,KAAOC,MAAgB;EAAA;EAIvB,IAAIC,GACJA,CAAA;IACI,OAAO,KAAKC,YAAa,CAAAD,GAAA;EAAA;EAG7B,IAAIE,SACJA,CAAA;IACI,OAAO,KAAKD,YAAa,CAAAE,QAAA;EAAA;EAG7B,IAAIC,OACJA,CAAA;IACI,OAAO,KAAKH,YAAa,CAAAG,OAAA;EAAA;EAG7B,IAAIC,SACJA,CAAA;IACI,IAAI,KAAKT,cACT;MACI,OAAO,KAAKU,UAAW,CAAAC,cAAA;IAAA;IAGpB;EAAA;EAEX,IAAIC,KACJA,CAAA;IACI,MAAMC,GAAA,GAAM,IAAK,CAAAC,SAAA;IACjB,MAAMC,GAAA,GAAOF,GAAO,SAAOA,GAAM,YAAYA,GAAA,GAAM,GAAS;IAC5D,MAAMH,UAAA,GAAa,IAAK,CAAAA,UAAA;IAExB,IAAIA,UACJ;MACW,OAAAM,iBAAA,CAAkBD,GAAA,EAAKL,UAAW,CAAAO,UAAU,KAC/C,IAAK,CAAAC,KAAA,GAAQR,UAAW,CAAAS,UAAA,GAAa,GAAQ;IAAA;IAG9C,OAAAJ,GAAA,IAAQ,IAAK,CAAAG,KAAA,GAAQ,GAAQ;EAAA;EAGxC,IAAIE,SACJA,CAAA;IACW,YAAKV,UAAA,EAAYW,cAAkB,IAAA3B,cAAA;EAAA;EAGvC4B,OAAOC,SACd;IACIA,SAAA,CAAUC,WAAA,GAAc,IAAK,CAAAA,WAAA;IAC7BD,SAAA,CAAUE,SAAA,GAAY,IAAK,CAAAA,SAAA;IAE3BF,SAAA,CAAUG,eAAA,GAAkB,IAAK,CAAAA,eAAA;IACjCH,SAAA,CAAUI,aAAA,GAAgB,IAAK,CAAAA,aAAA;IAE/BJ,SAAA,CAAUT,SAAA,GAAY,IAAK,CAAAA,SAAA;IAC3BS,SAAA,CAAUL,KAAA,GAAQ,IAAK,CAAAA,KAAA;IAEvBK,SAAA,CAAUK,OAAA,GAAU,IAAK,CAAAA,OAAA;IACzBL,SAAA,CAAUlB,YAAA,GAAe,IAAK,CAAAA,YAAA;EAAA;EAG3BwB,KACPA,CAAA;IACI,KAAK7B,cAAiB;IACtB,KAAKU,UAAa;EAAA;AAE1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}