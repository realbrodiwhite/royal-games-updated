{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\n\"use strict\";\nclass GlBatchAdaptor {\n  constructor() {\n    this._didUpload = false;\n    this._tempState = State.for2d();\n  }\n  init(batcherPipe) {\n    batcherPipe.renderer.runners.contextChange.add(this);\n  }\n  contextChange() {\n    this._didUpload = false;\n  }\n  start(batchPipe, geometry, shader) {\n    const renderer = batchPipe.renderer;\n    renderer.shader.bind(shader, this._didUpload);\n    renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup);\n    renderer.geometry.bind(geometry, shader.glProgram);\n  }\n  execute(batchPipe, batch) {\n    const renderer = batchPipe.renderer;\n    this._didUpload = true;\n    this._tempState.blendMode = batch.blendMode;\n    renderer.state.set(this._tempState);\n    const textures = batch.textures.textures;\n    for (let i = 0; i < batch.textures.count; i++) {\n      renderer.texture.bind(textures[i], i);\n    }\n    renderer.geometry.draw(\"triangle-list\", batch.size, batch.start);\n  }\n}\n/** @ignore */\nGlBatchAdaptor.extension = {\n  type: [ExtensionType.WebGLPipesAdaptor],\n  name: \"batch\"\n};\nexport { GlBatchAdaptor };","map":{"version":3,"names":["GlBatchAdaptor","constructor","_didUpload","_tempState","State","for2d","init","batcherPipe","renderer","runners","contextChange","add","start","batchPipe","geometry","shader","bind","updateUniformGroup","globalUniforms","uniformGroup","glProgram","execute","batch","blendMode","state","set","textures","i","count","texture","draw","size","extension","type","ExtensionType","WebGLPipesAdaptor","name"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/rendering/batcher/gl/GlBatchAdaptor.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\n\nimport type { WebGLRenderer } from '../../renderers/gl/WebGLRenderer';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\n/**\n * A BatcherAdaptor that uses WebGL to render batches.\n * @memberof rendering\n * @ignore\n */\nexport class GlBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    private _didUpload = false;\n    private readonly _tempState = State.for2d();\n\n    public init(batcherPipe: BatcherPipe): void\n    {\n        batcherPipe.renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._didUpload = false;\n    }\n\n    public start(batchPipe: BatcherPipe, geometry: Geometry, shader: Shader): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        // only want to sync the shade ron its first bind!\n        renderer.shader.bind(shader, this._didUpload);\n\n        renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup);\n\n        renderer.geometry.bind(geometry, shader.glProgram);\n    }\n\n    public execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        this._didUpload = true;\n\n        this._tempState.blendMode = batch.blendMode;\n\n        renderer.state.set(this._tempState);\n\n        const textures = batch.textures.textures;\n\n        for (let i = 0; i < batch.textures.count; i++)\n        {\n            renderer.texture.bind(textures[i], i);\n        }\n\n        renderer.geometry.draw('triangle-list', batch.size, batch.start);\n    }\n}\n"],"mappings":";;;AAcO,MAAMA,cACb;EADOC,YAAA;IAUH,KAAQC,UAAa;IACJ,KAAAC,UAAA,GAAaC,KAAA,CAAMC,KAAM;EAAA;EAEnCC,KAAKC,WACZ;IACIA,WAAA,CAAYC,QAAS,CAAAC,OAAA,CAAQC,aAAc,CAAAC,GAAA,CAAI,IAAI;EAAA;EAGhDD,aACPA,CAAA;IACI,KAAKR,UAAa;EAAA;EAGfU,MAAMC,SAAwB,EAAAC,QAAA,EAAoBC,MACzD;IACI,MAAMP,QAAA,GAAWK,SAAU,CAAAL,QAAA;IAG3BA,QAAA,CAASO,MAAO,CAAAC,IAAA,CAAKD,MAAQ,OAAKb,UAAU;IAE5CM,QAAA,CAASO,MAAO,CAAAE,kBAAA,CAAmBT,QAAS,CAAAU,cAAA,CAAeC,YAAY;IAEvEX,QAAA,CAASM,QAAS,CAAAE,IAAA,CAAKF,QAAU,EAAAC,MAAA,CAAOK,SAAS;EAAA;EAG9CC,QAAQR,SAAA,EAAwBS,KACvC;IACI,MAAMd,QAAA,GAAWK,SAAU,CAAAL,QAAA;IAE3B,KAAKN,UAAa;IAEb,KAAAC,UAAA,CAAWoB,SAAA,GAAYD,KAAM,CAAAC,SAAA;IAEzBf,QAAA,CAAAgB,KAAA,CAAMC,GAAI,MAAKtB,UAAU;IAE5B,MAAAuB,QAAA,GAAWJ,KAAA,CAAMI,QAAS,CAAAA,QAAA;IAEhC,SAASC,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAIL,KAAM,CAAAI,QAAA,CAASE,KAAA,EAAOD,CAC1C;MACInB,QAAA,CAASqB,OAAQ,CAAAb,IAAA,CAAKU,QAAS,CAAAC,CAAC,GAAGA,CAAC;IAAA;IAGxCnB,QAAA,CAASM,QAAA,CAASgB,IAAK,kBAAiBR,KAAM,CAAAS,IAAA,EAAMT,KAAA,CAAMV,KAAK;EAAA;AAEvE;AAAA;AAtDaZ,cAAA,CAGKgC,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,iBAAA,CAClB;EACAC,IAAM;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}