{"ast":null,"code":"import React,{createContext,useState}from'react';import{apiHandler}from'./apiHandler';import{jsx as _jsx}from\"react/jsx-runtime\";const UserContext=/*#__PURE__*/createContext();const UserProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const login=async(username,password)=>{const{success,data}=await apiHandler('/api/user/login','POST',{username,password});if(success){setUser(data.user);console.log('User logged in:',data.user);}return{success,data};};const register=async user=>{const{success,data}=await apiHandler('/api/user/register','POST',user);if(success){console.log('User registered successfully');}return{success,data};};const updateProfile=async formData=>{try{const{success,data}=await apiHandler('/api/user/profile','PUT',formData);if(success){setUser(data);console.log('Profile updated successfully:',data);return{success:true,data};}else{console.warn('Profile update failed:',data.error);return{success:false,data};}}catch(error){console.error('Error during profile update:',error.message,error.stack);return{success:false,error};}};const resetPassword=async(userId,newPassword)=>{const{success,data}=await apiHandler('/api/user/reset-password','POST',{userId,newPassword});if(success){console.log('Password reset successfully for user ID:',userId);}return{success,data};};return/*#__PURE__*/_jsx(UserContext.Provider,{value:{user,login,register,updateProfile,resetPassword},children:children});};export{UserContext,UserProvider};","map":{"version":3,"names":["React","createContext","useState","apiHandler","jsx","_jsx","UserContext","UserProvider","_ref","children","user","setUser","login","username","password","success","data","console","log","register","updateProfile","formData","warn","error","message","stack","resetPassword","userId","newPassword","Provider","value"],"sources":["/workspaces/royal-games-updated/src/context/userContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\nimport { apiHandler } from './apiHandler';\r\n\r\nconst UserContext = createContext();\r\n\r\nconst UserProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = async (username, password) => {\r\n    const { success, data } = await apiHandler('/api/user/login', 'POST', { username, password });\r\n    if (success) {\r\n      setUser(data.user);\r\n      console.log('User logged in:', data.user);\r\n    }\r\n    return { success, data };\r\n  };\r\n\r\n  const register = async (user) => {\r\n    const { success, data } = await apiHandler('/api/user/register', 'POST', user);\r\n    if (success) {\r\n      console.log('User registered successfully');\r\n    }\r\n    return { success, data };\r\n  };\r\n\r\n  const updateProfile = async (formData) => {\r\n    try {\r\n      const { success, data } = await apiHandler('/api/user/profile', 'PUT', formData);\r\n      if (success) {\r\n        setUser(data);\r\n        console.log('Profile updated successfully:', data);\r\n        return { success: true, data };\r\n      } else {\r\n        console.warn('Profile update failed:', data.error);\r\n        return { success: false, data };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during profile update:', error.message, error.stack);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (userId, newPassword) => {\r\n    const { success, data } = await apiHandler('/api/user/reset-password', 'POST', { userId, newPassword });\r\n    if (success) {\r\n      console.log('Password reset successfully for user ID:', userId);\r\n    }\r\n    return { success, data };\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, login, register, updateProfile, resetPassword }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport { UserContext, UserProvider };"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,KAAQ,OAAO,CACtD,OAASC,UAAU,KAAQ,cAAc,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1C,KAAM,CAAAC,WAAW,cAAGL,aAAa,CAAC,CAAC,CAEnC,KAAM,CAAAM,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAChC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAEtC,KAAM,CAAAU,KAAK,CAAG,KAAAA,CAAOC,QAAQ,CAAEC,QAAQ,GAAK,CAC1C,KAAM,CAAEC,OAAO,CAAEC,IAAK,CAAC,CAAG,KAAM,CAAAb,UAAU,CAAC,iBAAiB,CAAE,MAAM,CAAE,CAAEU,QAAQ,CAAEC,QAAS,CAAC,CAAC,CAC7F,GAAIC,OAAO,CAAE,CACXJ,OAAO,CAACK,IAAI,CAACN,IAAI,CAAC,CAClBO,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAEF,IAAI,CAACN,IAAI,CAAC,CAC3C,CACA,MAAO,CAAEK,OAAO,CAAEC,IAAK,CAAC,CAC1B,CAAC,CAED,KAAM,CAAAG,QAAQ,CAAG,KAAO,CAAAT,IAAI,EAAK,CAC/B,KAAM,CAAEK,OAAO,CAAEC,IAAK,CAAC,CAAG,KAAM,CAAAb,UAAU,CAAC,oBAAoB,CAAE,MAAM,CAAEO,IAAI,CAAC,CAC9E,GAAIK,OAAO,CAAE,CACXE,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC7C,CACA,MAAO,CAAEH,OAAO,CAAEC,IAAK,CAAC,CAC1B,CAAC,CAED,KAAM,CAAAI,aAAa,CAAG,KAAO,CAAAC,QAAQ,EAAK,CACxC,GAAI,CACF,KAAM,CAAEN,OAAO,CAAEC,IAAK,CAAC,CAAG,KAAM,CAAAb,UAAU,CAAC,mBAAmB,CAAE,KAAK,CAAEkB,QAAQ,CAAC,CAChF,GAAIN,OAAO,CAAE,CACXJ,OAAO,CAACK,IAAI,CAAC,CACbC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAEF,IAAI,CAAC,CAClD,MAAO,CAAED,OAAO,CAAE,IAAI,CAAEC,IAAK,CAAC,CAChC,CAAC,IAAM,CACLC,OAAO,CAACK,IAAI,CAAC,wBAAwB,CAAEN,IAAI,CAACO,KAAK,CAAC,CAClD,MAAO,CAAER,OAAO,CAAE,KAAK,CAAEC,IAAK,CAAC,CACjC,CACF,CAAE,MAAOO,KAAK,CAAE,CACdN,OAAO,CAACM,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAACC,OAAO,CAAED,KAAK,CAACE,KAAK,CAAC,CACzE,MAAO,CAAEV,OAAO,CAAE,KAAK,CAAEQ,KAAM,CAAC,CAClC,CACF,CAAC,CAED,KAAM,CAAAG,aAAa,CAAG,KAAAA,CAAOC,MAAM,CAAEC,WAAW,GAAK,CACnD,KAAM,CAAEb,OAAO,CAAEC,IAAK,CAAC,CAAG,KAAM,CAAAb,UAAU,CAAC,0BAA0B,CAAE,MAAM,CAAE,CAAEwB,MAAM,CAAEC,WAAY,CAAC,CAAC,CACvG,GAAIb,OAAO,CAAE,CACXE,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAES,MAAM,CAAC,CACjE,CACA,MAAO,CAAEZ,OAAO,CAAEC,IAAK,CAAC,CAC1B,CAAC,CAED,mBACEX,IAAA,CAACC,WAAW,CAACuB,QAAQ,EAACC,KAAK,CAAE,CAAEpB,IAAI,CAAEE,KAAK,CAAEO,QAAQ,CAAEC,aAAa,CAAEM,aAAc,CAAE,CAAAjB,QAAA,CAClFA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,OAASH,WAAW,CAAEC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}