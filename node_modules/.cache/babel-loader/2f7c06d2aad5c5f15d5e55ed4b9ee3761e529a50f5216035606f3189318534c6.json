{"ast":null,"code":"import { uid } from '../../../../utils/data/uid.mjs';\n\"use strict\";\nlet _tick = 0;\nclass InstructionSet {\n  constructor() {\n    /** a unique id for this instruction set used through the renderer */\n    this.uid = uid(\"instructionSet\");\n    /** the array of instructions */\n    this.instructions = [];\n    /** the actual size of the array (any instructions passed this should be ignored) */\n    this.instructionSize = 0;\n    this.renderables = [];\n    this.tick = 0;\n  }\n  /** reset the instruction set so it can be reused set size back to 0 */\n  reset() {\n    this.instructionSize = 0;\n    this.tick = _tick++;\n  }\n  /**\n   * Add an instruction to the set\n   * @param instruction - add an instruction to the set\n   */\n  add(instruction) {\n    this.instructions[this.instructionSize++] = instruction;\n  }\n  /**\n   * Log the instructions to the console (for debugging)\n   * @internal\n   * @ignore\n   */\n  log() {\n    this.instructions.length = this.instructionSize;\n    console.table(this.instructions, [\"type\", \"action\"]);\n  }\n}\nexport { InstructionSet };","map":{"version":3,"names":["_tick","InstructionSet","constructor","uid","instructions","instructionSize","renderables","tick","reset","add","instruction","log","length","console","table"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/rendering/renderers/shared/instructions/InstructionSet.ts"],"sourcesContent":["import { uid } from '../../../../utils/data/uid';\n\nimport type { Renderable } from '../Renderable';\nimport type { Instruction } from './Instruction';\n\nlet _tick = 0;\n\n/**\n * A set of instructions that can be executed by the renderer.\n * Basically wraps an array, but with some extra properties that help the renderer\n * to keep things nice and optimised.\n *\n * Note:\n * InstructionSet.instructions contains all the instructions, but does not resize (for performance).\n * So for the true length of the instructions you need to use InstructionSet.instructionSize\n * @memberof rendering\n */\nexport class InstructionSet\n{\n    /** a unique id for this instruction set used through the renderer */\n    public readonly uid: number = uid('instructionSet');\n    /** the array of instructions */\n    public readonly instructions: Instruction[] = [];\n    /** the actual size of the array (any instructions passed this should be ignored) */\n    public instructionSize = 0;\n    /** allows for access to the render pipes of the renderer */\n    public renderPipes: any;\n\n    public renderables: Renderable[] = [];\n    public tick = 0;\n\n    /** reset the instruction set so it can be reused set size back to 0 */\n    public reset()\n    {\n        this.instructionSize = 0;\n        this.tick = _tick++;\n    }\n\n    /**\n     * Add an instruction to the set\n     * @param instruction - add an instruction to the set\n     */\n    public add(instruction: Instruction)\n    {\n        this.instructions[this.instructionSize++] = instruction;\n    }\n\n    /**\n     * Log the instructions to the console (for debugging)\n     * @internal\n     * @ignore\n     */\n    public log()\n    {\n        this.instructions.length = this.instructionSize;\n        // eslint-disable-next-line no-console\n        console.table(this.instructions, ['type', 'action']);\n    }\n}\n"],"mappings":";;AAKA,IAAIA,KAAQ;AAYL,MAAMC,cACb;EADOC,YAAA;IAGH;IAAgB,KAAAC,GAAA,GAAcA,GAAA,CAAI,gBAAgB;IAElD;IAAA,KAAgBC,YAAA,GAA8B,EAAC;IAE/C;IAAA,KAAOC,eAAkB;IAIzB,KAAOC,WAAA,GAA4B,EAAC;IACpC,KAAOC,IAAO;EAAA;EAAA;EAGPC,KACPA,CAAA;IACI,KAAKH,eAAkB;IACvB,KAAKE,IAAO,GAAAP,KAAA;EAAA;EAChB;AAAA;AAAA;AAAA;EAMOS,IAAIC,WACX;IACS,KAAAN,YAAA,CAAa,IAAK,CAAAC,eAAA,EAAiB,CAAI,GAAAK,WAAA;EAAA;EAChD;AAAA;AAAA;AAAA;AAAA;EAOOC,GACPA,CAAA;IACS,KAAAP,YAAA,CAAaQ,MAAA,GAAS,IAAK,CAAAP,eAAA;IAEhCQ,OAAA,CAAQC,KAAA,CAAM,IAAK,CAAAV,YAAA,EAAc,CAAC,QAAQ,QAAQ,CAAC;EAAA;AAE3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}