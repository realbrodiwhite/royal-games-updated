{"ast":null,"code":"import { Bounds } from '../container/bounds/Bounds.mjs';\nimport { Container } from '../container/Container.mjs';\n\"use strict\";\nclass ViewContainer extends Container {\n  constructor() {\n    super(...arguments);\n    /** @private */\n    this.canBundle = true;\n    /** @private */\n    this.allowChildren = false;\n    /** @private */\n    this._roundPixels = 0;\n    /** @private */\n    this._lastUsed = 0;\n    /** @private */\n    this._lastInstructionTick = -1;\n    this._bounds = new Bounds(0, 1, 0, 0);\n    this._boundsDirty = true;\n  }\n  /** @private */\n  _updateBounds() {}\n  /**\n   * Whether or not to round the x/y position of the sprite.\n   * @type {boolean}\n   */\n  get roundPixels() {\n    return !!this._roundPixels;\n  }\n  set roundPixels(value) {\n    this._roundPixels = value ? 1 : 0;\n  }\n  /**\n   * Checks if the object contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    const bounds = this.bounds;\n    const {\n      x,\n      y\n    } = point;\n    return x >= bounds.minX && x <= bounds.maxX && y >= bounds.minY && y <= bounds.maxY;\n  }\n  destroy(options) {\n    super.destroy(options);\n    this._bounds = null;\n  }\n}\nexport { ViewContainer };","map":{"version":3,"names":["ViewContainer","Container","constructor","arguments","canBundle","allowChildren","_roundPixels","_lastUsed","_lastInstructionTick","_bounds","Bounds","_boundsDirty","_updateBounds","roundPixels","value","containsPoint","point","bounds","x","y","minX","maxX","minY","maxY","destroy","options"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/view/View.ts"],"sourcesContent":["import { Bounds } from '../container/bounds/Bounds';\nimport { Container } from '../container/Container';\n\nimport type { PointData } from '../../maths/point/PointData';\nimport type { View } from '../../rendering/renderers/shared/view/View';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { DestroyOptions } from '../container/destroyTypes';\n\n/**\n * A ViewContainer is a type of container that represents a view.\n * This view can be a Sprite, a Graphics object, or any other object that can be rendered.\n * This class is abstract and should not be used directly.\n * @memberof scene\n */\nexport abstract class ViewContainer extends Container implements View\n{\n    /** @private */\n    public override readonly renderPipeId: string;\n    /** @private */\n    public readonly canBundle = true;\n    /** @private */\n    public override allowChildren = false;\n\n    /** @private */\n    public _roundPixels: 0 | 1 = 0;\n    /** @private */\n    public _lastUsed = 0;\n    /** @private */\n    public _lastInstructionTick = -1;\n\n    protected _bounds: Bounds = new Bounds(0, 1, 0, 0);\n    protected _boundsDirty = true;\n\n    /**\n     * The local bounds of the view.\n     * @type {rendering.Bounds}\n     */\n    public abstract get bounds(): BoundsData;\n    /** @private */\n    public abstract addBounds(bounds: Bounds): void;\n    /** @private */\n    protected _updateBounds(): void\n    {\n        // override this\n    }\n\n    /**\n     * Whether or not to round the x/y position of the sprite.\n     * @type {boolean}\n     */\n    get roundPixels()\n    {\n        return !!this._roundPixels;\n    }\n\n    set roundPixels(value: boolean)\n    {\n        this._roundPixels = value ? 1 : 0;\n    }\n\n    /**\n     * Checks if the object contains the given point.\n     * @param point - The point to check\n     */\n    public containsPoint(point: PointData)\n    {\n        const bounds = this.bounds;\n        const { x, y } = point;\n\n        return (x >= bounds.minX\n            && x <= bounds.maxX\n            && y >= bounds.minY\n            && y <= bounds.maxY);\n    }\n\n    /** @private */\n    public abstract batched: boolean;\n\n    /** @private */\n    protected abstract onViewUpdate(): void;\n\n    public override destroy(options?: DestroyOptions): void\n    {\n        super.destroy(options);\n\n        this._bounds = null;\n    }\n}\n"],"mappings":";;;AAcO,MAAeA,aAAA,SAAsBC,SAC5C;EADOC,YAAA;IAAA,SAAAC,SAAA;IAKH;IAAA,KAAgBC,SAAY;IAE5B;IAAA,KAAgBC,aAAgB;IAGhC;IAAA,KAAOC,YAAsB;IAE7B;IAAA,KAAOC,SAAY;IAEnB;IAAA,KAAOC,oBAAuB;IAE9B,KAAUC,OAAA,GAAkB,IAAIC,MAAA,CAAO,CAAG,KAAG,GAAG,CAAC;IACjD,KAAUC,YAAe;EAAA;EAAA;EAUfC,aACVA,CAAA;EAEA;AAAA;AAAA;AAAA;EAMA,IAAIC,WACJA,CAAA;IACW,QAAC,CAAC,IAAK,CAAAP,YAAA;EAAA;EAGlB,IAAIO,YAAYC,KAChB;IACS,KAAAR,YAAA,GAAeQ,KAAA,GAAQ,CAAI;EAAA;EACpC;AAAA;AAAA;AAAA;EAMOC,cAAcC,KACrB;IACI,MAAMC,MAAA,GAAS,IAAK,CAAAA,MAAA;IACd;MAAEC,CAAG;MAAAC;IAAA,CAAM,GAAAH,KAAA;IAET,OAAAE,CAAA,IAAKD,MAAO,CAAAG,IAAA,IACbF,CAAK,IAAAD,MAAA,CAAOI,IAAA,IACZF,CAAK,IAAAF,MAAA,CAAOK,IACZ,IAAAH,CAAA,IAAKF,MAAO,CAAAM,IAAA;EAAA;EASPC,QAAQC,OACxB;IACI,MAAMD,OAAA,CAAQC,OAAO;IAErB,KAAKhB,OAAU;EAAA;AAEvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}