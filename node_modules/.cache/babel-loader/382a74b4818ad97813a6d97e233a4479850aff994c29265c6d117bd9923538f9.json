{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { Color } from '../../color/Color.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient.mjs';\nimport { FillPattern } from '../graphics/shared/fill/FillPattern.mjs';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext.mjs';\nimport { toFillStyle, toStrokeStyle } from '../graphics/shared/utils/convertFillInputToFillStyle.mjs';\nimport { generateTextStyleKey } from './utils/generateTextStyleKey.mjs';\n\"use strict\";\nconst _TextStyle = class _TextStyle extends EventEmitter {\n  constructor() {\n    let style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    convertV7Tov8Style(style);\n    const fullStyle = {\n      ..._TextStyle.defaultTextStyle,\n      ...style\n    };\n    for (const key in fullStyle) {\n      const thisKey = key;\n      this[thisKey] = fullStyle[key];\n    }\n    this.update();\n  }\n  /**\n   * Alignment for multiline text, does not affect single line text.\n   * @member {'left'|'center'|'right'|'justify'}\n   */\n  get align() {\n    return this._align;\n  }\n  set align(value) {\n    this._align = value;\n    this.update();\n  }\n  /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n  get breakWords() {\n    return this._breakWords;\n  }\n  set breakWords(value) {\n    this._breakWords = value;\n    this.update();\n  }\n  /** Set a drop shadow for the text. */\n  get dropShadow() {\n    return this._dropShadow;\n  }\n  set dropShadow(value) {\n    if (value !== null && typeof value === \"object\") {\n      this._dropShadow = this._createProxy({\n        ..._TextStyle.defaultDropShadow,\n        ...value\n      });\n    } else {\n      this._dropShadow = value ? this._createProxy({\n        ..._TextStyle.defaultDropShadow\n      }) : null;\n    }\n    this.update();\n  }\n  /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  set fontFamily(value) {\n    this._fontFamily = value;\n    this.update();\n  }\n  /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n  get fontSize() {\n    return this._fontSize;\n  }\n  set fontSize(value) {\n    if (typeof value === \"string\") {\n      this._fontSize = parseInt(value, 10);\n    } else {\n      this._fontSize = value;\n    }\n    this.update();\n  }\n  /**\n   * The font style.\n   * @member {'normal'|'italic'|'oblique'}\n   */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  set fontStyle(value) {\n    this._fontStyle = value;\n    this.update();\n  }\n  /**\n   * The font variant.\n   * @member {'normal'|'small-caps'}\n   */\n  get fontVariant() {\n    return this._fontVariant;\n  }\n  set fontVariant(value) {\n    this._fontVariant = value;\n    this.update();\n  }\n  /**\n   * The font weight.\n   * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  set fontWeight(value) {\n    this._fontWeight = value;\n    this.update();\n  }\n  /** The space between lines. */\n  get leading() {\n    return this._leading;\n  }\n  set leading(value) {\n    this._leading = value;\n    this.update();\n  }\n  /** The amount of spacing between letters, default is 0. */\n  get letterSpacing() {\n    return this._letterSpacing;\n  }\n  set letterSpacing(value) {\n    this._letterSpacing = value;\n    this.update();\n  }\n  /** The line height, a number that represents the vertical space that a letter uses. */\n  get lineHeight() {\n    return this._lineHeight;\n  }\n  set lineHeight(value) {\n    this._lineHeight = value;\n    this.update();\n  }\n  /**\n   * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n   * by adding padding to all sides of the text.\n   */\n  get padding() {\n    return this._padding;\n  }\n  set padding(value) {\n    this._padding = value;\n    this.update();\n  }\n  /** Trim transparent borders. This is an expensive operation so only use this if you have to! */\n  get trim() {\n    return this._trim;\n  }\n  set trim(value) {\n    this._trim = value;\n    this.update();\n  }\n  /**\n   * The baseline of the text that is rendered.\n   * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  get textBaseline() {\n    return this._textBaseline;\n  }\n  set textBaseline(value) {\n    this._textBaseline = value;\n    this.update();\n  }\n  /**\n   * How newlines and spaces should be handled.\n   * Default is 'pre' (preserve, preserve).\n   *\n   *  value       | New lines     |   Spaces\n   *  ---         | ---           |   ---\n   * 'normal'     | Collapse      |   Collapse\n   * 'pre'        | Preserve      |   Preserve\n   * 'pre-line'   | Preserve      |   Collapse\n   * @member {'normal'|'pre'|'pre-line'}\n   */\n  get whiteSpace() {\n    return this._whiteSpace;\n  }\n  set whiteSpace(value) {\n    this._whiteSpace = value;\n    this.update();\n  }\n  /** Indicates if word wrap should be used. */\n  get wordWrap() {\n    return this._wordWrap;\n  }\n  set wordWrap(value) {\n    this._wordWrap = value;\n    this.update();\n  }\n  /** The width at which text will wrap, it needs wordWrap to be set to true. */\n  get wordWrapWidth() {\n    return this._wordWrapWidth;\n  }\n  set wordWrapWidth(value) {\n    this._wordWrapWidth = value;\n    this.update();\n  }\n  /** A fillstyle that will be used on the text e.g., 'red', '#00FF00'. */\n  get fill() {\n    return this._originalFill;\n  }\n  set fill(value) {\n    if (value === this._originalFill) return;\n    this._originalFill = value;\n    if (this._isFillStyle(value)) {\n      this._originalFill = this._createProxy({\n        ...GraphicsContext.defaultFillStyle,\n        ...value\n      }, () => {\n        this._fill = toFillStyle({\n          ...this._originalFill\n        }, GraphicsContext.defaultFillStyle);\n      });\n    }\n    this._fill = toFillStyle(value === 0 ? \"black\" : value, GraphicsContext.defaultFillStyle);\n    this.update();\n  }\n  /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n  get stroke() {\n    return this._originalStroke;\n  }\n  set stroke(value) {\n    if (value === this._originalStroke) return;\n    this._originalStroke = value;\n    if (this._isFillStyle(value)) {\n      this._originalStroke = this._createProxy({\n        ...GraphicsContext.defaultStrokeStyle,\n        ...value\n      }, () => {\n        this._stroke = toStrokeStyle({\n          ...this._originalStroke\n        }, GraphicsContext.defaultStrokeStyle);\n      });\n    }\n    this._stroke = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n    this.update();\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this);\n    return this._styleKey;\n  }\n  update() {\n    this._styleKey = null;\n    this.emit(\"update\", this);\n  }\n  /** Resets all properties to the default values */\n  reset() {\n    const defaultStyle = _TextStyle.defaultTextStyle;\n    for (const key in defaultStyle) {\n      this[key] = defaultStyle[key];\n    }\n  }\n  get styleKey() {\n    return this._styleKey || this._generateKey();\n  }\n  /**\n   * Creates a new TextStyle object with the same values as this one.\n   * @returns New cloned TextStyle object\n   */\n  clone() {\n    return new _TextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this._dropShadow ? {\n        ...this._dropShadow\n      } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      leading: this.leading,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      textBaseline: this.textBaseline,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth\n    });\n  }\n  /**\n   * Destroys this text style.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n   */\n  destroy() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.removeAllListeners();\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      if (this._fill?.texture) {\n        this._fill.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalFill?.texture) {\n        this._originalFill.texture.destroy(destroyTextureSource);\n      }\n      if (this._stroke?.texture) {\n        this._stroke.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalStroke?.texture) {\n        this._originalStroke.texture.destroy(destroyTextureSource);\n      }\n    }\n    this._fill = null;\n    this._stroke = null;\n    this.dropShadow = null;\n    this._originalStroke = null;\n    this._originalFill = null;\n  }\n  _createProxy(value, cb) {\n    return new Proxy(value, {\n      set: (target, property, newValue) => {\n        target[property] = newValue;\n        cb?.(property, newValue);\n        this.update();\n        return true;\n      }\n    });\n  }\n  _isFillStyle(value) {\n    return (value ?? null) !== null && !(Color.isColorLike(value) || value instanceof FillGradient || value instanceof FillPattern);\n  }\n};\n/** The default drop shadow settings */\n_TextStyle.defaultDropShadow = {\n  /** Set alpha for the drop shadow */\n  alpha: 1,\n  /** Set a angle of the drop shadow */\n  angle: Math.PI / 6,\n  /** Set a shadow blur radius */\n  blur: 0,\n  /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n  color: \"black\",\n  /** Set a distance of the drop shadow */\n  distance: 5\n};\n/** The default text style settings */\n_TextStyle.defaultTextStyle = {\n  /**\n   * See {@link TextStyle.align}\n   * @type {'left'|'center'|'right'|'justify'}\n   */\n  align: \"left\",\n  /** See {@link TextStyle.breakWords} */\n  breakWords: false,\n  /** See {@link TextStyle.dropShadow} */\n  dropShadow: null,\n  /**\n   * See {@link TextStyle.fill}\n   * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n   */\n  fill: \"black\",\n  /**\n   * See {@link TextStyle.fontFamily}\n   * @type {string|string[]}\n   */\n  fontFamily: \"Arial\",\n  /**\n   * See {@link TextStyle.fontSize}\n   * @type {number|string}\n   */\n  fontSize: 26,\n  /**\n   * See {@link TextStyle.fontStyle}\n   * @type {'normal'|'italic'|'oblique'}\n   */\n  fontStyle: \"normal\",\n  /**\n   * See {@link TextStyle.fontVariant}\n   * @type {'normal'|'small-caps'}\n   */\n  fontVariant: \"normal\",\n  /**\n   * See {@link TextStyle.fontWeight}\n   * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  fontWeight: \"normal\",\n  /** See {@link TextStyle.leading} */\n  leading: 0,\n  /** See {@link TextStyle.letterSpacing} */\n  letterSpacing: 0,\n  /** See {@link TextStyle.lineHeight} */\n  lineHeight: 0,\n  /** See {@link TextStyle.padding} */\n  padding: 0,\n  /**\n   * See {@link TextStyle.stroke}\n   * @type {string|number}\n   */\n  stroke: null,\n  /**\n   * See {@link TextStyle.textBaseline}\n   * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  textBaseline: \"alphabetic\",\n  /** See {@link TextStyle.trim} */\n  trim: false,\n  /**\n   * See {@link TextStyle.whiteSpace}\n   * @type {'normal'|'pre'|'pre-line'}\n   */\n  whiteSpace: \"pre\",\n  /** See {@link TextStyle.wordWrap} */\n  wordWrap: false,\n  /** See {@link TextStyle.wordWrapWidth} */\n  wordWrapWidth: 100\n};\nlet TextStyle = _TextStyle;\nfunction convertV7Tov8Style(style) {\n  const oldStyle = style;\n  if (typeof oldStyle.dropShadow === \"boolean\" && oldStyle.dropShadow) {\n    const defaults = TextStyle.defaultDropShadow;\n    style.dropShadow = {\n      alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n      angle: oldStyle.dropShadowAngle ?? defaults.angle,\n      blur: oldStyle.dropShadowBlur ?? defaults.blur,\n      color: oldStyle.dropShadowColor ?? defaults.color,\n      distance: oldStyle.dropShadowDistance ?? defaults.distance\n    };\n  }\n  if (oldStyle.strokeThickness !== void 0) {\n    deprecation(v8_0_0, \"strokeThickness is now a part of stroke\");\n    const color = oldStyle.stroke;\n    let obj = {};\n    if (Color.isColorLike(color)) {\n      obj.color = color;\n    } else if (color instanceof FillGradient || color instanceof FillPattern) {\n      obj.fill = color;\n    } else if (Object.hasOwnProperty.call(color, \"color\") || Object.hasOwnProperty.call(color, \"fill\")) {\n      obj = color;\n    } else {\n      throw new Error(\"Invalid stroke value.\");\n    }\n    style.stroke = {\n      ...obj,\n      width: oldStyle.strokeThickness\n    };\n  }\n  if (Array.isArray(oldStyle.fillGradientStops)) {\n    deprecation(v8_0_0, \"gradient fill is now a fill pattern: `new FillGradient(...)`\");\n    let fontSize;\n    if (style.fontSize == null) {\n      style.fontSize = TextStyle.defaultTextStyle.fontSize;\n    } else if (typeof style.fontSize === \"string\") {\n      fontSize = parseInt(style.fontSize, 10);\n    } else {\n      fontSize = style.fontSize;\n    }\n    const gradientFill = new FillGradient(0, 0, 0, fontSize * 1.7);\n    const fills = oldStyle.fillGradientStops.map(color => Color.shared.setValue(color).toNumber());\n    fills.forEach((number, index) => {\n      const ratio = index / (fills.length - 1);\n      gradientFill.addColorStop(ratio, number);\n    });\n    style.fill = {\n      fill: gradientFill\n    };\n  }\n}\nexport { TextStyle };","map":{"version":3,"names":["_TextStyle","EventEmitter","constructor","style","arguments","length","undefined","convertV7Tov8Style","fullStyle","defaultTextStyle","key","thisKey","update","align","_align","value","breakWords","_breakWords","dropShadow","_dropShadow","_createProxy","defaultDropShadow","fontFamily","_fontFamily","fontSize","_fontSize","parseInt","fontStyle","_fontStyle","fontVariant","_fontVariant","fontWeight","_fontWeight","leading","_leading","letterSpacing","_letterSpacing","lineHeight","_lineHeight","padding","_padding","trim","_trim","textBaseline","_textBaseline","whiteSpace","_whiteSpace","wordWrap","_wordWrap","wordWrapWidth","_wordWrapWidth","fill","_originalFill","_isFillStyle","GraphicsContext","defaultFillStyle","_fill","toFillStyle","stroke","_originalStroke","defaultStrokeStyle","_stroke","toStrokeStyle","_generateKey","_styleKey","generateTextStyleKey","emit","reset","defaultStyle","styleKey","clone","destroy","options","removeAllListeners","destroyTexture","texture","destroyTextureSource","textureSource","cb","Proxy","set","target","property","newValue","Color","isColorLike","FillGradient","FillPattern","alpha","angle","Math","PI","blur","color","distance","TextStyle","oldStyle","defaults","dropShadowAlpha","dropShadowAngle","dropShadowBlur","dropShadowColor","dropShadowDistance","strokeThickness","deprecation","v8_0_0","obj","Object","hasOwnProperty","call","Error","width","Array","isArray","fillGradientStops","gradientFill","fills","map","shared","setValue","toNumber","forEach","number","index","ratio","addColorStop"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/text/TextStyle.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../color/Color';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../graphics/shared/fill/FillPattern';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext';\nimport {\n    toFillStyle,\n    toStrokeStyle\n} from '../graphics/shared/utils/convertFillInputToFillStyle';\nimport { generateTextStyleKey } from './utils/generateTextStyleKey';\n\nimport type { TextureDestroyOptions, TypeOrBool } from '../container/destroyTypes';\nimport type {\n    ConvertedFillStyle,\n    ConvertedStrokeStyle,\n    FillInput,\n    FillStyle,\n    StrokeInput,\n    StrokeStyle\n} from '../graphics/shared/FillTypes';\n\nexport type TextStyleAlign = 'left' | 'center' | 'right' | 'justify';\nexport type TextStyleFill = string | string[] | number | number[] | CanvasGradient | CanvasPattern;\nexport type TextStyleFontStyle = 'normal' | 'italic' | 'oblique';\nexport type TextStyleFontVariant = 'normal' | 'small-caps';\n// eslint-disable-next-line max-len\nexport type TextStyleFontWeight = 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\nexport type TextStyleLineJoin = 'miter' | 'round' | 'bevel';\nexport type TextStyleTextBaseline = 'alphabetic' | 'top' | 'hanging' | 'middle' | 'ideographic' | 'bottom';\nexport type TextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line';\n\n/**\n * A collection of text related classes.\n * @namespace text\n */\n\n/**\n * A drop shadow effect.\n * @memberof text\n */\nexport type TextDropShadow = {\n    /** Set alpha for the drop shadow  */\n    alpha: number;\n    /** Set a angle of the drop shadow */\n    angle: number;\n    /** Set a shadow blur radius */\n    blur: number;\n    /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n    color: ColorSource;\n    /** Set a distance of the drop shadow */\n    distance: number;\n};\n\n/**\n * Constructor options used for `TextStyle` instances.\n * ```js\n * const textStyle = new TextStyle({\n *    fontSize: 12,\n *    fill: 'black',\n * });\n * ```\n * @see {@link text.TextStyle}\n * @memberof text\n */\nexport interface TextStyleOptions\n{\n    /**\n     * Alignment for multiline text, does not affect single line text\n     * @type {'left'|'center'|'right'|'justify'}\n     */\n    align?: TextStyleAlign;\n    /** Indicates if lines can be wrapped within words, it needs `wordWrap` to be set to `true` */\n    breakWords?: boolean;\n    /** Set a drop shadow for the text */\n    dropShadow?: boolean | Partial<TextDropShadow>;\n    /**\n     * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n     * Can be an array to create a gradient, e.g., `['#000000','#FFFFFF']`\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    fill?: FillInput;\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    fontFamily?: string | string[];\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    fontSize?: number | string;\n    /**\n     * The font style.\n     * @type {'normal'|'italic'|'oblique'}\n     */\n    fontStyle?: TextStyleFontStyle;\n    /**\n     * The font variant.\n     * @type {'normal'|'small-caps'}\n     */\n    fontVariant?: TextStyleFontVariant;\n    /**\n     * The font weight.\n     * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    fontWeight?: TextStyleFontWeight;\n    /** The height of the line, a number that represents the vertical space that a letter uses. */\n    leading?: number;\n    /** The amount of spacing between letters, default is 0 */\n    letterSpacing?: number;\n    /** The line height, a number that represents the vertical space that a letter uses */\n    lineHeight?: number;\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from\n     * happening by adding padding to all sides of the text.\n     */\n    padding?: number;\n    /** A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00' */\n    stroke?: StrokeInput;\n    /**\n     * The baseline of the text that is rendered.\n     * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    textBaseline?: TextStyleTextBaseline;\n    trim?: boolean,\n    /**\n     * Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     * (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve,\n     * collapse). It needs wordWrap to be set to true.\n     * @type {'normal'|'pre'|'pre-line'}\n     */\n    whiteSpace?: TextStyleWhiteSpace;\n    /** Indicates if word wrap should be used */\n    wordWrap?: boolean;\n    /** The width at which text will wrap, it needs wordWrap to be set to true */\n    wordWrapWidth?: number;\n}\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n * @memberof text\n * @example\n * import { TextStyle } from 'pixi.js';\n * const style = new TextStyle({\n *   fontFamily: ['Helvetica', 'Arial', 'sans-serif'],\n *   fontSize: 36,\n * });\n */\nexport class TextStyle extends EventEmitter<{\n    update: TextDropShadow\n}>\n{\n    /** The default drop shadow settings */\n    public static defaultDropShadow: TextDropShadow = {\n        /** Set alpha for the drop shadow */\n        alpha: 1,\n        /** Set a angle of the drop shadow */\n        angle: Math.PI / 6,\n        /** Set a shadow blur radius */\n        blur: 0,\n        /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n        color: 'black',\n        /** Set a distance of the drop shadow */\n        distance: 5,\n    };\n\n    /** The default text style settings */\n    public static defaultTextStyle: TextStyleOptions = {\n        /**\n         * See {@link TextStyle.align}\n         * @type {'left'|'center'|'right'|'justify'}\n         */\n        align: 'left',\n        /** See {@link TextStyle.breakWords} */\n        breakWords: false,\n        /** See {@link TextStyle.dropShadow} */\n        dropShadow:  null,\n        /**\n         * See {@link TextStyle.fill}\n         * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n         */\n        fill: 'black',\n        /**\n         * See {@link TextStyle.fontFamily}\n         * @type {string|string[]}\n         */\n        fontFamily: 'Arial',\n        /**\n         * See {@link TextStyle.fontSize}\n         * @type {number|string}\n         */\n        fontSize: 26,\n        /**\n         * See {@link TextStyle.fontStyle}\n         * @type {'normal'|'italic'|'oblique'}\n         */\n        fontStyle: 'normal',\n        /**\n         * See {@link TextStyle.fontVariant}\n         * @type {'normal'|'small-caps'}\n         */\n        fontVariant: 'normal',\n        /**\n         * See {@link TextStyle.fontWeight}\n         * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n         */\n        fontWeight: 'normal',\n        /** See {@link TextStyle.leading} */\n        leading: 0,\n        /** See {@link TextStyle.letterSpacing} */\n        letterSpacing: 0,\n        /** See {@link TextStyle.lineHeight} */\n        lineHeight: 0,\n        /** See {@link TextStyle.padding} */\n        padding: 0,\n        /**\n         * See {@link TextStyle.stroke}\n         * @type {string|number}\n         */\n        stroke: null,\n        /**\n         * See {@link TextStyle.textBaseline}\n         * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n         */\n        textBaseline: 'alphabetic',\n        /** See {@link TextStyle.trim} */\n        trim: false,\n        /**\n         * See {@link TextStyle.whiteSpace}\n         * @type {'normal'|'pre'|'pre-line'}\n         */\n        whiteSpace: 'pre',\n        /** See {@link TextStyle.wordWrap} */\n        wordWrap: false,\n        /** See {@link TextStyle.wordWrapWidth} */\n        wordWrapWidth: 100,\n    };\n\n    // colors!!\n    public _fill: ConvertedFillStyle;\n    private _originalFill: FillInput;\n\n    public _stroke: ConvertedStrokeStyle;\n    private _originalStroke: StrokeInput;\n\n    private _dropShadow: TextDropShadow;\n\n    private _fontFamily: string | string[];\n    private _fontSize: number;\n    private _fontStyle: TextStyleFontStyle;\n    private _fontVariant: TextStyleFontVariant;\n    private _fontWeight: TextStyleFontWeight;\n\n    private _breakWords: boolean;\n    private _align: TextStyleAlign;\n    private _leading: number;\n    private _letterSpacing: number;\n    private _lineHeight: number;\n\n    private _textBaseline: TextStyleTextBaseline;\n    private _whiteSpace: TextStyleWhiteSpace;\n    private _wordWrap: boolean;\n    private _wordWrapWidth: number;\n\n    private _padding: number;\n\n    protected _styleKey: string;\n    private _trim: boolean;\n\n    constructor(style: Partial<TextStyleOptions> = {})\n    {\n        super();\n\n        convertV7Tov8Style(style);\n\n        const fullStyle = { ...TextStyle.defaultTextStyle, ...style };\n\n        for (const key in fullStyle)\n        {\n            const thisKey = key as keyof typeof this;\n\n            this[thisKey] = fullStyle[key as keyof TextStyleOptions] as any;\n        }\n\n        this.update();\n    }\n\n    /**\n     * Alignment for multiline text, does not affect single line text.\n     * @member {'left'|'center'|'right'|'justify'}\n     */\n    get align(): TextStyleAlign { return this._align; }\n    set align(value: TextStyleAlign) { this._align = value; this.update(); }\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean { return this._breakWords; }\n    set breakWords(value: boolean) { this._breakWords = value; this.update(); }\n    /** Set a drop shadow for the text. */\n    get dropShadow(): TextDropShadow { return this._dropShadow; }\n    set dropShadow(value: boolean | TextDropShadow)\n    {\n        if (value !== null && typeof value === 'object')\n        {\n            this._dropShadow = this._createProxy({ ...TextStyle.defaultDropShadow, ...value });\n        }\n        else\n        {\n            this._dropShadow = value ? this._createProxy({ ...TextStyle.defaultDropShadow }) : null;\n        }\n\n        this.update();\n    }\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    get fontFamily(): string | string[] { return this._fontFamily; }\n    set fontFamily(value: string | string[]) { this._fontFamily = value; this.update(); }\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    get fontSize(): number { return this._fontSize; }\n    set fontSize(value: string | number)\n    {\n        if (typeof value === 'string')\n        {\n            // eg '34px' to number\n            this._fontSize = parseInt(value as string, 10);\n        }\n        else\n        {\n            this._fontSize = value as number;\n        }\n        this.update();\n    }\n    /**\n     * The font style.\n     * @member {'normal'|'italic'|'oblique'}\n     */\n    get fontStyle(): TextStyleFontStyle { return this._fontStyle; }\n    set fontStyle(value: TextStyleFontStyle) { this._fontStyle = value; this.update(); }\n    /**\n     * The font variant.\n     * @member {'normal'|'small-caps'}\n     */\n    get fontVariant(): TextStyleFontVariant { return this._fontVariant; }\n    set fontVariant(value: TextStyleFontVariant) { this._fontVariant = value; this.update(); }\n    /**\n     * The font weight.\n     * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    get fontWeight(): TextStyleFontWeight { return this._fontWeight; }\n    set fontWeight(value: TextStyleFontWeight) { this._fontWeight = value; this.update(); }\n    /** The space between lines. */\n    get leading(): number { return this._leading; }\n    set leading(value: number) { this._leading = value; this.update(); }\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number { return this._letterSpacing; }\n    set letterSpacing(value: number) { this._letterSpacing = value; this.update(); }\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number { return this._lineHeight; }\n    set lineHeight(value: number) { this._lineHeight = value; this.update(); }\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number { return this._padding; }\n    set padding(value: number) { this._padding = value; this.update(); }\n\n    /** Trim transparent borders. This is an expensive operation so only use this if you have to! */\n    get trim(): boolean { return this._trim; }\n    set trim(value: boolean) { this._trim = value; this.update(); }\n    /**\n     * The baseline of the text that is rendered.\n     * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    get textBaseline(): TextStyleTextBaseline { return this._textBaseline; }\n    set textBaseline(value: TextStyleTextBaseline) { this._textBaseline = value; this.update(); }\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     * @member {'normal'|'pre'|'pre-line'}\n     */\n    get whiteSpace(): TextStyleWhiteSpace { return this._whiteSpace; }\n    set whiteSpace(value: TextStyleWhiteSpace) { this._whiteSpace = value; this.update(); }\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean { return this._wordWrap; }\n    set wordWrap(value: boolean) { this._wordWrap = value; this.update(); }\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number { return this._wordWrapWidth; }\n    set wordWrapWidth(value: number) { this._wordWrapWidth = value; this.update(); }\n\n    /** A fillstyle that will be used on the text e.g., 'red', '#00FF00'. */\n    get fill(): FillInput\n    {\n        return this._originalFill;\n    }\n\n    set fill(value: FillInput)\n    {\n        if (value === this._originalFill) return;\n\n        this._originalFill = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalFill = this._createProxy({ ...GraphicsContext.defaultFillStyle, ...value }, () =>\n            {\n                this._fill = toFillStyle(\n                    { ...this._originalFill as FillStyle },\n                    GraphicsContext.defaultFillStyle\n                );\n            });\n        }\n\n        this._fill = toFillStyle(\n            value === 0x0 ? 'black' : value,\n            GraphicsContext.defaultFillStyle\n        );\n        this.update();\n    }\n\n    /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n    get stroke(): StrokeInput\n    {\n        return this._originalStroke;\n    }\n\n    set stroke(value: StrokeInput)\n    {\n        if (value === this._originalStroke) return;\n\n        this._originalStroke = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalStroke = this._createProxy({ ...GraphicsContext.defaultStrokeStyle, ...value }, () =>\n            {\n                this._stroke = toStrokeStyle(\n                    { ...this._originalStroke as StrokeStyle },\n                    GraphicsContext.defaultStrokeStyle\n                );\n            });\n        }\n\n        this._stroke = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n        this.update();\n    }\n\n    protected _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this);\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._styleKey = null;\n        this.emit('update', this);\n    }\n\n    /** Resets all properties to the default values */\n    public reset()\n    {\n        const defaultStyle = TextStyle.defaultTextStyle;\n\n        for (const key in defaultStyle)\n        {\n            this[key as keyof typeof this] = defaultStyle[key as keyof TextStyleOptions] as any;\n        }\n    }\n\n    get styleKey()\n    {\n        return this._styleKey || this._generateKey();\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * @returns New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        return new TextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this._dropShadow ? { ...this._dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            leading: this.leading,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            textBaseline: this.textBaseline,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n        });\n    }\n\n    /**\n     * Destroys this text style.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false)\n    {\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fill?.texture)\n            {\n                this._fill.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalFill as FillStyle)?.texture)\n            {\n                (this._originalFill as FillStyle).texture.destroy(destroyTextureSource);\n            }\n\n            if (this._stroke?.texture)\n            {\n                this._stroke.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalStroke as FillStyle)?.texture)\n            {\n                (this._originalStroke as FillStyle).texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fill = null;\n        this._stroke = null;\n        this.dropShadow = null;\n        this._originalStroke = null;\n        this._originalFill = null;\n    }\n\n    private _createProxy<T extends object>(value: T, cb?: (property: string, newValue: any) => void): T\n    {\n        return new Proxy<T>(value, {\n            set: (target, property, newValue) =>\n            {\n                target[property as keyof T] = newValue;\n                cb?.(property as string, newValue);\n                this.update();\n\n                return true;\n            }\n        });\n    }\n\n    private _isFillStyle(value: FillInput): value is FillStyle\n    {\n        return ((value ?? null) !== null\n            && !(Color.isColorLike(value) || value instanceof FillGradient || value instanceof FillPattern));\n    }\n}\n\nfunction convertV7Tov8Style(style: TextStyleOptions)\n{\n    const oldStyle = style as TextStyleOptions & {\n        dropShadowAlpha?: number;\n        dropShadowAngle?: number;\n        dropShadowBlur?: number;\n        dropShadowColor?: number;\n        dropShadowDistance?: number;\n        fillGradientStops?: number[];\n        strokeThickness?: number;\n    };\n\n    if (typeof oldStyle.dropShadow === 'boolean' && oldStyle.dropShadow)\n    {\n        const defaults = TextStyle.defaultDropShadow;\n\n        style.dropShadow = {\n            alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n            angle: oldStyle.dropShadowAngle ?? defaults.angle,\n            blur: oldStyle.dropShadowBlur ?? defaults.blur,\n            color: oldStyle.dropShadowColor ?? defaults.color,\n            distance:   oldStyle.dropShadowDistance ?? defaults.distance,\n        };\n    }\n\n    if (oldStyle.strokeThickness !== undefined)\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'strokeThickness is now a part of stroke');\n        // #endif\n\n        const color = oldStyle.stroke;\n        let obj: FillStyle = {};\n\n        // handles stroke: 0x0, stroke: { r: 0, g: 0, b: 0, a: 0 } stroke: new Color(0x0)\n        if (Color.isColorLike(color as ColorSource))\n        {\n            obj.color = color as ColorSource;\n        }\n        // handles stroke: new FillGradient()\n        else if (color instanceof FillGradient || color instanceof FillPattern)\n        {\n            obj.fill = color as FillGradient | FillPattern;\n        }\n        // handles stroke: { color: 0x0 } or stroke: { fill: new FillGradient() }\n        else if (Object.hasOwnProperty.call(color, 'color') || Object.hasOwnProperty.call(color, 'fill'))\n        {\n            obj = color as FillStyle;\n        }\n        else\n        {\n            throw new Error('Invalid stroke value.');\n        }\n\n        style.stroke = {\n            ...obj,\n            width: oldStyle.strokeThickness\n        };\n    }\n\n    if (Array.isArray(oldStyle.fillGradientStops))\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'gradient fill is now a fill pattern: `new FillGradient(...)`');\n        // #endif\n\n        let fontSize: number;\n\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (style.fontSize == null)\n        {\n            style.fontSize = TextStyle.defaultTextStyle.fontSize;\n        }\n        else if (typeof style.fontSize === 'string')\n        {\n            // eg '34px' to number\n            fontSize = parseInt(style.fontSize as string, 10);\n        }\n        else\n        {\n            fontSize = style.fontSize as number;\n        }\n\n        const gradientFill = new FillGradient(0, 0, 0, fontSize * 1.7);\n\n        const fills: number[] = oldStyle.fillGradientStops\n            .map((color: ColorSource) => Color.shared.setValue(color).toNumber());\n\n        fills.forEach((number, index) =>\n        {\n            const ratio = index / (fills.length - 1);\n\n            gradientFill.addColorStop(ratio, number);\n        });\n\n        style.fill = {\n            fill: gradientFill\n        };\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}