{"ast":null,"code":"import { ExtensionType, extensions } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { DefaultBatcher } from './DefaultBatcher.mjs';\n\"use strict\";\nconst _BatcherPipe = class _BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._batchersByInstructionSet = /* @__PURE__ */Object.create(null);\n    /** A record of all active batchers, keyed by their names */\n    this._activeBatches = /* @__PURE__ */Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init?.(this);\n  }\n  static getBatcher(name) {\n    return new this._availableBatchers[name]();\n  }\n  buildStart(instructionSet) {\n    let batchers = this._batchersByInstructionSet[instructionSet.uid];\n    if (!batchers) {\n      batchers = this._batchersByInstructionSet[instructionSet.uid] = /* @__PURE__ */Object.create(null);\n      batchers.default || (batchers.default = new DefaultBatcher());\n    }\n    this._activeBatches = batchers;\n    this._activeBatch = this._activeBatches.default;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].begin();\n    }\n  }\n  addToBatch(batchableObject, instructionSet) {\n    if (this._activeBatch.name !== batchableObject.batcherName) {\n      this._activeBatch.break(instructionSet);\n      let batch = this._activeBatches[batchableObject.batcherName];\n      if (!batch) {\n        batch = this._activeBatches[batchableObject.batcherName] = _BatcherPipe.getBatcher(batchableObject.batcherName);\n        batch.begin();\n      }\n      this._activeBatch = batch;\n    }\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    this._activeBatch.break(instructionSet);\n    const batches = this._activeBatches;\n    for (const i in batches) {\n      const batch = batches[i];\n      const geometry = batch.geometry;\n      geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n      geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n    }\n  }\n  upload(instructionSet) {\n    const batchers = this._batchersByInstructionSet[instructionSet.uid];\n    for (const i in batchers) {\n      const batcher = batchers[i];\n      const geometry = batcher.geometry;\n      if (batcher.dirty) {\n        batcher.dirty = false;\n        geometry.buffers[0].update(batcher.attributeSize * 4);\n      }\n    }\n  }\n  execute(batch) {\n    if (batch.action === \"startBatch\") {\n      const batcher = batch.batcher;\n      const geometry = batcher.geometry;\n      const shader = batcher.shader;\n      this._adaptor.start(this, geometry, shader);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor = null;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].destroy();\n    }\n    this._activeBatches = null;\n  }\n};\n/** @ignore */\n_BatcherPipe.extension = {\n  type: [ExtensionType.WebGLPipes, ExtensionType.WebGPUPipes, ExtensionType.CanvasPipes],\n  name: \"batch\"\n};\n_BatcherPipe._availableBatchers = /* @__PURE__ */Object.create(null);\nlet BatcherPipe = _BatcherPipe;\nextensions.handleByMap(ExtensionType.Batcher, BatcherPipe._availableBatchers);\nextensions.add(DefaultBatcher);\nexport { BatcherPipe };","map":{"version":3,"names":["_BatcherPipe","constructor","renderer","adaptor","state","State","for2d","_batchersByInstructionSet","Object","create","_activeBatches","_adaptor","init","getBatcher","name","_availableBatchers","buildStart","instructionSet","batchers","uid","default","DefaultBatcher","_activeBatch","i","begin","addToBatch","batchableObject","batcherName","break","batch","add","buildEnd","batches","geometry","indexBuffer","setDataWithSize","indexSize","buffers","attributeBuffer","float32View","attributeSize","upload","batcher","dirty","update","execute","action","shader","start","destroy","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","BatcherPipe","extensions","handleByMap","Batcher"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/rendering/batcher/shared/BatcherPipe.ts"],"sourcesContent":["import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { DefaultBatcher } from './DefaultBatcher';\n\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Renderer } from '../../renderers/types';\nimport type { Batch, BatchableElement, Batcher } from './Batcher';\n\nexport interface BatcherAdaptor\n{\n    start(batchPipe: BatcherPipe, geometry: Geometry, shader: Shader): void\n    init?(batchPipe: BatcherPipe): void;\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    contextChange?(): void;\n}\n\n/**\n * A pipe that batches elements into batches and sends them to the renderer.\n *\n * You can install new Batchers using ExtensionType.Batcher. Each render group will\n * have a default batcher and any required ones will be created on demand.\n * @memberof rendering\n */\nexport class BatcherPipe implements InstructionPipe<Batch>, BatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'batch',\n    } as const;\n\n    public state: State = State.for2d();\n    public renderer: Renderer;\n\n    private readonly _batchersByInstructionSet: Record<number, Record<string, Batcher>> = Object.create(null);\n\n    private _adaptor: BatcherAdaptor;\n\n    /** A record of all active batchers, keyed by their names */\n    private _activeBatches: Record<string, Batcher> = Object.create(null);\n\n    /** The currently active batcher being used to batch elements */\n    private _activeBatch: Batcher;\n\n    public static _availableBatchers: Record<string, new () => Batcher> = Object.create(null);\n\n    public static getBatcher(name: string): Batcher\n    {\n        return new this._availableBatchers[name as keyof typeof this._availableBatchers]();\n    }\n\n    constructor(renderer: Renderer, adaptor: BatcherAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init?.(this);\n    }\n\n    public buildStart(instructionSet: InstructionSet)\n    {\n        let batchers = this._batchersByInstructionSet[instructionSet.uid];\n\n        if (!batchers)\n        {\n            batchers = this._batchersByInstructionSet[instructionSet.uid] = Object.create(null);\n            batchers.default ||= new DefaultBatcher();\n        }\n\n        this._activeBatches = batchers;\n\n        this._activeBatch = this._activeBatches.default;\n\n        for (const i in this._activeBatches)\n        {\n            this._activeBatches[i].begin();\n        }\n    }\n\n    public addToBatch(batchableObject: BatchableElement, instructionSet: InstructionSet)\n    {\n        if (this._activeBatch.name !== batchableObject.batcherName)\n        {\n            this._activeBatch.break(instructionSet);\n\n            let batch = this._activeBatches[batchableObject.batcherName];\n\n            if (!batch)\n            {\n                batch = this._activeBatches[batchableObject.batcherName]\n                    = BatcherPipe.getBatcher(batchableObject.batcherName);\n                batch.begin();\n            }\n\n            this._activeBatch = batch;\n        }\n\n        this._activeBatch.add(batchableObject);\n    }\n\n    public break(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n    }\n\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n\n        const batches = this._activeBatches;\n\n        for (const i in batches)\n        {\n            const batch = batches[i as keyof typeof batches];\n            const geometry = batch.geometry;\n\n            geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n\n            geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n        }\n    }\n\n    public upload(instructionSet: InstructionSet)\n    {\n        const batchers = this._batchersByInstructionSet[instructionSet.uid];\n\n        for (const i in batchers)\n        {\n            const batcher = batchers[i as keyof typeof batchers];\n            const geometry = batcher.geometry;\n\n            if (batcher.dirty)\n            {\n                batcher.dirty = false;\n\n                geometry.buffers[0].update(batcher.attributeSize * 4);\n            }\n        }\n    }\n\n    public execute(batch: Batch)\n    {\n        if (batch.action === 'startBatch')\n        {\n            const batcher = batch.batcher;\n            const geometry = batcher.geometry;\n            const shader = batcher.shader;\n\n            this._adaptor.start(this, geometry, shader);\n        }\n\n        this._adaptor.execute(this, batch);\n    }\n\n    public destroy()\n    {\n        this.state = null;\n        this.renderer = null;\n\n        this._adaptor = null;\n\n        for (const i in this._activeBatches)\n        {\n            this._activeBatches[i].destroy();\n        }\n\n        this._activeBatches = null;\n    }\n}\n\nextensions.handleByMap(ExtensionType.Batcher, BatcherPipe._availableBatchers);\n\nextensions.add(DefaultBatcher);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}