{"ast":null,"code":"import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { buildInstructions } from './utils/buildInstructions.mjs';\nimport { clearList } from './utils/clearList.mjs';\nimport { collectRenderGroups } from './utils/collectRenderGroups.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms.mjs';\nimport { validateRenderables } from './utils/validateRenderables.mjs';\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({\n    container,\n    transform\n  }) {\n    container.isRenderGroup = true;\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    const renderGroups = collectRenderGroups(container.renderGroup, []);\n    let originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    for (let i = 0; i < renderGroups.length; i++) {\n      const renderGroup = renderGroups[i];\n      renderGroup.runOnRender();\n      renderGroup.instructionSet.renderPipes = renderPipes;\n      if (!renderGroup.structureDidChange) {\n        validateRenderables(renderGroup, renderPipes);\n      } else {\n        clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n      }\n      updateRenderGroupTransforms(renderGroup);\n      if (renderGroup.structureDidChange) {\n        renderGroup.structureDidChange = false;\n        buildInstructions(renderGroup, renderer);\n      } else {\n        updateRenderables(renderGroup);\n      }\n      renderGroup.childrenRenderablesToUpdate.index = 0;\n      renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    }\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [ExtensionType.WebGLSystem, ExtensionType.WebGPUSystem, ExtensionType.CanvasSystem],\n  name: \"renderGroup\"\n};\nfunction updateRenderables(renderGroup) {\n  const {\n    list,\n    index\n  } = renderGroup.childrenRenderablesToUpdate;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    if (container.didViewUpdate) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n  clearList(list, index);\n}\nexport { RenderGroupSystem };","map":{"version":3,"names":["tempMatrix","Matrix","RenderGroupSystem","constructor","renderer","_renderer","render","container","transform","isRenderGroup","parent","renderGroupParent","renderGroup","renderGroups","collectRenderGroups","originalLocalTransform","copyFrom","localTransform","renderPipes","i","length","runOnRender","instructionSet","structureDidChange","validateRenderables","clearList","childrenRenderablesToUpdate","list","updateRenderGroupTransforms","buildInstructions","updateRenderables","index","batch","upload","globalUniforms","start","worldTransformMatrix","worldTransform","worldColor","worldColorAlpha","executeInstructions","uniformBatch","renderEnd","destroy","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","CanvasSystem","name","didViewUpdate","updateRenderable"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/container/RenderGroupSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { buildInstructions } from './utils/buildInstructions';\nimport { clearList } from './utils/clearList';\nimport { collectRenderGroups } from './utils/collectRenderGroups';\nimport { executeInstructions } from './utils/executeInstructions';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms';\nimport { validateRenderables } from './utils/validateRenderables';\n\nimport type { WebGPURenderer } from '../../rendering/renderers/gpu/WebGPURenderer';\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { Container } from './Container';\nimport type { RenderGroup } from './RenderGroup';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class RenderGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected render({ container, transform }: {container: Container, transform: Matrix}): void\n    {\n        container.isRenderGroup = true;\n\n        const parent = container.parent;\n        const renderGroupParent = container.renderGroup.renderGroupParent;\n\n        container.parent = null;\n        container.renderGroup.renderGroupParent = null;\n\n        const renderer = this._renderer;\n\n        // collect all the renderGroups in the scene and then render them one by one..\n        const renderGroups = collectRenderGroups(container.renderGroup, []);\n\n        let originalLocalTransform: Matrix = tempMatrix;\n\n        if (transform)\n        {\n            originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n            container.renderGroup.localTransform.copyFrom(transform);\n        }\n\n        const renderPipes = (renderer as WebGPURenderer).renderPipes;\n\n        for (let i = 0; i < renderGroups.length; i++)\n        {\n            const renderGroup = renderGroups[i];\n\n            renderGroup.runOnRender();\n\n            renderGroup.instructionSet.renderPipes = renderPipes;\n\n            if (!renderGroup.structureDidChange)\n            {\n                // phase 1 - validate all the renderables\n                validateRenderables(renderGroup, renderPipes);\n            }\n            else\n            {\n                clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n            }\n\n            // phase 2 - update all the transforms\n            // including updating the renderables..\n            updateRenderGroupTransforms(renderGroup);\n\n            if (renderGroup.structureDidChange)\n            {\n                renderGroup.structureDidChange = false;\n\n                // build the renderables\n                buildInstructions(renderGroup, renderer);\n            }\n            else\n            {\n                // update remaining renderables\n                updateRenderables(renderGroup);\n            }\n\n            // reset the renderables to update\n            renderGroup.childrenRenderablesToUpdate.index = 0;\n\n            // upload all the things!\n            renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n        }\n\n        renderer.globalUniforms.start({\n            worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n            worldColor: container.renderGroup.worldColorAlpha,\n\n        });\n\n        executeInstructions(container.renderGroup, renderPipes);\n\n        // TODO need to add some events / runners for things like this to hook up to\n        if (renderPipes.uniformBatch)\n        {\n            renderPipes.uniformBatch.renderEnd();\n        }\n\n        if (transform)\n        {\n            container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n        }\n\n        container.parent = parent;\n        container.renderGroup.renderGroupParent = renderGroupParent;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n\nfunction updateRenderables(renderGroup: RenderGroup)\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        if (container.didViewUpdate)\n        {\n            renderGroup.updateRenderable(container);\n        }\n    }\n\n    clearList(list, index);\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}