{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Batcher } from './Batcher.mjs';\nimport { BatchGeometry } from './BatchGeometry.mjs';\nimport { DefaultShader } from './DefaultShader.mjs';\n\"use strict\";\nlet defaultShader = null;\nconst _DefaultBatcher = class _DefaultBatcher extends Batcher {\n  constructor() {\n    super(...arguments);\n    this.geometry = new BatchGeometry();\n    this.shader = defaultShader || (defaultShader = new DefaultShader(this.maxTextures));\n    this.name = _DefaultBatcher.extension.name;\n    /** The size of one attribute. 1 = 32 bit. x, y, u, v, color, textureIdAndRound -> total = 6 */\n    this.vertexSize = 6;\n  }\n  /**\n   * Packs the attributes of a DefaultBatchableMeshElement into the provided views.\n   * @param element - The DefaultBatchableMeshElement to pack.\n   * @param float32View - The Float32Array view to pack into.\n   * @param uint32View - The Uint32Array view to pack into.\n   * @param index - The starting index in the views.\n   * @param textureId - The texture ID to use.\n   */\n  packAttributes(element, float32View, uint32View, index, textureId) {\n    const textureIdAndRound = textureId << 16 | element.roundPixels & 65535;\n    const wt = element.transform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const {\n      positions,\n      uvs\n    } = element;\n    const argb = element.color;\n    const offset = element.attributeOffset;\n    const end = offset + element.attributeSize;\n    for (let i = offset; i < end; i++) {\n      const i2 = i * 2;\n      const x = positions[i2];\n      const y = positions[i2 + 1];\n      float32View[index++] = a * x + c * y + tx;\n      float32View[index++] = d * y + b * x + ty;\n      float32View[index++] = uvs[i2];\n      float32View[index++] = uvs[i2 + 1];\n      uint32View[index++] = argb;\n      uint32View[index++] = textureIdAndRound;\n    }\n  }\n  /**\n   * Packs the attributes of a DefaultBatchableQuadElement into the provided views.\n   * @param element - The DefaultBatchableQuadElement to pack.\n   * @param float32View - The Float32Array view to pack into.\n   * @param uint32View - The Uint32Array view to pack into.\n   * @param index - The starting index in the views.\n   * @param textureId - The texture ID to use.\n   */\n  packQuadAttributes(element, float32View, uint32View, index, textureId) {\n    const texture = element.texture;\n    const wt = element.transform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const bounds = element.bounds;\n    const w0 = bounds.maxX;\n    const w1 = bounds.minX;\n    const h0 = bounds.maxY;\n    const h1 = bounds.minY;\n    const uvs = texture.uvs;\n    const argb = element.color;\n    const textureIdAndRound = textureId << 16 | element.roundPixels & 65535;\n    float32View[index + 0] = a * w1 + c * h1 + tx;\n    float32View[index + 1] = d * h1 + b * w1 + ty;\n    float32View[index + 2] = uvs.x0;\n    float32View[index + 3] = uvs.y0;\n    uint32View[index + 4] = argb;\n    uint32View[index + 5] = textureIdAndRound;\n    float32View[index + 6] = a * w0 + c * h1 + tx;\n    float32View[index + 7] = d * h1 + b * w0 + ty;\n    float32View[index + 8] = uvs.x1;\n    float32View[index + 9] = uvs.y1;\n    uint32View[index + 10] = argb;\n    uint32View[index + 11] = textureIdAndRound;\n    float32View[index + 12] = a * w0 + c * h0 + tx;\n    float32View[index + 13] = d * h0 + b * w0 + ty;\n    float32View[index + 14] = uvs.x2;\n    float32View[index + 15] = uvs.y2;\n    uint32View[index + 16] = argb;\n    uint32View[index + 17] = textureIdAndRound;\n    float32View[index + 18] = a * w1 + c * h0 + tx;\n    float32View[index + 19] = d * h0 + b * w1 + ty;\n    float32View[index + 20] = uvs.x3;\n    float32View[index + 21] = uvs.y3;\n    uint32View[index + 22] = argb;\n    uint32View[index + 23] = textureIdAndRound;\n  }\n};\n/** @ignore */\n_DefaultBatcher.extension = {\n  type: [ExtensionType.Batcher],\n  name: \"default\"\n};\nlet DefaultBatcher = _DefaultBatcher;\nexport { DefaultBatcher };","map":{"version":3,"names":["defaultShader","_DefaultBatcher","Batcher","constructor","arguments","geometry","BatchGeometry","shader","DefaultShader","maxTextures","name","extension","vertexSize","packAttributes","element","float32View","uint32View","index","textureId","textureIdAndRound","roundPixels","wt","transform","a","b","c","d","tx","ty","positions","uvs","argb","color","offset","attributeOffset","end","attributeSize","i","i2","x","y","packQuadAttributes","texture","bounds","w0","maxX","w1","minX","h0","maxY","h1","minY","x0","y0","x1","y1","x2","y2","x3","y3","type","ExtensionType","DefaultBatcher"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/rendering/batcher/shared/DefaultBatcher.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Batcher } from './Batcher';\nimport { BatchGeometry } from './BatchGeometry';\nimport { DefaultShader } from './DefaultShader';\n\nimport type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { BatchableMeshElement, BatchableQuadElement } from './Batcher';\n\nlet defaultShader: Shader = null;\n\n/**\n * Represents the common elements for default batch rendering.\n * This interface defines the properties that are used by the DefaultBatcher\n * to render elements efficiently in a batch.\n * @memberof rendering\n */\nexport interface DefaultBatchElements\n{\n    /**\n     * The color of the element that will be multiplied with the texture color.\n     * This is typically represented as a 32-bit integer in RGBA format.\n     */\n    color: number;\n\n    /**\n     * Determines whether the element should be rounded to the nearest pixel.\n     * - 0: No rounding (default)\n     * - 1: Round to nearest pixel\n     * This can help with visual consistency, especially for pixel art styles.\n     */\n    roundPixels: 0 | 1;\n\n    /**\n     * The transform matrix of the element.\n     * This matrix represents the position, scale, rotation, and skew of the element.\n     */\n    transform: Matrix;\n}\n\n/**\n * Represents a batchable quad element with default batch properties.\n * @memberof rendering\n */\nexport interface DefaultBatchableQuadElement extends BatchableQuadElement, DefaultBatchElements {}\n\n/**\n * Represents a batchable mesh element with default batch properties.\n * @memberof rendering\n */\nexport interface DefaultBatchableMeshElement extends BatchableMeshElement, DefaultBatchElements {}\n\n/**\n * The default batcher is used to batch quads and meshes. This batcher will batch the following elements:\n * - tints\n * - roundPixels\n * - texture\n * - transform\n * @memberof rendering\n */\nexport class DefaultBatcher extends Batcher\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.Batcher,\n        ],\n        name: 'default',\n    } as const;\n\n    public geometry = new BatchGeometry();\n    public shader = defaultShader || (defaultShader = new DefaultShader(this.maxTextures));\n\n    public name = DefaultBatcher.extension.name;\n\n    /** The size of one attribute. 1 = 32 bit. x, y, u, v, color, textureIdAndRound -> total = 6 */\n    public vertexSize = 6;\n\n    /**\n     * Packs the attributes of a DefaultBatchableMeshElement into the provided views.\n     * @param element - The DefaultBatchableMeshElement to pack.\n     * @param float32View - The Float32Array view to pack into.\n     * @param uint32View - The Uint32Array view to pack into.\n     * @param index - The starting index in the views.\n     * @param textureId - The texture ID to use.\n     */\n    public packAttributes(\n        element: DefaultBatchableMeshElement,\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const textureIdAndRound = (textureId << 16) | (element.roundPixels & 0xFFFF);\n\n        const wt = element.transform;\n\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const { positions, uvs } = element;\n\n        const argb = element.color;\n\n        const offset = element.attributeOffset;\n        const end = offset + element.attributeSize;\n\n        for (let i = offset; i < end; i++)\n        {\n            const i2 = i * 2;\n\n            const x = positions[i2];\n            const y = positions[(i2) + 1];\n\n            float32View[index++] = (a * x) + (c * y) + tx;\n            float32View[index++] = (d * y) + (b * x) + ty;\n\n            float32View[index++] = uvs[i2];\n            float32View[index++] = uvs[(i2) + 1];\n\n            uint32View[index++] = argb;\n            uint32View[index++] = textureIdAndRound;\n        }\n    }\n\n    /**\n     * Packs the attributes of a DefaultBatchableQuadElement into the provided views.\n     * @param element - The DefaultBatchableQuadElement to pack.\n     * @param float32View - The Float32Array view to pack into.\n     * @param uint32View - The Uint32Array view to pack into.\n     * @param index - The starting index in the views.\n     * @param textureId - The texture ID to use.\n     */\n    public packQuadAttributes(\n        element: DefaultBatchableQuadElement,\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const texture = element.texture;\n\n        const wt = element.transform;\n\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const bounds = element.bounds;\n\n        const w0 = bounds.maxX;\n        const w1 = bounds.minX;\n        const h0 = bounds.maxY;\n        const h1 = bounds.minY;\n\n        const uvs = texture.uvs;\n\n        // _ _ _ _\n        // a b g r\n        const argb = element.color;\n\n        const textureIdAndRound = (textureId << 16) | (element.roundPixels & 0xFFFF);\n\n        float32View[index + 0] = (a * w1) + (c * h1) + tx;\n        float32View[index + 1] = (d * h1) + (b * w1) + ty;\n\n        float32View[index + 2] = uvs.x0;\n        float32View[index + 3] = uvs.y0;\n\n        uint32View[index + 4] = argb;\n        uint32View[index + 5] = textureIdAndRound;\n\n        // xy\n        float32View[index + 6] = (a * w0) + (c * h1) + tx;\n        float32View[index + 7] = (d * h1) + (b * w0) + ty;\n\n        float32View[index + 8] = uvs.x1;\n        float32View[index + 9] = uvs.y1;\n\n        uint32View[index + 10] = argb;\n        uint32View[index + 11] = textureIdAndRound;\n\n        // xy\n        float32View[index + 12] = (a * w0) + (c * h0) + tx;\n        float32View[index + 13] = (d * h0) + (b * w0) + ty;\n\n        float32View[index + 14] = uvs.x2;\n        float32View[index + 15] = uvs.y2;\n\n        uint32View[index + 16] = argb;\n        uint32View[index + 17] = textureIdAndRound;\n\n        // xy\n        float32View[index + 18] = (a * w1) + (c * h0) + tx;\n        float32View[index + 19] = (d * h0) + (b * w1) + ty;\n\n        float32View[index + 20] = uvs.x3;\n        float32View[index + 21] = uvs.y3;\n\n        uint32View[index + 22] = argb;\n        uint32View[index + 23] = textureIdAndRound;\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}