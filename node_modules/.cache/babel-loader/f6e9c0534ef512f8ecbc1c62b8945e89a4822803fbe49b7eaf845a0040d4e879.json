{"ast":null,"code":"import { Cache } from '../../assets/cache/Cache.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { DynamicBitmapFont } from './DynamicBitmapFont.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\"use strict\";\nlet fontCount = 0;\nclass BitmapFontManagerClass {\n  constructor() {\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    this.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"];\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    this.NUMERIC = [[\"0\", \"9\"]];\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    this.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"];\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    this.ASCII = [[\" \", \"~\"]];\n    /** Default options for installing a new BitmapFont. */\n    this.defaultOptions = {\n      chars: this.ALPHANUMERIC,\n      resolution: 1,\n      padding: 4,\n      skipKerning: false\n    };\n  }\n  /**\n   * Get a font for the specified text and style.\n   * @param text - The text to get the font for\n   * @param style - The style to use\n   */\n  getFont(text, style) {\n    let fontFamilyKey = `${style.fontFamily}-bitmap`;\n    let overrideFill = true;\n    if (style._fill.fill && !style._stroke) {\n      fontFamilyKey += style._fill.fill.styleKey;\n      overrideFill = false;\n    } else if (style._stroke || style.dropShadow) {\n      let key = style.styleKey;\n      key = key.substring(0, key.lastIndexOf(\"-\"));\n      fontFamilyKey = `${key}-bitmap`;\n      overrideFill = false;\n    }\n    if (!Cache.has(fontFamilyKey)) {\n      const fnt = new DynamicBitmapFont({\n        style,\n        overrideFill,\n        overrideSize: true,\n        ...this.defaultOptions\n      });\n      fontCount++;\n      if (fontCount > 50) {\n        warn(\"BitmapText\", `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n      }\n      fnt.once(\"destroy\", () => {\n        fontCount--;\n        Cache.remove(fontFamilyKey);\n      });\n      Cache.set(fontFamilyKey, fnt);\n    }\n    const dynamicFont = Cache.get(fontFamilyKey);\n    dynamicFont.ensureCharacters?.(text);\n    return dynamicFont;\n  }\n  /**\n   * Get the layout of a text for the specified style.\n   * @param text - The text to get the layout for\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  getLayout(text, style, trimEnd = true) {\n    const bitmapFont = this.getFont(text, style);\n    return getBitmapTextLayout([...text], style, bitmapFont, trimEnd);\n  }\n  /**\n   * Measure the text using the specified style.\n   * @param text - The text to measure\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  measureText(text, style, trimEnd = true) {\n    return this.getLayout(text, style, trimEnd);\n  }\n  // eslint-disable-next-line max-len\n  install(...args) {\n    let options = args[0];\n    if (typeof options === \"string\") {\n      options = {\n        name: options,\n        style: args[1],\n        chars: args[2]?.chars,\n        resolution: args[2]?.resolution,\n        padding: args[2]?.padding,\n        skipKerning: args[2]?.skipKerning\n      };\n      deprecation(v8_0_0, \"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})\");\n    }\n    const name = options?.name;\n    if (!name) {\n      throw new Error(\"[BitmapFontManager] Property `name` is required.\");\n    }\n    options = {\n      ...this.defaultOptions,\n      ...options\n    };\n    const textStyle = options.style;\n    const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n    const overrideFill = style._fill.fill !== null && style._fill.fill !== void 0;\n    const font = new DynamicBitmapFont({\n      style,\n      overrideFill,\n      skipKerning: options.skipKerning,\n      padding: options.padding,\n      resolution: options.resolution,\n      overrideSize: false\n    });\n    const flatChars = resolveCharacters(options.chars);\n    font.ensureCharacters(flatChars.join(\"\"));\n    Cache.set(`${name}-bitmap`, font);\n    font.once(\"destroy\", () => Cache.remove(`${name}-bitmap`));\n    return font;\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  uninstall(name) {\n    const cacheKey = `${name}-bitmap`;\n    const font = Cache.get(cacheKey);\n    if (font) {\n      Cache.remove(cacheKey);\n      font.destroy();\n    }\n  }\n}\nconst BitmapFontManager = new BitmapFontManagerClass();\nexport { BitmapFontManager };","map":{"version":3,"names":["fontCount","BitmapFontManagerClass","constructor","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","defaultOptions","chars","resolution","padding","skipKerning","getFont","text","style","fontFamilyKey","fontFamily","overrideFill","_fill","fill","_stroke","styleKey","dropShadow","key","substring","lastIndexOf","Cache","has","fnt","DynamicBitmapFont","overrideSize","warn","once","remove","set","dynamicFont","get","ensureCharacters","getLayout","trimEnd","bitmapFont","getBitmapTextLayout","measureText","install","args","options","name","deprecation","v8_0_0","Error","textStyle","TextStyle","font","flatChars","resolveCharacters","join","uninstall","cacheKey","destroy","BitmapFontManager"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/text-bitmap/BitmapFontManager.ts"],"sourcesContent":["import { Cache } from '../../assets/cache/Cache';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { DynamicBitmapFont } from './DynamicBitmapFont';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { TextStyleOptions } from '../text/TextStyle';\nimport type { BitmapFont } from './BitmapFont';\nimport type { BitmapTextLayoutData } from './utils/getBitmapTextLayout';\n\nlet fontCount = 0;\n\n/**\n *\n * The options for installing a new BitmapFont. Once installed the font will be available for use in the BitmapText.\n * It can be accessed by the `fontFamily` property of the TextStyle.\n *\n * Install a new BitmapFont will create the characters provided for the font and store them in the cache.\n * But don't worry, if a character is requested that hasn't been generated yet, it will be created on the fly.\n * @memberof text\n */\nexport interface BitmapFontInstallOptions\n{\n    /** the name of the font, this will be the name you use in the fontFamily of text style to access this font */\n    name?: string;\n    /**\n     * Characters included in the font set. You can also use ranges.\n     * For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n    /**\n     * Render resolution for glyphs.\n     * @default 1\n     */\n    resolution?: number;\n    /**\n     * Padding between glyphs on texture atlas. Lower values could mean more visual artifacts\n     * and bleeding from other glyphs, larger values increase the space required on the texture.\n     * @default 4\n     */\n    padding?: number;\n    /**\n     * Skip generation of kerning information for the BitmapFont.\n     * If true, this could potentially increase the performance, but may impact the rendered text appearance.\n     * @default false\n     */\n    skipKerning?: boolean;\n    /** Style options to render with BitmapFont. */\n    style?: TextStyle | TextStyleOptions;\n}\n\n/**\n * The BitmapFontManager is a helper that exists to install and uninstall fonts\n * into the cache for BitmapText objects.\n * @memberof text\n * @name BitmapFontManager\n * @example\n * import { BitmapFontManager, BitmapText } from 'pixi.js';\n *\n * BitmapFontManager.install({\n *   name: 'TitleFont',\n *   style: {}\n * });\n *\n * const title = new BitmapText({ text: 'This is the title', style: { fontFamily: 'TitleFont' }});\n */\nclass BitmapFontManagerClass\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public readonly ASCII = [[' ', '~']];\n\n    /** Default options for installing a new BitmapFont. */\n    public defaultOptions: Omit<BitmapFontInstallOptions, 'style'> = {\n        chars: this.ALPHANUMERIC,\n        resolution: 1,\n        padding: 4,\n        skipKerning: false,\n    };\n\n    /**\n     * Get a font for the specified text and style.\n     * @param text - The text to get the font for\n     * @param style - The style to use\n     */\n    public getFont(text: string, style: TextStyle): BitmapFont\n    {\n        let fontFamilyKey = `${style.fontFamily as string}-bitmap`;\n        let overrideFill = true;\n\n        // assuming there is no texture we can use a tint!\n        if (style._fill.fill && !style._stroke)\n        {\n            fontFamilyKey += style._fill.fill.styleKey;\n            overrideFill = false;\n        }\n        else if (style._stroke || style.dropShadow)\n        {\n            // if there is a stoke, we need to use the style key as this the font generated cannot be tinted\n            // due to the fact the font has at least two colors.\n            let key = style.styleKey;\n\n            // remove the font size..\n            key = key.substring(0, key.lastIndexOf('-'));\n\n            fontFamilyKey = `${key}-bitmap`;\n            overrideFill = false;\n        }\n\n        // first get us the the right font...\n        if (!Cache.has(fontFamilyKey))\n        {\n            const fnt = new DynamicBitmapFont({\n                style,\n                overrideFill,\n                overrideSize: true,\n                ...this.defaultOptions,\n            });\n\n            fontCount++;\n\n            // warn users if they have created too many dynamic fonts\n            if (fontCount > 50)\n            {\n                // eslint-disable-next-line max-len\n                warn('BitmapText', `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n            }\n\n            fnt.once('destroy', () =>\n            {\n                fontCount--;\n                Cache.remove(fontFamilyKey);\n            });\n\n            Cache.set(\n                fontFamilyKey as string,\n                fnt\n            );\n        }\n\n        const dynamicFont = Cache.get(fontFamilyKey);\n\n        (dynamicFont as DynamicBitmapFont).ensureCharacters?.(text);\n\n        return dynamicFont;\n    }\n\n    /**\n     * Get the layout of a text for the specified style.\n     * @param text - The text to get the layout for\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public getLayout(text: string, style: TextStyle, trimEnd: boolean = true): BitmapTextLayoutData\n    {\n        const bitmapFont = this.getFont(text, style);\n\n        return getBitmapTextLayout([...text], style, bitmapFont, trimEnd);\n    }\n\n    /**\n     * Measure the text using the specified style.\n     * @param text - The text to measure\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public measureText(\n        text: string,\n        style: TextStyle,\n        trimEnd: boolean = true\n    ): { width: number; height: number; scale: number; offsetY: number }\n    {\n        return this.getLayout(text, style, trimEnd);\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFontManager, BitmapText } from 'pixi.js';\n     *\n     * BitmapFontManager.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public install(options: BitmapFontInstallOptions): BitmapFont;\n    /** @deprecated since 7.0.0 */\n    public install(name: string, style?: TextStyle | TextStyleOptions, options?: BitmapFontInstallOptions): BitmapFont;\n    // eslint-disable-next-line max-len\n    public install(...args: [string | BitmapFontInstallOptions, (TextStyle | TextStyleOptions)?, BitmapFontInstallOptions?]): BitmapFont\n    {\n        let options = args[0] as BitmapFontInstallOptions;\n\n        if (typeof options === 'string')\n        {\n            options = {\n                name: options,\n                style: args[1],\n                chars: args[2]?.chars,\n                resolution: args[2]?.resolution,\n                padding: args[2]?.padding,\n                skipKerning: args[2]?.skipKerning,\n            } as BitmapFontInstallOptions;\n\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})');\n            // #endif\n        }\n\n        const name = options?.name;\n\n        if (!name)\n        {\n            throw new Error('[BitmapFontManager] Property `name` is required.');\n        }\n\n        options = { ...this.defaultOptions, ...options };\n\n        const textStyle = options.style;\n\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const overrideFill = style._fill.fill !== null && style._fill.fill !== undefined;\n        const font = new DynamicBitmapFont({\n            style,\n            overrideFill,\n            skipKerning: options.skipKerning,\n            padding: options.padding,\n            resolution: options.resolution,\n            overrideSize: false\n        });\n\n        const flatChars = resolveCharacters(options.chars);\n\n        font.ensureCharacters(flatChars.join(''));\n\n        Cache.set(`${name}-bitmap`, font);\n\n        font.once('destroy', () => Cache.remove(`${name}-bitmap`));\n\n        return font;\n    }\n\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public uninstall(name: string)\n    {\n        const cacheKey = `${name}-bitmap`;\n        const font = Cache.get<BitmapFont>(cacheKey);\n\n        if (font)\n        {\n            Cache.remove(cacheKey);\n            font.destroy();\n        }\n    }\n}\n\nexport const BitmapFontManager = new BitmapFontManagerClass();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}