{"ast":null,"code":"import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: {\n        value: new Float32Array([1, 1, 1, 1]),\n        type: \"vec4<f32>\"\n      },\n      uTransformMatrix: {\n        value: new Matrix(),\n        type: \"mat3x3<f32>\"\n      },\n      uDistance: {\n        value: 4,\n        type: \"f32\"\n      },\n      uRound: {\n        value: 0,\n        type: \"f32\"\n      }\n    });\n    const maxTextures = getMaxTexturesPerBatch();\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [colorBit, generateTextureBatchBit(maxTextures), localUniformMSDFBit, mSDFBit, roundPixelsBit]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [colorBitGl, generateTextureBatchBitGl(maxTextures), localUniformMSDFBitGl, mSDFBitGl, roundPixelsBitGl]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\nexport { SdfShader };","map":{"version":3,"names":["gpuProgram","glProgram","SdfShader","Shader","constructor","uniforms","UniformGroup","uColor","value","Float32Array","type","uTransformMatrix","Matrix","uDistance","uRound","maxTextures","getMaxTexturesPerBatch","compileHighShaderGpuProgram","name","bits","colorBit","generateTextureBatchBit","localUniformMSDFBit","mSDFBit","roundPixelsBit","compileHighShaderGlProgram","colorBitGl","generateTextureBatchBitGl","localUniformMSDFBitGl","mSDFBitGl","roundPixelsBitGl","resources","localUniforms","batchSamplers","getBatchSamplersUniformGroup"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class SdfShader extends Shader\n{\n    constructor()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = getMaxTexturesPerBatch();\n\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(maxTextures),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n}\n"],"mappings":";;;;;;;;;;;;AAqBA,IAAIA,UAAA;AACJ,IAAIC,SAAA;AAEG,MAAMC,SAAA,SAAkBC,MAC/B;EACIC,WACAA,CAAA;IACU,MAAAC,QAAA,GAAW,IAAIC,YAAa;MAC9BC,MAAQ;QAAEC,KAAO,MAAIC,YAAa,EAAC,CAAG,KAAG,CAAG,GAAC,CAAC;QAAGC,IAAA,EAAM;MAAY;MACnEC,gBAAA,EAAkB;QAAEH,KAAA,EAAO,IAAII,MAAO;QAAGF,IAAA,EAAM;MAAc;MAC7DG,SAAW;QAAEL,KAAO;QAAGE,IAAA,EAAM;MAAM;MACnCI,MAAQ;QAAEN,KAAO;QAAGE,IAAA,EAAM;MAAM;IAAA,CACnC;IAED,MAAMK,WAAA,GAAcC,sBAAuB;IAE3ChB,UAAA,KAAAA,UAAA,GAAeiB,2BAA4B;MACvCC,IAAM;MACNC,IAAM,GACFC,QAAA,EACAC,uBAAA,CAAwBN,WAAW,GACnCO,mBAAA,EACAC,OAAA,EACAC,cAAA;IACJ,CACH;IAEDvB,SAAA,KAAAA,SAAA,GAAcwB,0BAA2B;MACrCP,IAAM;MACNC,IAAM,GACFO,UAAA,EACAC,yBAAA,CAA0BZ,WAAW,GACrCa,qBAAA,EACAC,SAAA,EACAC,gBAAA;IACJ,CACH;IAEK;MACF7B,SAAA;MACAD,UAAA;MACA+B,SAAW;QACPC,aAAe,EAAA3B,QAAA;QACf4B,aAAA,EAAeC,4BAAA,CAA6BnB,WAAW;MAAA;IAC3D,CACH;EAAA;AAET","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}