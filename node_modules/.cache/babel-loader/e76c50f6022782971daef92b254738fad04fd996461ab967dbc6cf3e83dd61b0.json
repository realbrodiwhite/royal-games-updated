{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\n\"use strict\";\nclass GlGraphicsAdaptor {\n  init() {\n    const uniforms = new UniformGroup({\n      uColor: {\n        value: new Float32Array([1, 1, 1, 1]),\n        type: \"vec4<f32>\"\n      },\n      uTransformMatrix: {\n        value: new Matrix(),\n        type: \"mat3x3<f32>\"\n      },\n      uRound: {\n        value: 0,\n        type: \"f32\"\n      }\n    });\n    const maxTextures = getMaxTexturesPerBatch();\n    const glProgram = compileHighShaderGlProgram({\n      name: \"graphics\",\n      bits: [colorBitGl, generateTextureBatchBitGl(maxTextures), localUniformBitGl, roundPixelsBitGl]\n    });\n    this.shader = new Shader({\n      glProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n  execute(graphicsPipe, renderable) {\n    const context = renderable.context;\n    const shader = context.customShader || this.shader;\n    const renderer = graphicsPipe.renderer;\n    const contextSystem = renderer.graphicsContext;\n    const {\n      batcher,\n      instructions\n    } = contextSystem.getContextRenderData(context);\n    shader.groups[0] = renderer.globalUniforms.bindGroup;\n    renderer.state.set(graphicsPipe.state);\n    renderer.shader.bind(shader);\n    renderer.geometry.bind(batcher.geometry, shader.glProgram);\n    const batches = instructions.instructions;\n    for (let i = 0; i < instructions.instructionSize; i++) {\n      const batch = batches[i];\n      if (batch.size) {\n        for (let j = 0; j < batch.textures.count; j++) {\n          renderer.texture.bind(batch.textures.textures[j], j);\n        }\n        renderer.geometry.draw(\"triangle-list\", batch.size, batch.start);\n      }\n    }\n  }\n  destroy() {\n    this.shader.destroy(true);\n    this.shader = null;\n  }\n}\n/** @ignore */\nGlGraphicsAdaptor.extension = {\n  type: [ExtensionType.WebGLPipesAdaptor],\n  name: \"graphics\"\n};\nexport { GlGraphicsAdaptor };","map":{"version":3,"names":["GlGraphicsAdaptor","init","uniforms","UniformGroup","uColor","value","Float32Array","type","uTransformMatrix","Matrix","uRound","maxTextures","getMaxTexturesPerBatch","glProgram","compileHighShaderGlProgram","name","bits","colorBitGl","generateTextureBatchBitGl","localUniformBitGl","roundPixelsBitGl","shader","Shader","resources","localUniforms","batchSamplers","getBatchSamplersUniformGroup","execute","graphicsPipe","renderable","context","customShader","renderer","contextSystem","graphicsContext","batcher","instructions","getContextRenderData","groups","globalUniforms","bindGroup","state","set","bind","geometry","batches","i","instructionSize","batch","size","j","textures","count","texture","draw","start","destroy","extension","ExtensionType","WebGLPipesAdaptor"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/graphics/gl/GlGraphicsAdaptor.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\n\nimport type { Batch } from '../../../rendering/batcher/shared/Batcher';\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { Graphics } from '../shared/Graphics';\nimport type { GraphicsAdaptor, GraphicsPipe } from '../shared/GraphicsPipe';\n\n/**\n * A GraphicsAdaptor that uses WebGL to render graphics.\n * @memberof rendering\n * @ignore\n */\nexport class GlGraphicsAdaptor implements GraphicsAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public shader: Shader;\n\n    public init()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = getMaxTexturesPerBatch();\n\n        const glProgram = compileHighShaderGlProgram({\n            name: 'graphics',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this.shader = new Shader({\n            glProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n\n    public execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void\n    {\n        const context = renderable.context;\n        const shader = context.customShader || this.shader;\n        const renderer = graphicsPipe.renderer as WebGLRenderer;\n        const contextSystem = renderer.graphicsContext;\n\n        const {\n            batcher, instructions,\n        } = contextSystem.getContextRenderData(context);\n\n        // WebGL specific..\n        shader.groups[0] = renderer.globalUniforms.bindGroup;\n\n        renderer.state.set(graphicsPipe.state);\n\n        renderer.shader.bind(shader);\n\n        renderer.geometry.bind(batcher.geometry, shader.glProgram);\n\n        const batches = instructions.instructions as Batch[];\n\n        for (let i = 0; i < instructions.instructionSize; i++)\n        {\n            const batch = batches[i];\n\n            if (batch.size)\n            {\n                for (let j = 0; j < batch.textures.count; j++)\n                {\n                    renderer.texture.bind(batch.textures.textures[j], j);\n                }\n\n                renderer.geometry.draw('triangle-list', batch.size, batch.start);\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n"],"mappings":";;;;;;;;;;;;AAsBO,MAAMA,iBACb;EAWWC,IACPA,CAAA;IACU,MAAAC,QAAA,GAAW,IAAIC,YAAa;MAC9BC,MAAQ;QAAEC,KAAO,MAAIC,YAAa,EAAC,CAAG,KAAG,CAAG,GAAC,CAAC;QAAGC,IAAA,EAAM;MAAY;MACnEC,gBAAA,EAAkB;QAAEH,KAAA,EAAO,IAAII,MAAO;QAAGF,IAAA,EAAM;MAAc;MAC7DG,MAAQ;QAAEL,KAAO;QAAGE,IAAA,EAAM;MAAM;IAAA,CACnC;IAED,MAAMI,WAAA,GAAcC,sBAAuB;IAE3C,MAAMC,SAAA,GAAYC,0BAA2B;MACzCC,IAAM;MACNC,IAAM,GACFC,UAAA,EACAC,yBAAA,CAA0BP,WAAW,GACrCQ,iBAAA,EACAC,gBAAA;IACJ,CACH;IAEI,KAAAC,MAAA,GAAS,IAAIC,MAAO;MACrBT,SAAA;MACAU,SAAW;QACPC,aAAe,EAAAtB,QAAA;QACfuB,aAAA,EAAeC,4BAAA,CAA6Bf,WAAW;MAAA;IAC3D,CACH;EAAA;EAGEgB,QAAQC,YAAA,EAA4BC,UAC3C;IACI,MAAMC,OAAA,GAAUD,UAAW,CAAAC,OAAA;IACrB,MAAAT,MAAA,GAASS,OAAQ,CAAAC,YAAA,IAAgB,IAAK,CAAAV,MAAA;IAC5C,MAAMW,QAAA,GAAWJ,YAAa,CAAAI,QAAA;IAC9B,MAAMC,aAAA,GAAgBD,QAAS,CAAAE,eAAA;IAEzB;MACFC,OAAA;MAASC;IAAA,CACb,GAAIH,aAAc,CAAAI,oBAAA,CAAqBP,OAAO;IAG9CT,MAAA,CAAOiB,MAAO,EAAC,CAAI,GAAAN,QAAA,CAASO,cAAe,CAAAC,SAAA;IAElCR,QAAA,CAAAS,KAAA,CAAMC,GAAI,CAAAd,YAAA,CAAaa,KAAK;IAE5BT,QAAA,CAAAX,MAAA,CAAOsB,IAAA,CAAKtB,MAAM;IAE3BW,QAAA,CAASY,QAAS,CAAAD,IAAA,CAAKR,OAAQ,CAAAS,QAAA,EAAUvB,MAAA,CAAOR,SAAS;IAEzD,MAAMgC,OAAA,GAAUT,YAAa,CAAAA,YAAA;IAE7B,SAASU,CAAI,MAAGA,CAAI,GAAAV,YAAA,CAAaW,eAAA,EAAiBD,CAClD;MACU,MAAAE,KAAA,GAAQH,OAAA,CAAQC,CAAC;MAEvB,IAAIE,KAAA,CAAMC,IACV;QACI,SAASC,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAIF,KAAM,CAAAG,QAAA,CAASC,KAAA,EAAOF,CAC1C;UACIlB,QAAA,CAASqB,OAAA,CAAQV,IAAK,CAAAK,KAAA,CAAMG,QAAA,CAASA,QAAS,CAAAD,CAAC,GAAGA,CAAC;QAAA;QAGvDlB,QAAA,CAASY,QAAA,CAASU,IAAK,kBAAiBN,KAAM,CAAAC,IAAA,EAAMD,KAAA,CAAMO,KAAK;MAAA;IACnE;EACJ;EAGGC,OACPA,CAAA;IACS,KAAAnC,MAAA,CAAOmC,OAAA,CAAQ,IAAI;IACxB,KAAKnC,MAAS;EAAA;AAEtB;AAAA;AApFarB,iBAAA,CAGKyD,SAAY;EACtBlD,IAAM,GACFmD,aAAc,CAAAC,iBAAA,CAClB;EACA5C,IAAM;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}