{"ast":null,"code":"import { DOMAdapter } from '../../../../environment/adapter.mjs';\n\"use strict\";\nfunction mapWebGLBlendModesToPixi(gl) {\n  const blendMap = {};\n  blendMap.normal = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.add = [gl.ONE, gl.ONE];\n  blendMap.multiply = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.screen = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.none = [0, 0];\n  blendMap[\"normal-npm\"] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap[\"add-npm\"] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n  blendMap[\"screen-npm\"] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.erase = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n  const isWebGl2 = !(gl instanceof DOMAdapter.get().getWebGLRenderingContext());\n  if (isWebGl2) {\n    blendMap.min = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.MIN, gl.MIN];\n    blendMap.max = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.MAX, gl.MAX];\n  } else {\n    const ext = gl.getExtension(\"EXT_blend_minmax\");\n    if (ext) {\n      blendMap.min = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, ext.MIN_EXT, ext.MIN_EXT];\n      blendMap.max = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, ext.MAX_EXT, ext.MAX_EXT];\n    }\n  }\n  return blendMap;\n}\nexport { mapWebGLBlendModesToPixi };","map":{"version":3,"names":["mapWebGLBlendModesToPixi","gl","blendMap","normal","ONE","ONE_MINUS_SRC_ALPHA","add","multiply","DST_COLOR","screen","ONE_MINUS_SRC_COLOR","none","SRC_ALPHA","erase","ZERO","isWebGl2","DOMAdapter","get","getWebGLRenderingContext","min","MIN","max","MAX","ext","getExtension","MIN_EXT","MAX_EXT"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/rendering/renderers/gl/state/mapWebGLBlendModesToPixi.ts"],"sourcesContent":["import { DOMAdapter } from '../../../../environment/adapter';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\n/**\n * Maps gl blend combinations to WebGL.\n * @param gl\n * @returns {object} Map of gl blend combinations to WebGL.\n */\nexport function mapWebGLBlendModesToPixi(gl: GlRenderingContext): Record<BLEND_MODES, number[]>\n{\n    const blendMap: Partial<Record<BLEND_MODES, number[]>> = {};\n\n    // TODO - premultiply alpha would be different.\n    // add a boolean for that!\n    blendMap.normal = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.add = [gl.ONE, gl.ONE];\n    blendMap.multiply = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.screen = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.none = [0, 0];\n\n    // not-premultiplied blend modes\n    blendMap['normal-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap['add-npm'] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n    blendMap['screen-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n\n    blendMap.erase = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n\n    const isWebGl2 = !(gl instanceof DOMAdapter.get().getWebGLRenderingContext());\n\n    if (isWebGl2)\n    {\n        blendMap.min = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.MIN, gl.MIN];\n        blendMap.max = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.MAX, gl.MAX];\n    }\n    else\n    {\n        const ext = gl.getExtension('EXT_blend_minmax');\n\n        if (ext)\n        {\n            blendMap.min = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, ext.MIN_EXT, ext.MIN_EXT];\n            blendMap.max = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, ext.MAX_EXT, ext.MAX_EXT];\n        }\n    }\n\n    // TODO - implement if requested!\n    // composite operations\n    // array[BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];\n    // array[BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];\n    // array[BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];\n    // array[BLEND_MODES.XOR] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // SUBTRACT from flash\n    // array[BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];\n\n    return blendMap as Record<BLEND_MODES, number[]>;\n}\n"],"mappings":";;AAUO,SAASA,yBAAyBC,EACzC;EACI,MAAMC,QAAA,GAAmD,EAAC;EAI1DA,QAAA,CAASC,MAAS,IAACF,EAAG,CAAAG,GAAA,EAAKH,EAAA,CAAGI,mBAAmB;EACjDH,QAAA,CAASI,GAAM,IAACL,EAAG,CAAAG,GAAA,EAAKH,EAAA,CAAGG,GAAG;EACrBF,QAAA,CAAAK,QAAA,GAAW,CAACN,EAAG,CAAAO,SAAA,EAAWP,EAAA,CAAGI,mBAAqB,EAAAJ,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGI,mBAAmB;EAChFH,QAAA,CAAAO,MAAA,GAAS,CAACR,EAAG,CAAAG,GAAA,EAAKH,EAAA,CAAGS,mBAAqB,EAAAT,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGI,mBAAmB;EACxEH,QAAA,CAAAS,IAAA,GAAO,CAAC,GAAG,CAAC;EAGZT,QAAA,aAAY,CAAI,IAACD,EAAG,CAAAW,SAAA,EAAWX,EAAA,CAAGI,mBAAqB,EAAAJ,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGI,mBAAmB;EACrFH,QAAA,UAAS,CAAI,IAACD,EAAG,CAAAW,SAAA,EAAWX,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGG,GAAG;EAClDF,QAAA,aAAY,CAAI,IAACD,EAAG,CAAAW,SAAA,EAAWX,EAAA,CAAGS,mBAAqB,EAAAT,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGI,mBAAmB;EAE9FH,QAAA,CAASW,KAAQ,IAACZ,EAAG,CAAAa,IAAA,EAAMb,EAAA,CAAGI,mBAAmB;EAEjD,MAAMU,QAAA,GAAW,EAAEd,EAAA,YAAce,UAAW,CAAAC,GAAA,GAAMC,wBAAyB;EAE3E,IAAIH,QACJ;IACIb,QAAA,CAASiB,GAAM,IAAClB,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAmB,GAAA,EAAKnB,EAAA,CAAGmB,GAAG;IAC9DlB,QAAA,CAASmB,GAAM,IAACpB,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAqB,GAAA,EAAKrB,EAAA,CAAGqB,GAAG;EAAA,CAGlE;IACU,MAAAC,GAAA,GAAMtB,EAAG,CAAAuB,YAAA,CAAa,kBAAkB;IAE9C,IAAID,GACJ;MACIrB,QAAA,CAASiB,GAAM,IAAClB,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKmB,GAAI,CAAAE,OAAA,EAASF,GAAA,CAAIE,OAAO;MACxEvB,QAAA,CAASmB,GAAM,IAACpB,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKH,EAAG,CAAAG,GAAA,EAAKmB,GAAI,CAAAG,OAAA,EAASH,GAAA,CAAIG,OAAO;IAAA;EAC5E;EAgBG,OAAAxB,QAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}