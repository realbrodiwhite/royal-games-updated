{"ast":null,"code":"import { BindGroup } from '../../renderers/gpu/shader/BindGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { getMaxTexturesPerBatch } from '../gl/utils/maxRecommendedTextures.mjs';\n\"use strict\";\nconst cachedGroups = {};\nfunction getTextureBatchBindGroup(textures, size) {\n  let uid = 2166136261;\n  for (let i = 0; i < size; i++) {\n    uid ^= textures[i].uid;\n    uid = Math.imul(uid, 16777619);\n    uid >>>= 0;\n  }\n  return cachedGroups[uid] || generateTextureBatchBindGroup(textures, size, uid);\n}\nlet maxTextures = 0;\nfunction generateTextureBatchBindGroup(textures, size, key) {\n  const bindGroupResources = {};\n  let bindIndex = 0;\n  if (!maxTextures) maxTextures = getMaxTexturesPerBatch();\n  for (let i = 0; i < maxTextures; i++) {\n    const texture = i < size ? textures[i] : Texture.EMPTY.source;\n    bindGroupResources[bindIndex++] = texture.source;\n    bindGroupResources[bindIndex++] = texture.style;\n  }\n  const bindGroup = new BindGroup(bindGroupResources);\n  cachedGroups[key] = bindGroup;\n  return bindGroup;\n}\nexport { getTextureBatchBindGroup };","map":{"version":3,"names":["cachedGroups","getTextureBatchBindGroup","textures","size","uid","i","Math","imul","generateTextureBatchBindGroup","maxTextures","key","bindGroupResources","bindIndex","getMaxTexturesPerBatch","texture","Texture","EMPTY","source","style","bindGroup","BindGroup"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/rendering/batcher/gpu/getTextureBatchBindGroup.ts"],"sourcesContent":["import { BindGroup } from '../../renderers/gpu/shader/BindGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { getMaxTexturesPerBatch } from '../gl/utils/maxRecommendedTextures';\n\nimport type { TextureSource } from '../../renderers/shared/texture/sources/TextureSource';\n\nconst cachedGroups: Record<number, BindGroup> = {};\n\nexport function getTextureBatchBindGroup(textures: TextureSource[], size: number)\n{\n    let uid = 2166136261; // FNV-1a 32-bit offset basis\n\n    for (let i = 0; i < size; i++)\n    {\n        uid ^= textures[i].uid;\n        uid = Math.imul(uid, 16777619);\n        uid >>>= 0;\n    }\n\n    return cachedGroups[uid] || generateTextureBatchBindGroup(textures, size, uid);\n}\n\nlet maxTextures = 0;\n\nfunction generateTextureBatchBindGroup(textures: TextureSource[], size: number, key: number): BindGroup\n{\n    const bindGroupResources: Record<string, any> = {};\n\n    let bindIndex = 0;\n\n    if (!maxTextures)maxTextures = getMaxTexturesPerBatch();\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        const texture = i < size ? textures[i] : Texture.EMPTY.source;\n\n        bindGroupResources[bindIndex++] = texture.source;\n        bindGroupResources[bindIndex++] = texture.style;\n    }\n\n    // pad out with empty textures\n    const bindGroup = new BindGroup(bindGroupResources);\n\n    cachedGroups[key] = bindGroup;\n\n    return bindGroup;\n}\n\n"],"mappings":";;;;AAMA,MAAMA,YAAA,GAA0C,EAAC;AAEjC,SAAAC,yBAAyBC,QAAA,EAA2BC,IACpE;EACI,IAAIC,GAAM;EAEV,SAASC,CAAI,MAAGA,CAAI,GAAAF,IAAA,EAAME,CAC1B;IACWD,GAAA,IAAAF,QAAA,CAASG,CAAC,CAAE,CAAAD,GAAA;IACbA,GAAA,GAAAE,IAAA,CAAKC,IAAK,CAAAH,GAAA,EAAK,QAAQ;IACpBA,GAAA;EAAA;EAGb,OAAOJ,YAAA,CAAaI,GAAG,KAAKI,6BAA8B,CAAAN,QAAA,EAAUC,IAAA,EAAMC,GAAG;AACjF;AAEA,IAAIK,WAAc;AAElB,SAASD,8BAA8BN,QAA2B,EAAAC,IAAA,EAAcO,GAChF;EACI,MAAMC,kBAAA,GAA0C,EAAC;EAEjD,IAAIC,SAAY;EAEhB,IAAI,CAACH,WAAA,EAAYA,WAAA,GAAcI,sBAAuB;EAEtD,SAASR,CAAI,MAAGA,CAAI,GAAAI,WAAA,EAAaJ,CACjC;IACI,MAAMS,OAAA,GAAUT,CAAI,GAAAF,IAAA,GAAOD,QAAA,CAASG,CAAC,IAAIU,OAAA,CAAQC,KAAM,CAAAC,MAAA;IAEpCN,kBAAA,CAAAC,SAAA,EAAW,IAAIE,OAAQ,CAAAG,MAAA;IACvBN,kBAAA,CAAAC,SAAA,EAAW,IAAIE,OAAQ,CAAAI,KAAA;EAAA;EAIxC,MAAAC,SAAA,GAAY,IAAIC,SAAA,CAAUT,kBAAkB;EAElDX,YAAA,CAAaU,GAAG,CAAI,GAAAS,SAAA;EAEb,OAAAA,SAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}