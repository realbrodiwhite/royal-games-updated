{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { textureBit } from '../../../rendering/high-shader/shader-bits/textureBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { warn } from '../../../utils/logging/warn.mjs';\n\"use strict\";\nclass GpuMeshAdapter {\n  init() {\n    const gpuProgram = compileHighShaderGpuProgram({\n      name: \"mesh\",\n      bits: [localUniformBit, textureBit, roundPixelsBit]\n    });\n    this._shader = new Shader({\n      gpuProgram,\n      resources: {\n        uTexture: Texture.EMPTY._source,\n        uSampler: Texture.EMPTY._source.style,\n        textureUniforms: {\n          uTextureMatrix: {\n            type: \"mat3x3<f32>\",\n            value: new Matrix()\n          }\n        }\n      }\n    });\n  }\n  execute(meshPipe, mesh) {\n    const renderer = meshPipe.renderer;\n    let shader = mesh._shader;\n    if (!shader) {\n      shader = this._shader;\n      shader.groups[2] = renderer.texture.getTextureBindGroup(mesh.texture);\n    } else if (!shader.gpuProgram) {\n      warn(\"Mesh shader has no gpuProgram\", mesh.shader);\n      return;\n    }\n    const gpuProgram = shader.gpuProgram;\n    if (gpuProgram.autoAssignGlobalUniforms) {\n      shader.groups[0] = renderer.globalUniforms.bindGroup;\n    }\n    if (gpuProgram.autoAssignLocalUniforms) {\n      const localUniforms = meshPipe.localUniforms;\n      shader.groups[1] = renderer.renderPipes.uniformBatch.getUniformBindGroup(localUniforms, true);\n    }\n    renderer.encoder.draw({\n      geometry: mesh._geometry,\n      shader,\n      state: mesh.state\n    });\n  }\n  destroy() {\n    this._shader.destroy(true);\n    this._shader = null;\n  }\n}\n/** @ignore */\nGpuMeshAdapter.extension = {\n  type: [ExtensionType.WebGPUPipesAdaptor],\n  name: \"mesh\"\n};\nexport { GpuMeshAdapter };","map":{"version":3,"names":["GpuMeshAdapter","init","gpuProgram","compileHighShaderGpuProgram","name","bits","localUniformBit","textureBit","roundPixelsBit","_shader","Shader","resources","uTexture","Texture","EMPTY","_source","uSampler","style","textureUniforms","uTextureMatrix","type","value","Matrix","execute","meshPipe","mesh","renderer","shader","groups","texture","getTextureBindGroup","warn","autoAssignGlobalUniforms","globalUniforms","bindGroup","autoAssignLocalUniforms","localUniforms","renderPipes","uniformBatch","getUniformBindGroup","encoder","draw","geometry","_geometry","state","destroy","extension","ExtensionType","WebGPUPipesAdaptor"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/mesh/gpu/GpuMeshAdapter.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { textureBit } from '../../../rendering/high-shader/shader-bits/textureBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { Mesh } from '../shared/Mesh';\nimport type { MeshAdaptor, MeshPipe } from '../shared/MeshPipe';\n\n/**\n * The WebGL adaptor for the mesh system. Allows the Mesh System to be used with the WebGl renderer\n * @memberof rendering\n * @ignore\n */\nexport class GpuMeshAdapter implements MeshAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'mesh',\n    } as const;\n\n    private _shader: Shader;\n\n    public init(): void\n    {\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'mesh',\n            bits: [\n                localUniformBit,\n                textureBit,\n                roundPixelsBit,\n            ]\n        });\n\n        this._shader = new Shader({\n            gpuProgram,\n            resources: {\n                uTexture: Texture.EMPTY._source,\n                uSampler: Texture.EMPTY._source.style,\n                textureUniforms: {\n                    uTextureMatrix: { type: 'mat3x3<f32>', value: new Matrix() },\n                }\n            }\n        });\n    }\n\n    public execute(meshPipe: MeshPipe, mesh: Mesh)\n    {\n        const renderer = meshPipe.renderer as WebGPURenderer;\n\n        let shader: Shader = mesh._shader;\n\n        if (!shader)\n        {\n            shader = this._shader;\n\n            shader.groups[2] = renderer.texture.getTextureBindGroup(mesh.texture);\n        }\n        else if (!shader.gpuProgram)\n        {\n            // #if _DEBUG\n            warn('Mesh shader has no gpuProgram', mesh.shader);\n            // #endif\n\n            return;\n        }\n\n        const gpuProgram = shader.gpuProgram;\n        // GPU..\n\n        if (gpuProgram.autoAssignGlobalUniforms)\n        {\n            shader.groups[0] = renderer.globalUniforms.bindGroup;\n        }\n\n        if (gpuProgram.autoAssignLocalUniforms)\n        {\n            const localUniforms = meshPipe.localUniforms;\n\n            shader.groups[1] = (renderer as WebGPURenderer)\n                .renderPipes.uniformBatch.getUniformBindGroup(localUniforms, true);\n        }\n\n        renderer.encoder.draw({\n            geometry: mesh._geometry,\n            shader,\n            state: mesh.state\n        });\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n"],"mappings":";;;;;;;;;;AAmBO,MAAMA,cACb;EAWWC,IACPA,CAAA;IACI,MAAMC,UAAA,GAAaC,2BAA4B;MAC3CC,IAAM;MACNC,IAAM,GACFC,eAAA,EACAC,UAAA,EACAC,cAAA;IACJ,CACH;IAEI,KAAAC,OAAA,GAAU,IAAIC,MAAO;MACtBR,UAAA;MACAS,SAAW;QACPC,QAAA,EAAUC,OAAA,CAAQC,KAAM,CAAAC,OAAA;QACxBC,QAAA,EAAUH,OAAQ,CAAAC,KAAA,CAAMC,OAAQ,CAAAE,KAAA;QAChCC,eAAiB;UACbC,cAAA,EAAgB;YAAEC,IAAA,EAAM;YAAeC,KAAO,MAAIC,MAAA;UAAS;QAAA;MAC/D;IACJ,CACH;EAAA;EAGEC,QAAQC,QAAA,EAAoBC,IACnC;IACI,MAAMC,QAAA,GAAWF,QAAS,CAAAE,QAAA;IAE1B,IAAIC,MAAA,GAAiBF,IAAK,CAAAhB,OAAA;IAE1B,IAAI,CAACkB,MACL;MACIA,MAAA,GAAS,IAAK,CAAAlB,OAAA;MAEdkB,MAAA,CAAOC,MAAA,CAAO,CAAC,IAAIF,QAAA,CAASG,OAAQ,CAAAC,mBAAA,CAAoBL,IAAA,CAAKI,OAAO;IAAA,CACxE,UACS,CAACF,MAAA,CAAOzB,UACjB;MAES6B,IAAA,kCAAiCN,IAAA,CAAKE,MAAM;MAGjD;IAAA;IAGJ,MAAMzB,UAAA,GAAayB,MAAO,CAAAzB,UAAA;IAG1B,IAAIA,UAAA,CAAW8B,wBACf;MACIL,MAAA,CAAOC,MAAO,EAAC,CAAI,GAAAF,QAAA,CAASO,cAAe,CAAAC,SAAA;IAAA;IAG/C,IAAIhC,UAAA,CAAWiC,uBACf;MACI,MAAMC,aAAA,GAAgBZ,QAAS,CAAAY,aAAA;MAExBT,MAAA,CAAAC,MAAA,CAAO,CAAC,CAAK,GAAAF,QAAA,CACfW,WAAA,CAAYC,YAAa,CAAAC,mBAAA,CAAoBH,aAAA,EAAe,IAAI;IAAA;IAGzEV,QAAA,CAASc,OAAA,CAAQC,IAAK;MAClBC,QAAA,EAAUjB,IAAK,CAAAkB,SAAA;MACfhB,MAAA;MACAiB,KAAA,EAAOnB,IAAK,CAAAmB;IAAA,CACf;EAAA;EAGEC,OACPA,CAAA;IACS,KAAApC,OAAA,CAAQoC,OAAA,CAAQ,IAAI;IACzB,KAAKpC,OAAU;EAAA;AAEvB;AAAA;AApFaT,cAAA,CAGK8C,SAAY;EACtB1B,IAAM,GACF2B,aAAc,CAAAC,kBAAA,CAClB;EACA5C,IAAM;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}