{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Ticker } from '../../../ticker/Ticker.mjs';\n\"use strict\";\nlet uid = 1;\nclass SchedulerSystem {\n  constructor() {\n    this._tasks = [];\n  }\n  /** Initializes the scheduler system and starts the ticker. */\n  init() {\n    Ticker.system.add(this._update, this);\n  }\n  /**\n   * Schedules a repeating task.\n   * @param func - The function to execute.\n   * @param duration - The interval duration in milliseconds.\n   * @returns The unique identifier for the scheduled task.\n   */\n  repeat(func, duration) {\n    const id = uid++;\n    this._tasks.push({\n      func,\n      duration,\n      start: performance.now(),\n      last: performance.now(),\n      repeat: true,\n      id\n    });\n    return id;\n  }\n  /**\n   * Cancels a scheduled task.\n   * @param id - The unique identifier of the task to cancel.\n   */\n  cancel(id) {\n    for (let i = 0; i < this._tasks.length; i++) {\n      if (this._tasks[i].id === id) {\n        this._tasks.splice(i, 1);\n        return;\n      }\n    }\n  }\n  /**\n   * Updates and executes the scheduled tasks.\n   * @private\n   */\n  _update() {\n    const now = performance.now();\n    for (let i = 0; i < this._tasks.length; i++) {\n      const task = this._tasks[i];\n      if (now - task.last >= task.duration) {\n        const elapsed = now - task.start;\n        task.func(elapsed);\n        task.last = now;\n      }\n    }\n  }\n  /**\n   * Destroys the scheduler system and removes all tasks.\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    Ticker.system.remove(this._update, this);\n    this._tasks.length = 0;\n  }\n}\n/** @ignore */\nSchedulerSystem.extension = {\n  type: [ExtensionType.WebGLSystem, ExtensionType.WebGPUSystem, ExtensionType.CanvasSystem],\n  name: \"scheduler\",\n  priority: 0\n};\nexport { SchedulerSystem };","map":{"version":3,"names":["uid","SchedulerSystem","constructor","_tasks","init","Ticker","system","add","_update","repeat","func","duration","id","push","start","performance","now","last","cancel","i","length","splice","task","elapsed","destroy","remove","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","CanvasSystem","name","priority"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/rendering/renderers/shared/SchedulerSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Ticker } from '../../../ticker/Ticker';\n\nimport type { System } from './system/System';\n\n// start at one too keep it positive!\nlet uid = 1;\n\n/**\n * The SchedulerSystem manages scheduled tasks with specific intervals.\n * @memberof rendering\n */\nexport class SchedulerSystem implements System<null>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'scheduler',\n        priority: 0,\n    } as const;\n\n    private readonly _tasks: {\n        func: (elapsed: number) => void;\n        duration: number;\n        start: number;\n        last: number;\n        repeat: boolean;\n        id: number;\n    }[] = [];\n\n    /** Initializes the scheduler system and starts the ticker. */\n    public init(): void\n    {\n        Ticker.system.add(this._update, this);\n    }\n\n    /**\n     * Schedules a repeating task.\n     * @param func - The function to execute.\n     * @param duration - The interval duration in milliseconds.\n     * @returns The unique identifier for the scheduled task.\n     */\n    public repeat(func: (elapsed: number) => void, duration: number): number\n    {\n        const id = uid++;\n\n        this._tasks.push({\n            func,\n            duration,\n            start: performance.now(),\n            last: performance.now(),\n            repeat: true,\n            id\n        });\n\n        return id;\n    }\n\n    /**\n     * Cancels a scheduled task.\n     * @param id - The unique identifier of the task to cancel.\n     */\n    public cancel(id: number): void\n    {\n        for (let i = 0; i < this._tasks.length; i++)\n        {\n            if (this._tasks[i].id === id)\n            {\n                this._tasks.splice(i, 1);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Updates and executes the scheduled tasks.\n     * @private\n     */\n    private _update(): void\n    {\n        const now = performance.now();\n\n        for (let i = 0; i < this._tasks.length; i++)\n        {\n            const task = this._tasks[i];\n\n            if (now - task.last >= task.duration)\n            {\n                const elapsed = now - task.start;\n\n                task.func(elapsed);\n                task.last = now;\n            }\n        }\n    }\n\n    /**\n     * Destroys the scheduler system and removes all tasks.\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        Ticker.system.remove(this._update, this);\n\n        this._tasks.length = 0;\n    }\n}\n"],"mappings":";;;AAMA,IAAIA,GAAM;AAMH,MAAMC,eACb;EADOC,YAAA;IAaH,KAAiBC,MAAA,GAOX,EAAC;EAAA;EAAA;EAGAC,IACPA,CAAA;IACIC,MAAA,CAAOC,MAAO,CAAAC,GAAA,CAAI,IAAK,CAAAC,OAAA,EAAS,IAAI;EAAA;EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;EAQOC,OAAOC,IAAA,EAAiCC,QAC/C;IACI,MAAMC,EAAK,GAAAZ,GAAA;IAEX,KAAKG,MAAA,CAAOU,IAAK;MACbH,IAAA;MACAC,QAAA;MACAG,KAAA,EAAOC,WAAA,CAAYC,GAAI;MACvBC,IAAA,EAAMF,WAAA,CAAYC,GAAI;MACtBP,MAAQ;MACRG;IAAA,CACH;IAEM,OAAAA,EAAA;EAAA;EACX;AAAA;AAAA;AAAA;EAMOM,OAAON,EACd;IACI,SAASO,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAI,IAAK,CAAAhB,MAAA,CAAOiB,MAAA,EAAQD,CACxC;MACI,IAAI,IAAK,CAAAhB,MAAA,CAAOgB,CAAC,EAAEP,EAAA,KAAOA,EAC1B;QACS,KAAAT,MAAA,CAAOkB,MAAO,CAAAF,CAAA,EAAG,CAAC;QAEvB;MAAA;IACJ;EACJ;EACJ;AAAA;AAAA;AAAA;EAMQX,OACRA,CAAA;IACU,MAAAQ,GAAA,GAAMD,WAAA,CAAYC,GAAI;IAE5B,SAASG,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAI,IAAK,CAAAhB,MAAA,CAAOiB,MAAA,EAAQD,CACxC;MACU,MAAAG,IAAA,GAAO,IAAK,CAAAnB,MAAA,CAAOgB,CAAC;MAE1B,IAAIH,GAAM,GAAAM,IAAA,CAAKL,IAAQ,IAAAK,IAAA,CAAKX,QAC5B;QACU,MAAAY,OAAA,GAAUP,GAAA,GAAMM,IAAK,CAAAR,KAAA;QAE3BQ,IAAA,CAAKZ,IAAA,CAAKa,OAAO;QACjBD,IAAA,CAAKL,IAAO,GAAAD,GAAA;MAAA;IAChB;EACJ;EACJ;AAAA;AAAA;AAAA;AAAA;EAOOQ,OACPA,CAAA;IACInB,MAAA,CAAOC,MAAO,CAAAmB,MAAA,CAAO,IAAK,CAAAjB,OAAA,EAAS,IAAI;IAEvC,KAAKL,MAAA,CAAOiB,MAAS;EAAA;AAE7B;AAAA;AApGanB,eAAA,CAGKyB,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,WAAA,EACdD,aAAc,CAAAE,YAAA,EACdF,aAAc,CAAAG,YAAA,CAClB;EACAC,IAAM;EACNC,QAAU;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}