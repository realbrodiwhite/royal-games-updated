{"ast":null,"code":"import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\"use strict\";\nconst repetitionMap = {\n  repeat: {\n    addressModeU: \"repeat\",\n    addressModeV: \"repeat\"\n  },\n  \"repeat-x\": {\n    addressModeU: \"repeat\",\n    addressModeV: \"clamp-to-edge\"\n  },\n  \"repeat-y\": {\n    addressModeU: \"clamp-to-edge\",\n    addressModeV: \"repeat\"\n  },\n  \"no-repeat\": {\n    addressModeU: \"clamp-to-edge\",\n    addressModeV: \"clamp-to-edge\"\n  }\n};\nclass FillPattern {\n  constructor(texture, repetition) {\n    /** unique id for this fill pattern */\n    this.uid = uid(\"fillPattern\");\n    this.transform = new Matrix();\n    this._styleKey = null;\n    this.texture = texture;\n    this.transform.scale(1 / texture.frame.width, 1 / texture.frame.height);\n    if (repetition) {\n      texture.source.style.addressModeU = repetitionMap[repetition].addressModeU;\n      texture.source.style.addressModeV = repetitionMap[repetition].addressModeV;\n    }\n  }\n  setTransform(transform) {\n    const texture = this.texture;\n    this.transform.copyFrom(transform);\n    this.transform.invert();\n    this.transform.scale(1 / texture.frame.width, 1 / texture.frame.height);\n    this._styleKey = null;\n  }\n  get styleKey() {\n    if (this._styleKey) return this._styleKey;\n    this._styleKey = `fill-pattern-${this.uid}-${this.texture.uid}-${this.transform.toArray().join(\"-\")}`;\n    return this._styleKey;\n  }\n}\nexport { FillPattern };","map":{"version":3,"names":["repetitionMap","repeat","addressModeU","addressModeV","FillPattern","constructor","texture","repetition","uid","transform","Matrix","_styleKey","scale","frame","width","height","source","style","setTransform","copyFrom","invert","styleKey","toArray","join"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/graphics/shared/fill/FillPattern.ts"],"sourcesContent":["import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { WRAP_MODE } from '../../../../rendering/renderers/shared/texture/const';\nimport type { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\n\nexport type PatternRepetition = 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat';\n\nconst repetitionMap = {\n    repeat: {\n        addressModeU: 'repeat',\n        addressModeV: 'repeat',\n    },\n    'repeat-x': {\n        addressModeU: 'repeat',\n        addressModeV: 'clamp-to-edge',\n    },\n    'repeat-y': {\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'repeat',\n    },\n    'no-repeat': {\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'clamp-to-edge',\n    },\n};\n\nexport class FillPattern implements CanvasPattern\n{\n    /** unique id for this fill pattern */\n    public readonly uid: number = uid('fillPattern');\n    public texture: Texture;\n    public transform = new Matrix();\n\n    private _styleKey: string | null = null;\n\n    constructor(texture: Texture, repetition?: PatternRepetition)\n    {\n        this.texture = texture;\n\n        this.transform.scale(\n            1 / texture.frame.width,\n            1 / texture.frame.height\n        );\n\n        if (repetition)\n        {\n            texture.source.style.addressModeU = repetitionMap[repetition].addressModeU as WRAP_MODE;\n            texture.source.style.addressModeV = repetitionMap[repetition].addressModeV as WRAP_MODE;\n        }\n    }\n\n    public setTransform(transform?: Matrix): void\n    {\n        const texture = this.texture;\n\n        this.transform.copyFrom(transform);\n        this.transform.invert();\n        //  transform.scale\n        this.transform.scale(\n            1 / texture.frame.width,\n            1 / texture.frame.height\n        );\n\n        this._styleKey = null;\n    }\n\n    public get styleKey(): string\n    {\n        if (this._styleKey) return this._styleKey;\n\n        this._styleKey = `fill-pattern-${this.uid}-${this.texture.uid}-${this.transform.toArray().join('-')}`;\n\n        return this._styleKey;\n    }\n}\n"],"mappings":";;;AAQA,MAAMA,aAAgB;EAClBC,MAAQ;IACJC,YAAc;IACdC,YAAc;EAAA,CAClB;EACA,UAAY;IACRD,YAAc;IACdC,YAAc;EAAA,CAClB;EACA,UAAY;IACRD,YAAc;IACdC,YAAc;EAAA,CAClB;EACA,WAAa;IACTD,YAAc;IACdC,YAAc;EAAA;AAEtB;AAEO,MAAMC,WACb;EAQIC,YAAYC,OAAA,EAAkBC,UAC9B;IAPA;IAAgB,KAAAC,GAAA,GAAcA,GAAA,CAAI,aAAa;IAExC,KAAAC,SAAA,GAAY,IAAIC,MAAO;IAE9B,KAAQC,SAA2B;IAI/B,KAAKL,OAAU,GAAAA,OAAA;IAEf,KAAKG,SAAU,CAAAG,KAAA,CACX,IAAIN,OAAA,CAAQO,KAAM,CAAAC,KAAA,EAClB,IAAIR,OAAA,CAAQO,KAAM,CAAAE,MAAA,CACtB;IAEA,IAAIR,UACJ;MACID,OAAA,CAAQU,MAAO,CAAAC,KAAA,CAAMf,YAAe,GAAAF,aAAA,CAAcO,UAAU,CAAE,CAAAL,YAAA;MAC9DI,OAAA,CAAQU,MAAO,CAAAC,KAAA,CAAMd,YAAe,GAAAH,aAAA,CAAcO,UAAU,CAAE,CAAAJ,YAAA;IAAA;EAClE;EAGGe,aAAaT,SACpB;IACI,MAAMH,OAAA,GAAU,IAAK,CAAAA,OAAA;IAEhB,KAAAG,SAAA,CAAUU,QAAA,CAASV,SAAS;IACjC,KAAKA,SAAA,CAAUW,MAAO;IAEtB,KAAKX,SAAU,CAAAG,KAAA,CACX,IAAIN,OAAA,CAAQO,KAAM,CAAAC,KAAA,EAClB,IAAIR,OAAA,CAAQO,KAAM,CAAAE,MAAA,CACtB;IAEA,KAAKJ,SAAY;EAAA;EAGrB,IAAWU,QACXA,CAAA;IACI,IAAI,IAAK,CAAAV,SAAA,EAAW,OAAO,IAAK,CAAAA,SAAA;IAEhC,KAAKA,SAAY,mBAAgB,IAAK,CAAAH,GAAG,IAAI,IAAK,CAAAF,OAAA,CAAQE,GAAG,IAAI,KAAKC,SAAU,CAAAa,OAAA,EAAU,CAAAC,IAAA,CAAK,GAAG,CAAC;IAEnG,OAAO,IAAK,CAAAZ,SAAA;EAAA;AAEpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}