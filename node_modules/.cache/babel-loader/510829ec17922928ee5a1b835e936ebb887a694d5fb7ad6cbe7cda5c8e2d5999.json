{"ast":null,"code":"import { Color } from '../../../color/Color.mjs';\n\"use strict\";\nconst valuesToIterateForKeys = [\"align\", \"breakWords\", \"cssOverrides\", \"fontVariant\", \"fontWeight\", \"leading\", \"letterSpacing\", \"lineHeight\", \"padding\", \"textBaseline\", \"trim\", \"whiteSpace\", \"wordWrap\", \"wordWrapWidth\", \"fontFamily\", \"fontStyle\", \"fontSize\"];\nfunction generateTextStyleKey(style) {\n  const key = [];\n  let index = 0;\n  for (let i = 0; i < valuesToIterateForKeys.length; i++) {\n    const prop = `_${valuesToIterateForKeys[i]}`;\n    key[index++] = style[prop];\n  }\n  index = addFillStyleKey(style._fill, key, index);\n  index = addStokeStyleKey(style._stroke, key, index);\n  index = addDropShadowKey(style.dropShadow, key, index);\n  return key.join(\"-\");\n}\nfunction addFillStyleKey(fillStyle, key, index) {\n  if (!fillStyle) return index;\n  key[index++] = fillStyle.color;\n  key[index++] = fillStyle.alpha;\n  key[index++] = fillStyle.fill?.styleKey;\n  return index;\n}\nfunction addStokeStyleKey(strokeStyle, key, index) {\n  if (!strokeStyle) return index;\n  index = addFillStyleKey(strokeStyle, key, index);\n  key[index++] = strokeStyle.width;\n  key[index++] = strokeStyle.alignment;\n  key[index++] = strokeStyle.cap;\n  key[index++] = strokeStyle.join;\n  key[index++] = strokeStyle.miterLimit;\n  return index;\n}\nfunction addDropShadowKey(dropShadow, key, index) {\n  if (!dropShadow) return index;\n  key[index++] = dropShadow.alpha;\n  key[index++] = dropShadow.angle;\n  key[index++] = dropShadow.blur;\n  key[index++] = dropShadow.distance;\n  key[index++] = Color.shared.setValue(dropShadow.color).toNumber();\n  return index;\n}\nexport { generateTextStyleKey };","map":{"version":3,"names":["valuesToIterateForKeys","generateTextStyleKey","style","key","index","i","length","prop","addFillStyleKey","_fill","addStokeStyleKey","_stroke","addDropShadowKey","dropShadow","join","fillStyle","color","alpha","fill","styleKey","strokeStyle","width","alignment","cap","miterLimit","angle","blur","distance","Color","shared","setValue","toNumber"],"sources":["/workspaces/royal-games-updated/node_modules/pixi.js/src/scene/text/utils/generateTextStyleKey.ts"],"sourcesContent":["import { Color } from '../../../color/Color';\n\nimport type { ConvertedFillStyle, ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { HTMLTextStyle } from '../../text-html/HtmlTextStyle';\nimport type { TextStyle } from '../TextStyle';\n\nconst valuesToIterateForKeys: Partial<keyof TextStyle | keyof HTMLTextStyle>[] = [\n    'align',\n    'breakWords',\n    'cssOverrides',\n    'fontVariant',\n    'fontWeight',\n    'leading',\n    'letterSpacing',\n    'lineHeight',\n    'padding',\n    'textBaseline',\n    'trim',\n    'whiteSpace',\n    'wordWrap',\n    'wordWrapWidth',\n    'fontFamily',\n    'fontStyle',\n    'fontSize',\n] as const;\n\n/**\n * Generates a unique key for the text style.\n * @param style - The style to generate a key for.\n * @returns the key for the style.\n */\nexport function generateTextStyleKey(style: TextStyle): string\n{\n    const key = [];\n\n    let index = 0;\n\n    for (let i = 0; i < valuesToIterateForKeys.length; i++)\n    {\n        const prop = `_${valuesToIterateForKeys[i]}`;\n\n        key[index++] = style[prop as keyof typeof style];\n    }\n\n    index = addFillStyleKey(style._fill, key as string[], index);\n    index = addStokeStyleKey(style._stroke, key as string[], index);\n    index = addDropShadowKey(style.dropShadow, key as string[], index);\n\n    return key.join('-');\n}\n\nfunction addFillStyleKey(fillStyle: ConvertedFillStyle, key: (number | string)[], index: number)\n{\n    if (!fillStyle) return index;\n\n    key[index++] = fillStyle.color;\n    key[index++] = fillStyle.alpha;\n    key[index++] = fillStyle.fill?.styleKey;\n\n    return index;\n}\n\nfunction addStokeStyleKey(strokeStyle: ConvertedStrokeStyle, key: (number | string)[], index: number)\n{\n    if (!strokeStyle) return index;\n\n    index = addFillStyleKey(strokeStyle, key, index);\n\n    key[index++] = strokeStyle.width;\n    key[index++] = strokeStyle.alignment;\n    key[index++] = strokeStyle.cap;\n    key[index++] = strokeStyle.join;\n    key[index++] = strokeStyle.miterLimit;\n\n    return index;\n}\n\nfunction addDropShadowKey(dropShadow: TextStyle['dropShadow'], key: (number | string)[], index: number)\n{\n    if (!dropShadow) return index;\n\n    key[index++] = dropShadow.alpha;\n    key[index++] = dropShadow.angle;\n    key[index++] = dropShadow.blur;\n    key[index++] = dropShadow.distance;\n    key[index++] = Color.shared.setValue(dropShadow.color).toNumber();\n\n    return index;\n}\n"],"mappings":";;AAMA,MAAMA,sBAA2E,IAC7E,SACA,cACA,gBACA,eACA,cACA,WACA,iBACA,cACA,WACA,gBACA,QACA,cACA,YACA,iBACA,cACA,aACA,WACJ;AAOO,SAASC,qBAAqBC,KACrC;EACI,MAAMC,GAAA,GAAM,EAAC;EAEb,IAAIC,KAAQ;EAEZ,SAASC,CAAI,MAAGA,CAAI,GAAAL,sBAAA,CAAuBM,MAAA,EAAQD,CACnD;IACI,MAAME,IAAO,OAAIP,sBAAuB,CAAAK,CAAC,CAAC;IAEtCF,GAAA,CAAAC,KAAA,EAAO,CAAI,GAAAF,KAAA,CAAMK,IAA0B;EAAA;EAGnDH,KAAA,GAAQI,eAAgB,CAAAN,KAAA,CAAMO,KAAO,EAAAN,GAAA,EAAiBC,KAAK;EAC3DA,KAAA,GAAQM,gBAAiB,CAAAR,KAAA,CAAMS,OAAS,EAAAR,GAAA,EAAiBC,KAAK;EAC9DA,KAAA,GAAQQ,gBAAiB,CAAAV,KAAA,CAAMW,UAAY,EAAAV,GAAA,EAAiBC,KAAK;EAE1D,OAAAD,GAAA,CAAIW,IAAA,CAAK,GAAG;AACvB;AAEA,SAASN,gBAAgBO,SAA+B,EAAAZ,GAAA,EAA0BC,KAClF;EACI,IAAI,CAACW,SAAA,EAAkB,OAAAX,KAAA;EAEnBD,GAAA,CAAAC,KAAA,EAAO,IAAIW,SAAU,CAAAC,KAAA;EACrBb,GAAA,CAAAC,KAAA,EAAO,IAAIW,SAAU,CAAAE,KAAA;EACrBd,GAAA,CAAAC,KAAA,EAAO,CAAI,GAAAW,SAAA,CAAUG,IAAM,EAAAC,QAAA;EAExB,OAAAf,KAAA;AACX;AAEA,SAASM,iBAAiBU,WAAmC,EAAAjB,GAAA,EAA0BC,KACvF;EACI,IAAI,CAACgB,WAAA,EAAoB,OAAAhB,KAAA;EAEjBA,KAAA,GAAAI,eAAA,CAAgBY,WAAa,EAAAjB,GAAA,EAAKC,KAAK;EAE3CD,GAAA,CAAAC,KAAA,EAAO,IAAIgB,WAAY,CAAAC,KAAA;EACvBlB,GAAA,CAAAC,KAAA,EAAO,IAAIgB,WAAY,CAAAE,SAAA;EACvBnB,GAAA,CAAAC,KAAA,EAAO,IAAIgB,WAAY,CAAAG,GAAA;EACvBpB,GAAA,CAAAC,KAAA,EAAO,IAAIgB,WAAY,CAAAN,IAAA;EACvBX,GAAA,CAAAC,KAAA,EAAO,IAAIgB,WAAY,CAAAI,UAAA;EAEpB,OAAApB,KAAA;AACX;AAEA,SAASQ,iBAAiBC,UAAqC,EAAAV,GAAA,EAA0BC,KACzF;EACI,IAAI,CAACS,UAAA,EAAmB,OAAAT,KAAA;EAEpBD,GAAA,CAAAC,KAAA,EAAO,IAAIS,UAAW,CAAAI,KAAA;EACtBd,GAAA,CAAAC,KAAA,EAAO,IAAIS,UAAW,CAAAY,KAAA;EACtBtB,GAAA,CAAAC,KAAA,EAAO,IAAIS,UAAW,CAAAa,IAAA;EACtBvB,GAAA,CAAAC,KAAA,EAAO,IAAIS,UAAW,CAAAc,QAAA;EACtBxB,GAAA,CAAAC,KAAA,EAAO,IAAIwB,KAAM,CAAAC,MAAA,CAAOC,QAAA,CAASjB,UAAW,CAAAG,KAAK,EAAEe,QAAS;EAEzD,OAAA3B,KAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}